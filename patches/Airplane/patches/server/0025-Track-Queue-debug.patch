From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Paul Sauve <paul@technove.co>
Date: Thu, 25 Feb 2021 20:25:49 -0600
Subject: [PATCH] Track Queue debug


diff --git a/src/main/java/com/tuinity/tuinity/util/maplist/IteratorSafeOrderedReferenceSet.java b/src/main/java/com/tuinity/tuinity/util/maplist/IteratorSafeOrderedReferenceSet.java
index b9bdce7c7ca8b7b107b0dca165d722321c16229d..739839314fd8a88b5fca8b9678e1df07a166c35d 100644
--- a/src/main/java/com/tuinity/tuinity/util/maplist/IteratorSafeOrderedReferenceSet.java
+++ b/src/main/java/com/tuinity/tuinity/util/maplist/IteratorSafeOrderedReferenceSet.java
@@ -20,7 +20,7 @@ public final class IteratorSafeOrderedReferenceSet<E> {
 
     protected final double maxFragFactor;
 
-    protected int iteratorCount;
+    public int iteratorCount; // Airplane - public for debug
 
     private final boolean threadRestricted;
 
diff --git a/src/main/java/gg/airplane/commands/AirplaneCommands.java b/src/main/java/gg/airplane/commands/AirplaneCommands.java
index 66b20250a26d005427601b1cdee43bdd9eba70cc..f84e26b2d8ab9a9b2d9e92e18002483127121135 100644
--- a/src/main/java/gg/airplane/commands/AirplaneCommands.java
+++ b/src/main/java/gg/airplane/commands/AirplaneCommands.java
@@ -2,11 +2,13 @@ package gg.airplane.commands;
 
 import gg.airplane.AirplaneCommand;
 import gg.airplane.flare.FlareCommand;
+import gg.airplane.structs.TrackQueue;
 import net.minecraft.server.MinecraftServer;
 
 public class AirplaneCommands {
     public static void init() {
         MinecraftServer.getServer().server.getCommandMap().register("airplane", "Airplane", new AirplaneCommand());
         MinecraftServer.getServer().server.getCommandMap().register("flare", "Airplane", new FlareCommand());
+        TrackQueue.TrackQueueDebugCommand.register();
     }
 }
diff --git a/src/main/java/gg/airplane/structs/TrackQueue.java b/src/main/java/gg/airplane/structs/TrackQueue.java
index ae7c5430b4f5970ede602bb234b5ffcee424f6a7..4419fbe94041f4b8a0ea848880798289d063b8e2 100644
--- a/src/main/java/gg/airplane/structs/TrackQueue.java
+++ b/src/main/java/gg/airplane/structs/TrackQueue.java
@@ -1,9 +1,12 @@
 package gg.airplane.structs;
 
 import com.tuinity.tuinity.util.maplist.IteratorSafeOrderedReferenceSet;
+import net.minecraft.server.level.WorldServer;
 import net.minecraft.world.level.chunk.Chunk;
 import net.minecraft.server.MinecraftServer;
 import org.apache.logging.log4j.Level;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
 
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.ForkJoinPool;
@@ -14,6 +17,28 @@ import java.util.concurrent.atomic.AtomicInteger;
  */
 public class TrackQueue {
 
+    public static class TrackQueueDebugCommand extends Command {
+        protected TrackQueueDebugCommand() {
+            super("trackqueuedebug");
+        }
+
+        public static void register() {
+            MinecraftServer.getServer().server.getCommandMap().register("trackqueuedebug", "Airplane", new TrackQueueDebugCommand());
+        }
+
+        @Override
+        public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+            if (!sender.isOp()) {
+                return false;
+            }
+            for (WorldServer world : MinecraftServer.getServer().getWorlds()) {
+                IteratorSafeOrderedReferenceSet<Chunk> chunks = world.getChunkProvider().entityTickingChunks;
+                sender.sendMessage(world.getWorld().getName() + ": " + chunks.size() + " / " + chunks.getListSize() + " (iterators: " + chunks.iteratorCount + ")");
+            }
+            return true;
+        }
+    }
+
     private final IteratorSafeOrderedReferenceSet<Chunk> chunks;
     private final ForkJoinPool pool = new ForkJoinPool(Math.max(4, Runtime.getRuntime().availableProcessors() >> 2));
     private final AtomicInteger taskIndex = new AtomicInteger();
diff --git a/src/main/java/net/minecraft/server/level/ChunkProviderServer.java b/src/main/java/net/minecraft/server/level/ChunkProviderServer.java
index 87c87b9767003652814c3726eece64470dbb69a8..dc1b7db4d39d4dfa65d60e5a059d3b94def6cf62 100644
--- a/src/main/java/net/minecraft/server/level/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/level/ChunkProviderServer.java
@@ -388,7 +388,7 @@ public class ChunkProviderServer extends IChunkProvider {
     }
 
     final com.tuinity.tuinity.util.maplist.IteratorSafeOrderedReferenceSet<Chunk> tickingChunks = new com.tuinity.tuinity.util.maplist.IteratorSafeOrderedReferenceSet<>(4096, 0.75f, 4096, 0.15, true);
-    final com.tuinity.tuinity.util.maplist.IteratorSafeOrderedReferenceSet<Chunk> entityTickingChunks = new com.tuinity.tuinity.util.maplist.IteratorSafeOrderedReferenceSet<>(4096, 0.75f, 4096, 0.15, true);
+    public final com.tuinity.tuinity.util.maplist.IteratorSafeOrderedReferenceSet<Chunk> entityTickingChunks = new com.tuinity.tuinity.util.maplist.IteratorSafeOrderedReferenceSet<>(4096, 0.75f, 4096, 0.15, true); // Airplane - public for debug
     // Tuinity end
 
     public ChunkProviderServer(WorldServer worldserver, Convertable.ConversionSession convertable_conversionsession, DataFixer datafixer, DefinedStructureManager definedstructuremanager, Executor executor, ChunkGenerator chunkgenerator, int i, boolean flag, WorldLoadListener worldloadlistener, Supplier<WorldPersistentData> supplier) {
