From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Simon Gardling <titaniumtown@gmail.com>
Date: Mon, 1 Feb 2021 21:35:38 -0500
Subject: [PATCH] remove world size checks


diff --git a/src/main/java/net/minecraft/server/BaseBlockPosition.java b/src/main/java/net/minecraft/server/BaseBlockPosition.java
index e811295b4d6afcd920f60e0ce5440e43300d9085..6fbc2fb83881bb7f46385c279dbbbeecd4748113 100644
--- a/src/main/java/net/minecraft/server/BaseBlockPosition.java
+++ b/src/main/java/net/minecraft/server/BaseBlockPosition.java
@@ -22,7 +22,8 @@ public class BaseBlockPosition implements Comparable<BaseBlockPosition> {
 
     // Paper start
     public boolean isValidLocation() {
-        return getX() >= -30000000 && getZ() >= -30000000 && getX() < 30000000 && getZ() < 30000000 && getY() >= 0 && getY() < 256;
+        // return getX() >= -30000000 && getZ() >= -30000000 && getX() < 30000000 && getZ() < 30000000 && getY() >= 0 && getY() < 256;
+        return getY() >= 0 && getY() < 256;
     }
     public boolean isInvalidYLocation() {
         return b < 0 || b >= 256;
diff --git a/src/main/java/net/minecraft/server/CommandForceload.java b/src/main/java/net/minecraft/server/CommandForceload.java
index 57e9e737f1d3c82eb81bfd2a6786ec98478d5615..254b5ecd3f42cdf458ac3403b68d88900e13a77c 100644
--- a/src/main/java/net/minecraft/server/CommandForceload.java
+++ b/src/main/java/net/minecraft/server/CommandForceload.java
@@ -8,6 +8,7 @@ import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType;
 import com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
 import it.unimi.dsi.fastutil.longs.LongSet;
+import java.util.function.Consumer;
 
 public class CommandForceload {
 
@@ -80,7 +81,8 @@ public class CommandForceload {
         ResourceKey<World> resourcekey = worldserver.getDimensionKey();
         LongSet longset = worldserver.getForceLoadedChunks();
 
-        longset.forEach((i) -> {
+        // longset.forEach((i) -> {
+        longset.forEach((Consumer<? super Long>) (i) -> {
             worldserver.setForceLoaded(ChunkCoordIntPair.getX(i), ChunkCoordIntPair.getZ(i), false);
         });
         commandlistenerwrapper.sendMessage(new ChatMessage("commands.forceload.removed.all", new Object[]{resourcekey.a()}), true);
@@ -93,7 +95,7 @@ public class CommandForceload {
         int k = Math.max(blockposition2d.a, blockposition2d1.a);
         int l = Math.max(blockposition2d.b, blockposition2d1.b);
 
-        if (i >= -30000000 && j >= -30000000 && k < 30000000 && l < 30000000) {
+        // if (i >= -30000000 && j >= -30000000 && k < 30000000 && l < 30000000) {
             int i1 = i >> 4;
             int j1 = j >> 4;
             int k1 = k >> 4;
@@ -136,8 +138,10 @@ public class CommandForceload {
                     return j2;
                 }
             }
+        /*
         } else {
             throw ArgumentPosition.b.create();
         }
+        */
     }
 }
diff --git a/src/main/java/net/minecraft/server/CommandWorldBorder.java b/src/main/java/net/minecraft/server/CommandWorldBorder.java
index 11ad785b2408ba94f9d80c4af3a81e0c0e7e9a64..42ffb688d933a33e484a816390b91abf362dfe94 100644
--- a/src/main/java/net/minecraft/server/CommandWorldBorder.java
+++ b/src/main/java/net/minecraft/server/CommandWorldBorder.java
@@ -23,11 +23,13 @@ public class CommandWorldBorder {
     public static void a(com.mojang.brigadier.CommandDispatcher<CommandListenerWrapper> com_mojang_brigadier_commanddispatcher) {
         com_mojang_brigadier_commanddispatcher.register((LiteralArgumentBuilder) ((LiteralArgumentBuilder) ((LiteralArgumentBuilder) ((LiteralArgumentBuilder) ((LiteralArgumentBuilder) ((LiteralArgumentBuilder) ((LiteralArgumentBuilder) CommandDispatcher.a("worldborder").requires((commandlistenerwrapper) -> {
             return commandlistenerwrapper.hasPermission(2);
-        })).then(CommandDispatcher.a("add").then(((RequiredArgumentBuilder) CommandDispatcher.a("distance", (ArgumentType) FloatArgumentType.floatArg(-6.0E7F, 6.0E7F)).executes((commandcontext) -> {
+        // })).then(CommandDispatcher.a("add").then(((RequiredArgumentBuilder) CommandDispatcher.a("distance", (ArgumentType) FloatArgumentType.floatArg(-6.0E7F, 6.0E7F)).executes((commandcontext) -> {
+        })).then(CommandDispatcher.a("add").then(((RequiredArgumentBuilder) CommandDispatcher.a("distance", (ArgumentType) FloatArgumentType.floatArg(-Float.MAX_VALUE, Float.MAX_VALUE)).executes((commandcontext) -> {
             return a((CommandListenerWrapper) commandcontext.getSource(), ((CommandListenerWrapper) commandcontext.getSource()).getWorld().getWorldBorder().getSize() + (double) FloatArgumentType.getFloat(commandcontext, "distance"), 0L);
         })).then(CommandDispatcher.a("time", (ArgumentType) IntegerArgumentType.integer(0)).executes((commandcontext) -> {
             return a((CommandListenerWrapper) commandcontext.getSource(), ((CommandListenerWrapper) commandcontext.getSource()).getWorld().getWorldBorder().getSize() + (double) FloatArgumentType.getFloat(commandcontext, "distance"), ((CommandListenerWrapper) commandcontext.getSource()).getWorld().getWorldBorder().j() + (long) IntegerArgumentType.getInteger(commandcontext, "time") * 1000L);
-        }))))).then(CommandDispatcher.a("set").then(((RequiredArgumentBuilder) CommandDispatcher.a("distance", (ArgumentType) FloatArgumentType.floatArg(-6.0E7F, 6.0E7F)).executes((commandcontext) -> {
+        // }))))).then(CommandDispatcher.a("set").then(((RequiredArgumentBuilder) CommandDispatcher.a("distance", (ArgumentType) FloatArgumentType.floatArg(-6.0E7F, 6.0E7F)).executes((commandcontext) -> {
+        }))))).then(CommandDispatcher.a("set").then(((RequiredArgumentBuilder) CommandDispatcher.a("distance", (ArgumentType) FloatArgumentType.floatArg(-Float.MAX_VALUE, Float.MAX_VALUE)).executes((commandcontext) -> {
             return a((CommandListenerWrapper) commandcontext.getSource(), (double) FloatArgumentType.getFloat(commandcontext, "distance"), 0L);
         })).then(CommandDispatcher.a("time", (ArgumentType) IntegerArgumentType.integer(0)).executes((commandcontext) -> {
             return a((CommandListenerWrapper) commandcontext.getSource(), (double) FloatArgumentType.getFloat(commandcontext, "distance"), (long) IntegerArgumentType.getInteger(commandcontext, "time") * 1000L);
@@ -121,8 +123,10 @@ public class CommandWorldBorder {
             throw CommandWorldBorder.b.create();
         } else if (d0 < 1.0D) {
             throw CommandWorldBorder.c.create();
+        /*
         } else if (d0 > 6.0E7D) {
             throw CommandWorldBorder.d.create();
+        */
         } else {
             if (i > 0L) {
                 worldborder.transitionSizeBetween(d1, d0, i);
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index d3e2c5d4a755e0bee4c0a13204544e91a41c292c..70df77f4553806fddd075b6a59ee2a2e4f8d9795 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -561,7 +561,8 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
 
     @Override
     public int au() {
-        return this.getDedicatedServerProperties().maxWorldSize;
+        // return this.getDedicatedServerProperties().maxWorldSize;
+        return Integer.MAX_VALUE;
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/DedicatedServerProperties.java b/src/main/java/net/minecraft/server/DedicatedServerProperties.java
index fe5937d890762ab37a90f189c4992af389d2c41d..d2520b7ee84f1e307faca2018c75f79d75ed707d 100644
--- a/src/main/java/net/minecraft/server/DedicatedServerProperties.java
+++ b/src/main/java/net/minecraft/server/DedicatedServerProperties.java
@@ -52,7 +52,7 @@ public class DedicatedServerProperties extends PropertyManager<DedicatedServerPr
     public final int networkCompressionThreshold;
     public final boolean broadcastRconToOps;
     public final boolean broadcastConsoleToOps;
-    public final int maxWorldSize;
+    // public final int maxWorldSize;
     public final boolean syncChunkWrites;
     public final boolean enableJmxMonitoring;
     public final boolean enableStatus;
@@ -103,9 +103,11 @@ public class DedicatedServerProperties extends PropertyManager<DedicatedServerPr
         this.networkCompressionThreshold = this.getInt("network-compression-threshold", 256);
         this.broadcastRconToOps = this.getBoolean("broadcast-rcon-to-ops", true);
         this.broadcastConsoleToOps = this.getBoolean("broadcast-console-to-ops", true);
+        /*
         this.maxWorldSize = this.a("max-world-size", (integer) -> {
             return MathHelper.clamp(integer, 1, 29999984);
         }, 29999984);
+        */
         this.syncChunkWrites = this.getBoolean("sync-chunk-writes", true) && Boolean.getBoolean("Paper.enable-sync-chunk-writes"); // Paper - hide behind flag
         this.enableJmxMonitoring = this.getBoolean("enable-jmx-monitoring", false);
         this.enableStatus = this.getBoolean("enable-status", true);
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 30283ec708864e102e311d22e8c85e5abc9dfb3b..d27ce58e5a8a0373de8303340e6a38d7155c57fc 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -1550,6 +1550,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     public void f(double d0, double d1, double d2) {
+        /*
         double d3 = MathHelper.a(d0, -3.0E7D, 3.0E7D);
         double d4 = MathHelper.a(d2, -3.0E7D, 3.0E7D);
 
@@ -1557,6 +1558,11 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         this.lastY = d1;
         this.lastZ = d4;
         this.setPosition(d3, d1, d4);
+        */
+        this.lastX = d0;
+        this.lastY = d1;
+        this.lastZ = d2;
+        this.setPosition(d0, d1, d2);
         if (valid) world.getChunkAt((int) Math.floor(this.locX()) >> 4, (int) Math.floor(this.locZ()) >> 4); // CraftBukkit // Paper
     }
 
@@ -2925,10 +2931,17 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
                 return null;
             } else {
                 WorldBorder worldborder = worldserver.getWorldBorder();
+                /*
                 double d0 = Math.max(-2.9999872E7D, worldborder.e() + 16.0D);
                 double d1 = Math.max(-2.9999872E7D, worldborder.f() + 16.0D);
                 double d2 = Math.min(2.9999872E7D, worldborder.g() - 16.0D);
                 double d3 = Math.min(2.9999872E7D, worldborder.h() - 16.0D);
+                */
+                double d0 = worldborder.e() + 16.0D;
+                double d1 = worldborder.f() + 16.0D;
+                double d2 = worldborder.g() - 16.0D;
+                double d3 = worldborder.h() - 16.0D;
+
                 double d4 = DimensionManager.a(this.world.getDimensionManager(), worldserver.getDimensionManager());
                 BlockPosition blockposition = new BlockPosition(MathHelper.a(this.locX() * d4, d0, d2), this.locY(), MathHelper.a(this.locZ() * d4, d1, d3));
                 // CraftBukkit start
diff --git a/src/main/java/net/minecraft/server/IWorldReader.java b/src/main/java/net/minecraft/server/IWorldReader.java
index eb7282c33dd4f0bb26b9ccafc42bd92e6fdb997e..13bf0a6b9a7bb7d16748a620bbd0dd3110dab5b7 100644
--- a/src/main/java/net/minecraft/server/IWorldReader.java
+++ b/src/main/java/net/minecraft/server/IWorldReader.java
@@ -139,7 +139,8 @@ public interface IWorldReader extends IBlockLightAccess, ICollisionAccess, Biome
     }
 
     default int c(BlockPosition blockposition, int i) {
-        return blockposition.getX() >= -30000000 && blockposition.getZ() >= -30000000 && blockposition.getX() < 30000000 && blockposition.getZ() < 30000000 ? this.getLightLevel(blockposition, i) : 15;
+        // return blockposition.getX() >= -30000000 && blockposition.getZ() >= -30000000 && blockposition.getX() < 30000000 && blockposition.getZ() < 30000000 ? this.getLightLevel(blockposition, i) : 15;
+        return this.getLightLevel(blockposition, i);
     }
 
     @Deprecated
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index e98779a3b8569b62c88c59bb8c5a95994f641f51..2df2f619715f38040feff48409022957092b9c16 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1878,7 +1878,8 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
     }
 
     public int au() {
-        return 29999984;
+        // return 29999984;
+        return Integer.MAX_VALUE;
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 0364c923792acb30dc600db8ed4f05f8d5597e1d..a1ed80a50eaedf53ffd22b08450e931253ce0016 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -382,7 +382,8 @@ public class PlayerConnection implements PacketListenerPlayIn {
     }
 
     private static boolean b(PacketPlayInFlying packetplayinflying) {
-        return Doubles.isFinite(packetplayinflying.a(0.0D)) && Doubles.isFinite(packetplayinflying.b(0.0D)) && Doubles.isFinite(packetplayinflying.c(0.0D)) && Floats.isFinite(packetplayinflying.b(0.0F)) && Floats.isFinite(packetplayinflying.a(0.0F)) ? Math.abs(packetplayinflying.a(0.0D)) > 3.0E7D || Math.abs(packetplayinflying.b(0.0D)) > 3.0E7D || Math.abs(packetplayinflying.c(0.0D)) > 3.0E7D : true;
+        // return Doubles.isFinite(packetplayinflying.a(0.0D)) && Doubles.isFinite(packetplayinflying.b(0.0D)) && Doubles.isFinite(packetplayinflying.c(0.0D)) && Floats.isFinite(packetplayinflying.b(0.0F)) && Floats.isFinite(packetplayinflying.a(0.0F)) ? Math.abs(packetplayinflying.a(0.0D)) > 3.0E7D || Math.abs(packetplayinflying.b(0.0D)) > 3.0E7D || Math.abs(packetplayinflying.c(0.0D)) > 3.0E7D : true;
+        return Doubles.isFinite(packetplayinflying.a(0.0D)) && Doubles.isFinite(packetplayinflying.b(0.0D)) && Doubles.isFinite(packetplayinflying.c(0.0D)) && Floats.isFinite(packetplayinflying.b(0.0F)) && Floats.isFinite(packetplayinflying.a(0.0F)) ? false : true;
     }
 
     private static boolean b(PacketPlayInVehicleMove packetplayinvehiclemove) {
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index a4b8505705061bd01a50e68d04e620a000f6084f..3404b607fa7b855db93e1edfdb357904debdd129 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -460,7 +460,8 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
     }
 
     private static boolean D(BlockPosition blockposition) {
-        return blockposition.getX() >= -30000000 && blockposition.getZ() >= -30000000 && blockposition.getX() < 30000000 && blockposition.getZ() < 30000000;
+        // return blockposition.getX() >= -30000000 && blockposition.getZ() >= -30000000 && blockposition.getX() < 30000000 && blockposition.getZ() < 30000000;
+        return true;
     }
 
     private static boolean d(int i) {
@@ -849,15 +850,17 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
     @Override public int a(HeightMap.Type heightmap_type, int i, int j) { // Paper - OBFHELPER
         int k;
 
-        if (i >= -30000000 && j >= -30000000 && i < 30000000 && j < 30000000) {
+        // if (i >= -30000000 && j >= -30000000 && i < 30000000 && j < 30000000) {
             if (this.isChunkLoaded(i >> 4, j >> 4)) {
                 k = this.getChunkAt(i >> 4, j >> 4).getHighestBlock(heightmap_type, i & 15, j & 15) + 1;
             } else {
                 k = 0;
             }
+        /*
         } else {
             k = this.getSeaLevel() + 1;
         }
+        */
 
         return k;
     }
diff --git a/src/main/java/net/minecraft/server/WorldBorder.java b/src/main/java/net/minecraft/server/WorldBorder.java
index 6b4c007550c3e2e405314d8931630557655ce6f1..f49ea31334c861e02252acde1e6075a2b17a7e53 100644
--- a/src/main/java/net/minecraft/server/WorldBorder.java
+++ b/src/main/java/net/minecraft/server/WorldBorder.java
@@ -17,9 +17,15 @@ public class WorldBorder {
     private int f = 5;
     private double g;
     private double h;
+    /*
     private int i = 29999984;
     private WorldBorder.a j = new WorldBorder.d(6.0E7D);
     public static final WorldBorder.c c = new WorldBorder.c(0.0D, 0.0D, 0.2D, 5.0D, 5, 15, 6.0E7D, 0L, 0.0D);
+    */
+    private int i = Integer.MAX_VALUE;
+    private WorldBorder.a j = new WorldBorder.d(Double.MAX_VALUE);
+    public static final WorldBorder.c c = new WorldBorder.c(0.0D, 0.0D, 0.2D, 5.0D, 5, 15, Double.MAX_VALUE, 0L, 0.0D);
+
     public WorldServer world; // CraftBukkit
 
     public WorldBorder() {}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 300139b0a08a83647f6e010191c475cc65106a58..5348626ca36269467a069cc42051e4776ce1b6b0 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -655,7 +655,8 @@ public final class CraftServer implements Server {
 
     @Override
     public int getMaxWorldSize() {
-        return this.getProperties().maxWorldSize;
+        // return this.getProperties().maxWorldSize;
+        return Integer.MAX_VALUE;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorldBorder.java b/src/main/java/org/bukkit/craftbukkit/CraftWorldBorder.java
index 044d46ac87f9e82b54ebf69b3cfd5842d5388d66..ad5557ffd67237f0fceb06007eb5bc3455ac1699 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorldBorder.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorldBorder.java
@@ -18,7 +18,7 @@ public class CraftWorldBorder implements WorldBorder {
 
     @Override
     public void reset() {
-        this.setSize(6.0E7D);
+        this.setSize(Double.MAX_VALUE);
         this.setDamageAmount(0.2D);
         this.setDamageBuffer(5.0D);
         this.setWarningDistance(5);
@@ -39,7 +39,7 @@ public class CraftWorldBorder implements WorldBorder {
     @Override
     public void setSize(double newSize, long time) {
         // PAIL: TODO: Magic Values
-        newSize = Math.min(6.0E7D, Math.max(1.0D, newSize));
+        newSize = Math.min(Double.MAX_VALUE, Math.max(1.0D, newSize));
         time = Math.min(9223372036854775L, Math.max(0L, time));
 
         if (time > 0L) {
@@ -60,8 +60,10 @@ public class CraftWorldBorder implements WorldBorder {
     @Override
     public void setCenter(double x, double z) {
         // PAIL: TODO: Magic Values
+        /*
         x = Math.min(3.0E7D, Math.max(-3.0E7D, x));
         z = Math.min(3.0E7D, Math.max(-3.0E7D, z));
+        */
 
         this.handle.setCenter(x, z);
     }
