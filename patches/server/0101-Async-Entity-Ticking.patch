From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Simon Gardling <titaniumtown@gmail.com>
Date: Wed, 3 Mar 2021 12:02:28 -0500
Subject: [PATCH] Async Entity Ticking

Initial basis from: https://github.com/PaperMC/Paper/pull/2671 by Bloodrayne1995

diff --git a/src/main/java/com/tuinity/tuinity/util/TickThread.java b/src/main/java/com/tuinity/tuinity/util/TickThread.java
index 08ed243259f052165c6f75aed1d1d65a14219715..2a64e01d2fb84510db14d4627fd15d4c8427cbe8 100644
--- a/src/main/java/com/tuinity/tuinity/util/TickThread.java
+++ b/src/main/java/com/tuinity/tuinity/util/TickThread.java
@@ -22,10 +22,12 @@ public final class TickThread extends Thread {
 
 
     public static void ensureTickThread(final String reason) {
+        /*
         if (!Bukkit.isPrimaryThread()) {
             MinecraftServer.LOGGER.fatal("Thread " + Thread.currentThread().getName() + " failed main thread check: " + reason, new Throwable());
             throw new IllegalStateException(reason);
         }
+        */
     }
 
     public final int id; /* We don't override getId as the spec requires that it be unique (with respect to all other threads) */
diff --git a/src/main/java/me/jellysquid/mods/lithium/common/entity/tracker/EntityTrackerEngine.java b/src/main/java/me/jellysquid/mods/lithium/common/entity/tracker/EntityTrackerEngine.java
index 180c724b40228f11ed0c9869779cf466e8e97ebe..507d71825603fdcd64fa1a14469bf7689f3d37fc 100644
--- a/src/main/java/me/jellysquid/mods/lithium/common/entity/tracker/EntityTrackerEngine.java
+++ b/src/main/java/me/jellysquid/mods/lithium/common/entity/tracker/EntityTrackerEngine.java
@@ -31,7 +31,7 @@ public class EntityTrackerEngine {
     /**
      * Called when an entity is added to the world.
      */
-    public void onEntityAdded(int x, int y, int z, EntityLiving entity) {
+    public synchronized void onEntityAdded(int x, int y, int z, EntityLiving entity) {
         if (this.addEntity(x, y, z, entity)) {
             this.addListener(x, y, z, entity.getListener());
         }
@@ -40,7 +40,7 @@ public class EntityTrackerEngine {
     /**
      * Called when an entity is removed from the world.
      */
-    public void onEntityRemoved(int x, int y, int z, EntityLiving entity) {
+    public synchronized void onEntityRemoved(int x, int y, int z, EntityLiving entity) {
         if (this.removeEntity(x, y, z, entity)) {
             this.removeListener(entity.getListener());
         }
@@ -183,7 +183,7 @@ public class EntityTrackerEngine {
             this.key = key;
         }
 
-        public void addListener(NearbyEntityListener listener) {
+        public synchronized void addListener(NearbyEntityListener listener) {
             for (EntityLiving entity : this.entities) {
                 listener.onEntityEnteredRange(entity);
             }
@@ -191,7 +191,7 @@ public class EntityTrackerEngine {
             this.listeners.add(listener);
         }
 
-        public void removeListener(NearbyEntityListener listener) {
+        public synchronized void removeListener(NearbyEntityListener listener) {
             if (this.listeners.remove(listener)) {
                 for (EntityLiving entity : this.entities) {
                     listener.onEntityLeftRange(entity);
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 764235f7fd31a853e2d9b9ecd3d8b09775c775d9..3d486badb83a1cc0fceb38df6c68c1b6a266c5f9 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -22,6 +22,7 @@ import java.util.stream.StreamSupport;
 import javax.annotation.Nullable;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import net.minecraft.server.MCUtil;
 
 public class Chunk implements IChunkAccess {
 
@@ -802,11 +803,13 @@ public class Chunk implements IChunkAccess {
         if (!this.entitySlices[i].remove(entity)) { // Tuinity - optimise hard colliding entities // Tuinity - entities by class // Tuinity
             return;
         }
+        MCUtil.ensureMain(() -> {
         // Yatopia start - Port lithium
         if (entity instanceof EntityLiving) {
             this.world.getEntityTracker().onEntityAdded(entity.chunkX, entity.chunkY, entity.chunkZ, (EntityLiving) entity);
         }
         // Yatopia end
+        });
         if (entity instanceof EntityItem) {
             itemCounts[i]--;
         } else if (entity instanceof IInventory) {
@@ -816,11 +819,14 @@ public class Chunk implements IChunkAccess {
         this.markDirty(); // Paper
         // Paper end
         this.entities.remove(entity); // Paper
+        MCUtil.ensureMain(() -> {
         // Yatopia start - Port lithium
         if (entity instanceof EntityLiving) {
             this.world.getEntityTracker().onEntityRemoved(entity.chunkX, entity.chunkY, entity.chunkZ, (EntityLiving) entity);
         }
         // Yatopia end
+        });
+
     }
 
     public final int getHighestBlockY(HeightMap.Type heightmap_type, int i, int j) { return this.getHighestBlock(heightmap_type, i, j) + 1; } // Paper - sort of an obfhelper, but without -1
diff --git a/src/main/java/net/minecraft/server/CombatTracker.java b/src/main/java/net/minecraft/server/CombatTracker.java
index 8172baf8a73d8185819e52c52691f00ec7ae68af..0c78c56dee431a1a3e0909844eed77d0fe9091b6 100644
--- a/src/main/java/net/minecraft/server/CombatTracker.java
+++ b/src/main/java/net/minecraft/server/CombatTracker.java
@@ -5,10 +5,11 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Optional;
 import javax.annotation.Nullable;
+import java.util.concurrent.CopyOnWriteArrayList;
 
 public class CombatTracker {
 
-    private final List<CombatEntry> a = Lists.newArrayList();
+    private final CopyOnWriteArrayList<CombatEntry> a = new CopyOnWriteArrayList<>();
     private final EntityLiving b;
     private int c;
     private int d;
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 56c486e5f41ddcb348dcab71fc39a0b2b500de77..65fd19aaaa94f97d4d1accbd078bc017a4f6cf24 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -810,6 +810,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
             worldserver = (WorldServer) iterator.next();
             if (worldserver != null) {
                 try {
+                    worldserver.asyncentitymanager.shutdownExecutors(); // Yatopia
                     worldserver.close();
                 } catch (IOException ioexception) {
                     MinecraftServer.LOGGER.error("Exception closing the level", ioexception);
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index cf96a7c90b87a542212301802ab74c14aaaa1535..4ab35e56956bdfdd65d7374722f726aa76605ca2 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -588,7 +588,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable, NonBlocki
     }
 
     @Override
-    public final boolean setTypeAndData(BlockPosition blockposition, IBlockData iblockdata, int i) { // Paper - final for inline
+    public synchronized final boolean setTypeAndData(BlockPosition blockposition, IBlockData iblockdata, int i) { // Paper - final for inline // Yatopia - synchronize
         return this.a(blockposition, iblockdata, i, 512);
     }
 
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 2fd7216056348275f1386503e602c084495a2a35..2a72b00699c10ce11733b84823e685dae00865b6 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -10,6 +10,7 @@ import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Queues;
 import com.google.common.collect.Sets;
+import org.yatopiamc.yatopia.server.ticking.AsyncEntityManager;
 import it.unimi.dsi.fastutil.ints.Int2ObjectLinkedOpenHashMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap.Entry;
@@ -80,7 +81,7 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
         }
     }
     // Paper end
-    private final MinecraftServer server;
+    public final MinecraftServer server; // Yatopia - private -> public
     public final WorldDataServer worldDataServer; // CraftBukkit - type
     public boolean savingDisabled;
     private boolean everyoneSleeping;
@@ -100,6 +101,7 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
     private double fakeTime; // Purpur
 
 
+    public AsyncEntityManager asyncentitymanager; // Yatopia - Async entity ticking
     // CraftBukkit start
     private int tickPosition;
     public final Convertable.ConversionSession convertable;
@@ -488,6 +490,7 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
 
         this.asyncChunkTaskManager = new com.destroystokyo.paper.io.chunk.ChunkTaskManager(this); // Paper
         this.fakeTime = this.worldDataServer.getDayTime(); // Purpur
+        this.asyncentitymanager = new AsyncEntityManager(this); // Yatopia - Async entity Ticking
     }
 
     // Tuinity start - optimise collision
@@ -977,6 +980,7 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
 
             org.spigotmc.ActivationRange.activateEntities(this); // Spigot
             timings.entityTick.startTiming(); // Spigot
+            if (!org.yatopiamc.yatopia.server.YatopiaConfig.asyncEntities) {
             while (objectiterator.hasNext()) {
                 Entity entity = (Entity) objectiterator.next(); // Tuinity
                 Entity entity1 = entity.getVehicle();
@@ -1003,7 +1007,6 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
                     } else {
                         this.removeNavigatorsFromData(entity);
                     }
-                    // Tuinity end - optimise notify()
                 }
 
                 gameprofilerfiller.exit();
@@ -1011,7 +1014,6 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
                     if (!entity1.dead && entity1.w(entity)) {
                         continue;
                     }
-
                     entity.stopRiding();
                 }
 
@@ -1023,9 +1025,7 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
                 gameprofilerfiller.exit();
                 gameprofilerfiller.enter("remove");
                 if (entity.dead) {
-                    this.removeEntityFromChunk(entity);
-                    this.entitiesById.remove(entity.getId()); // Tuinity
-                    this.unregisterEntity(entity);
+                    this.removeEntity(entity);
                 } else if (entity.inChunk && entity.valid) { // Tuinity start - optimise notify()
                     if (entityTickingChunk) { // Airplane - reuse
                         this.updateNavigatorsInRegion(entity);
@@ -1037,9 +1037,36 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
 
                 gameprofilerfiller.exit();
             }
-            timings.entityTick.stopTiming(); // Spigot
+            } else {
+                while (objectiterator.hasNext()) {
+                    Entity entity = (Entity) objectiterator.next();
+                    Entity entity1 = entity.getVehicle();
+                    gameprofilerfiller.enter("checkDespawn");
+                    if (!entity.dead) {
+                        entity.checkDespawn();
+                        if (entity.inChunk && entity.valid) {
+                            if (this.getChunkProvider().isInEntityTickingChunk(entity)) {
+                                this.updateNavigatorsInRegion(entity);
+                            }
+                        } else {
+                            this.removeNavigatorsFromData(entity);
+                        }
+                    }
+
+                    gameprofilerfiller.exit();
+                    if (entity1 != null) {
+                        if (!entity1.dead && entity1.w(entity)) {
+                            continue;
+                        }
+                        entity.stopRiding();
+                    }
+                }
+
+                this.asyncentitymanager.doTick(this.entitiesForIteration, gameprofilerfiller); // Yatopia - Async entity ticking
+            }
 
             objectiterator.finishedIterating(); // Tuinity
+            timings.entityTick.stopTiming(); // Spigot
             this.tickingEntities = false;
             // Paper start
             for (java.lang.Runnable run : this.afterEntityTickingTasks) {
@@ -1338,7 +1365,7 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
 
     // Tuinity start - log detailed entity tick information
     // TODO replace with varhandle
-    static final java.util.concurrent.atomic.AtomicReference<Entity> currentlyTickingEntity = new java.util.concurrent.atomic.AtomicReference<>();
+    public static final java.util.concurrent.atomic.AtomicReference<Entity> currentlyTickingEntity = new java.util.concurrent.atomic.AtomicReference<>();
 
     public static List<Entity> getCurrentlyTickingEntities() {
         Entity ticking = currentlyTickingEntity.get();
@@ -1388,11 +1415,13 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
                     return IRegistry.ENTITY_TYPE.getKey(entity.getEntityType()).toString();
                 });
                 gameprofilerfiller.c("tickNonPassenger");
-                if (isActive) { // Paper - EAR 2
-                    TimingHistory.activatedEntityTicks++; // Paper
-                entity.tick();
-                entity.postTick(); // CraftBukkit
-                } else { entity.inactiveTick(); } // Paper - EAR 2
+                if (isActive) {
+                    TimingHistory.activatedEntityTicks++;
+                    entity.tick();
+                    entity.postTick();
+                } else {
+                    entity.inactiveTick(); // Paper - EAR 2
+                }
                 gameprofilerfiller.exit();
             }
 
@@ -1416,6 +1445,7 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
         // Tuinity end - log detailed entity tick information
     }
 
+    public void tickPassenger(Entity entity, Entity entity1) { this.a(entity, entity1); } // Yatopia - OBFHELPER
     public void a(Entity entity, Entity entity1) {
         if (!entity1.dead && entity1.getVehicle() == entity) {
             if (entity1 instanceof EntityHuman || this.getChunkProvider().a(entity1)) {
@@ -1926,7 +1956,7 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
         chunkProvider.getLightEngine().queue.remove(chunk.getPos().pair()); // Yatopia - unregister from light queue
     }
 
-    public void unregisterEntity(Entity entity) {
+    public synchronized void unregisterEntity(Entity entity) {
         org.spigotmc.AsyncCatcher.catchOp("entity unregister"); // Spigot
         this.entitiesForIteration.remove(entity); // Tuinity
         // Paper start - fix entity registration issues
@@ -2024,7 +2054,7 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
         }
     }
 
-    void removeNavigatorsFromData(Entity entity) {
+    public void removeNavigatorsFromData(Entity entity) {
         com.tuinity.tuinity.chunk.SingleThreadChunkRegionManager.RegionSection section =
                 this.getChunkProvider().playerChunkMap.dataRegionManager.getRegionSection(entity.chunkX, entity.chunkZ);
         if (section != null) {
@@ -2035,7 +2065,7 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
         }
     }
 
-    void addNavigatorsIfPathingToRegion(Entity entity) {
+    public void addNavigatorsIfPathingToRegion(Entity entity) {
         com.tuinity.tuinity.chunk.SingleThreadChunkRegionManager.RegionSection section =
                 this.getChunkProvider().playerChunkMap.dataRegionManager.getRegionSection(entity.chunkX, entity.chunkZ);
         if (section != null) {
@@ -2048,7 +2078,7 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
         }
     }
 
-    void updateNavigatorsInRegion(Entity entity) {
+    public void updateNavigatorsInRegion(Entity entity) {
         com.tuinity.tuinity.chunk.SingleThreadChunkRegionManager.RegionSection section =
                 this.getChunkProvider().playerChunkMap.dataRegionManager.getRegionSection(entity.chunkX, entity.chunkZ);
         if (section != null) {
@@ -2064,7 +2094,7 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
     }
     // Tuinity end - optimise notify()
 
-    private void registerEntity(Entity entity) {
+    private synchronized void registerEntity(Entity entity) {
         org.spigotmc.AsyncCatcher.catchOp("entity register"); // Spigot
         // Paper start - don't double enqueue entity registration
         //noinspection ObjectEquality
@@ -2139,16 +2169,17 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
     }
 
     public void removeEntity(Entity entity) {
-        if (false && this.tickingEntities) {  // Tuinity
-            throw (IllegalStateException) SystemUtils.c((Throwable) (new IllegalStateException("Removing entity while ticking!")));
-        } else {
-            this.removeEntityFromChunk(entity);
-            this.entitiesById.remove(entity.getId());
-            this.unregisterEntity(entity);
-            entity.shouldBeRemoved = true; // Paper
+        Chunk ichunkaccess = entity.getCurrentChunk();
+        if (ichunkaccess != null) {
+            ((Chunk) ichunkaccess).b(entity);
         }
+
+        this.entitiesById.remove(entity.getId());
+        this.unregisterEntity(entity);
+        entity.shouldBeRemoved = true;
     }
 
+    /*
     private void removeEntityFromChunk(Entity entity) {
         Chunk ichunkaccess = entity.getCurrentChunk(); // Paper - getChunkAt(x,z,full,false) is broken by CraftBukkit as it won't return an unloading chunk. Use our current chunk reference as this points to what chunk they need to be removed from anyways
 
@@ -2157,6 +2188,7 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
         }
 
     }
+    */
 
     public void removePlayer(EntityPlayer entityplayer) {
         entityplayer.die();
diff --git a/src/main/java/org/spigotmc/AsyncCatcher.java b/src/main/java/org/spigotmc/AsyncCatcher.java
index 51e9c54cddf4b28ba3d3d892322c487774bdab70..c0d0e69711e0db496085cc07a6a926036bbcfae2 100644
--- a/src/main/java/org/spigotmc/AsyncCatcher.java
+++ b/src/main/java/org/spigotmc/AsyncCatcher.java
@@ -5,7 +5,7 @@ import net.minecraft.server.MinecraftServer;
 public class AsyncCatcher
 {
 
-    public static boolean enabled = true;
+    public static boolean enabled = false;
     public static boolean shuttingDown = false; // Paper
 
     public static void catchOp(String reason)
diff --git a/src/main/java/org/yatopiamc/yatopia/server/YatopiaConfig.java b/src/main/java/org/yatopiamc/yatopia/server/YatopiaConfig.java
index cb6ddf318ed07f05e32f8149e7b8be37bb6f1cf1..8de65c8be7781890b893242b4f16f18cf77f00a4 100644
--- a/src/main/java/org/yatopiamc/yatopia/server/YatopiaConfig.java
+++ b/src/main/java/org/yatopiamc/yatopia/server/YatopiaConfig.java
@@ -304,4 +304,15 @@ public class YatopiaConfig {
         regionFileIOThreadPoolSize = getInt("settings.threads.regionfile", -1);
         Preconditions.checkArgument(regionFileIOThreadPoolSize == -1 || regionFileIOThreadPoolSize > 0, "Invalid settings.threads.regionfile in yatopia.yml");
     }
+
+    public static boolean asyncEntities = false;
+    public static boolean asyncAllInactiveEntities = false;
+    public static boolean tickMostEntitiesAsync = false;
+    public static int asyncEntityThreads = 4;
+    private static void asyncentityTicking() {
+        asyncEntities = getBoolean("settings.async-entity.enabled", asyncEntities);
+        asyncEntityThreads = getInt("settings.async-entity.threads", asyncEntityThreads);
+        asyncAllInactiveEntities = getBoolean("settings.async-entity.inactive-entities", asyncAllInactiveEntities);
+        tickMostEntitiesAsync = getBoolean("settings.async-entity.tick-most-entities-async", tickMostEntitiesAsync);
+    }
 }
diff --git a/src/main/java/org/yatopiamc/yatopia/server/ticking/AsyncEntityManager.java b/src/main/java/org/yatopiamc/yatopia/server/ticking/AsyncEntityManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..0c30f112d7b17c62dd2f8fe0b3616a2c5fb8fcec
--- /dev/null
+++ b/src/main/java/org/yatopiamc/yatopia/server/ticking/AsyncEntityManager.java
@@ -0,0 +1,197 @@
+package org.yatopiamc.yatopia.server.ticking;
+
+import net.minecraft.server.Entity;
+import net.minecraft.server.EntityHuman;
+import net.minecraft.server.EntityFallingBlock;
+import net.minecraft.server.EntityZombie;
+import net.minecraft.server.EntityComplexPart;
+import net.minecraft.server.WorldServer;
+import net.minecraft.server.GameProfilerFiller;
+import com.destroystokyo.paper.exception.ServerInternalException;
+import com.destroystokyo.paper.event.server.ServerExceptionEvent;
+import net.minecraft.server.IRegistry;
+
+import java.util.List;
+import java.util.ArrayList;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.CopyOnWriteArrayList;
+import org.bukkit.Server;
+import org.bukkit.Bukkit;
+
+import java.util.concurrent.Executors;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.TimeUnit;
+import java.util.stream.Collectors;
+import com.google.common.collect.Lists;
+import co.aikar.timings.TimingHistory;
+import org.yatopiamc.yatopia.server.YatopiaConfig;
+
+public class AsyncEntityManager {
+
+    public final ExecutorService entityTickPool = Executors.newFixedThreadPool(org.yatopiamc.yatopia.server.YatopiaConfig.asyncEntityThreads);
+    public final List<Runnable> runnableList = new ArrayList<Runnable>();
+    private final CopyOnWriteArrayList<Entity> targetEntitiesRemove = new CopyOnWriteArrayList<>();
+    private final CopyOnWriteArrayList<Entity> targetEntitiesTickSync = new CopyOnWriteArrayList<>();
+    private final CopyOnWriteArrayList<Entity> targetEntitiesInactiveSync = new CopyOnWriteArrayList<>();
+
+    WorldServer worldserver;
+
+    public AsyncEntityManager(WorldServer worldserver) {
+        this.worldserver = worldserver;
+    }
+
+    public void entityInactiveTick(Entity entity) {
+        entity.inactiveTick();
+    }
+
+    public void entityActiveTick(Entity entity) {
+        entity.tick();
+        entity.postTick();
+    }
+
+    public boolean shouldTickEntityAsync(Entity entity) {
+        if (YatopiaConfig.tickMostEntitiesAsync) {
+            return !(entity instanceof EntityHuman) && !(entity instanceof EntityFallingBlock);
+        } else {
+            return entity instanceof EntityZombie;
+        }
+    }
+
+    public void entityJoinedWorld(Entity entity) {
+        try {
+            if (worldserver.currentlyTickingEntity.get() == null) {
+                worldserver.currentlyTickingEntity.lazySet(entity);
+            }
+            if (!(entity instanceof EntityHuman) && !worldserver.getChunkProvider().a(entity)) {
+                worldserver.chunkCheck(entity); // investigate
+            } else {
+                ++TimingHistory.entityTicks;
+                co.aikar.timings.Timing timer;
+                final boolean isActive = org.spigotmc.ActivationRange.checkIfActive(entity);
+                timer = isActive ? entity.getEntityType().tickTimer.startTiming() : entity.getEntityType().inactiveTickTimer.startTiming();
+                try {
+                    entity.g(entity.locX(), entity.locY(), entity.locZ()); // investigate
+                    entity.lastYaw = entity.yaw;
+                    entity.lastPitch = entity.pitch;
+                    if (entity.inChunk) {
+                        ++entity.ticksLived;
+                        GameProfilerFiller gameprofilerfiller = worldserver.getMethodProfiler();
+                        gameprofilerfiller.a(() -> IRegistry.ENTITY_TYPE.getKey(entity.getEntityType()).toString());
+                        gameprofilerfiller.c("tickNonPassenger");
+                        if (isActive) {
+                            /*
+                            TimingHistory.activatedEntityTicks++;
+                            if (YatopiaConfig.asyncActiveEntities && shouldTickEntityAsync(entity)) {
+                                runnableList.add(new Runnable(){
+                                    @Override
+                                    public void run() {
+                                        entityActiveTick(entity);
+                                    }
+                                });
+                            } else {
+                                targetEntitiesTickSync.add(entity);
+                            }
+                            */
+                            targetEntitiesTickSync.add(entity);
+                        } else {
+                            if (YatopiaConfig.asyncAllInactiveEntities) {
+                                runnableList.add(new Runnable(){
+                                    @Override
+                                    public void run() {
+                                        entityInactiveTick(entity);
+                                    }
+                                });
+                            } else {
+                                targetEntitiesInactiveSync.add(entity);
+                            }
+                        }
+                        gameprofilerfiller.exit();
+                    }
+
+                    worldserver.chunkCheck(entity);
+                } finally {
+                    timer.stopTiming();
+                }
+                if (entity.inChunk) {
+                    for (Entity entity1 : entity.getPassengers()) {
+                        worldserver.tickPassenger(entity, entity1); // Note: may want to add a queue for this later
+                    }
+                }
+            }
+        } finally {
+            if (worldserver.currentlyTickingEntity.get() == entity) {
+                worldserver.currentlyTickingEntity.lazySet(null);
+            }
+        }
+    }
+
+
+    public void tickEntity(Entity entity, GameProfilerFiller gameprofilerfiller) {
+        gameprofilerfiller.enter("tick");
+        if (!entity.dead && !(entity instanceof EntityComplexPart)) {
+            try {
+                this.entityJoinedWorld(entity);
+            } catch (Throwable throwable) {
+                if (throwable instanceof ThreadDeath) throw throwable;
+                String msg = "Entity threw exception at " + entity.world.getWorld().getName() + ":" + entity.locX() + "," + entity.locY() + "," + entity.locZ();
+                System.err.println(msg);
+                throwable.printStackTrace();
+                worldserver.getServer().getPluginManager().callEvent(new ServerExceptionEvent(new ServerInternalException(msg, throwable)));
+                entity.dead = true;
+            }
+        }
+        gameprofilerfiller.exit();
+    }
+
+    public void doTick(com.tuinity.tuinity.util.maplist.IteratorSafeOrderedReferenceSet<Entity> entitiesForIteration, GameProfilerFiller gameprofilerfiller) {
+        List<Entity> entityList = Lists.newArrayList(entitiesForIteration.iterator());
+        for (Entity entity : entityList) {
+            tickEntity(entity, gameprofilerfiller);
+        }
+
+        runnableList.stream().map(runnable -> CompletableFuture.runAsync(() -> runnable.run(), entityTickPool)).collect(Collectors.toSet());
+
+        // Ticks some active entities sync
+        for (Entity entity : targetEntitiesTickSync) {
+            entityActiveTick(entity);
+        }
+        // Ticks some inactive entities sync
+        for (Entity entity : targetEntitiesInactiveSync) {
+            entityInactiveTick(entity);
+        }
+        // Modified from entity iteration in WorldServer.java
+        for (Entity entity : entityList) {
+            if (entity.dead) {
+                targetEntitiesRemove.add(entity); // Adds dead entities to a queue to be removed
+            } else if (entity.inChunk && entity.valid) {
+                if (worldserver.getChunkProvider().isInEntityTickingChunk(entity)) {
+                    worldserver.updateNavigatorsInRegion(entity);
+                }
+            } else {
+                worldserver.removeNavigatorsFromData(entity);
+            }
+        }
+
+        gameprofilerfiller.enter("remove");
+        // Removes dead entities that were previously added to the queue
+        targetEntitiesRemove.forEach(entity -> worldserver.removeEntity(entity));
+        gameprofilerfiller.exit();
+
+        // Clears queues of entities for next tick
+        targetEntitiesRemove.clear();
+        targetEntitiesTickSync.clear();
+        targetEntitiesInactiveSync.clear();
+        runnableList.clear();
+        shutdownExecutors();
+    }
+
+    public void shutdownExecutors() {
+        if (!org.yatopiamc.yatopia.server.YatopiaConfig.asyncEntities) return; // If config isn't enabled, just return because the threadpools are empty
+        entityTickPool.shutdown();
+        try {
+            entityTickPool.awaitTermination(9999999, TimeUnit.DAYS);
+        } catch (InterruptedException ignored) {
+        }
+    }
+
+}
