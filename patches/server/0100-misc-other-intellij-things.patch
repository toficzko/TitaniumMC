From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Simon Gardling <titaniumtown@gmail.com>
Date: Fri, 19 Mar 2021 10:10:58 +0000
Subject: [PATCH] misc other intellij things


diff --git a/src/main/java/net/minecraft/server/BehaviorMakeLove.java b/src/main/java/net/minecraft/server/BehaviorMakeLove.java
index 2c8f3c9eaecec5df251f7cc06543a97a96deb675..aafbee50bf6aec4ff6f0a40fdb44b9dda04b6652 100644
--- a/src/main/java/net/minecraft/server/BehaviorMakeLove.java
+++ b/src/main/java/net/minecraft/server/BehaviorMakeLove.java
@@ -50,7 +50,7 @@ public class BehaviorMakeLove extends Behavior<EntityVillager> {
     private void a(WorldServer worldserver, EntityVillager entityvillager, EntityVillager entityvillager1) {
         Optional<BlockPosition> optional = this.b(worldserver, entityvillager);
 
-        if (!optional.isPresent()) {
+        if (optional.isEmpty()) {
             worldserver.broadcastEntityEffect(entityvillager1, (byte) 13);
             worldserver.broadcastEntityEffect(entityvillager, (byte) 13);
         } else {
diff --git a/src/main/java/net/minecraft/server/BehaviorSleep.java b/src/main/java/net/minecraft/server/BehaviorSleep.java
index aadc27ddebbcc00d19d3d87593f130cf309e10ef..fc35c066034e09df931044ed742f669419bce9d3 100644
--- a/src/main/java/net/minecraft/server/BehaviorSleep.java
+++ b/src/main/java/net/minecraft/server/BehaviorSleep.java
@@ -44,7 +44,7 @@ public class BehaviorSleep extends Behavior<EntityLiving> {
     protected boolean b(WorldServer worldserver, EntityLiving entityliving, long i) {
         Optional<GlobalPos> optional = entityliving.getBehaviorController().getMemory(MemoryModuleType.HOME);
 
-        if (!optional.isPresent()) {
+        if (optional.isEmpty()) {
             return false;
         } else {
             BlockPosition blockposition = ((GlobalPos) optional.get()).getBlockPosition();
diff --git a/src/main/java/net/minecraft/server/BehaviorUtil.java b/src/main/java/net/minecraft/server/BehaviorUtil.java
index c5d4488db06045ec0504271c20e504b0a73710ce..12dbb3f3ad8c1908d4210742f93a55e8d647f6f3 100644
--- a/src/main/java/net/minecraft/server/BehaviorUtil.java
+++ b/src/main/java/net/minecraft/server/BehaviorUtil.java
@@ -127,7 +127,7 @@ public class BehaviorUtil {
     public static boolean a(EntityLiving entityliving, EntityLiving entityliving1, double d0) {
         Optional<EntityLiving> optional = entityliving.getBehaviorController().getMemory(MemoryModuleType.ATTACK_TARGET);
 
-        if (!optional.isPresent()) {
+        if (optional.isEmpty()) {
             return false;
         } else {
             double d1 = entityliving.e(((EntityLiving) optional.get()).getPositionVector());
@@ -144,7 +144,7 @@ public class BehaviorUtil {
     }
 
     public static EntityLiving a(EntityLiving entityliving, Optional<EntityLiving> optional, EntityLiving entityliving1) {
-        return !optional.isPresent() ? entityliving1 : a(entityliving, (EntityLiving) optional.get(), entityliving1);
+        return optional.isEmpty() ? entityliving1 : a(entityliving, (EntityLiving) optional.get(), entityliving1);
     }
 
     public static EntityLiving a(EntityLiving entityliving, EntityLiving entityliving1, EntityLiving entityliving2) {
diff --git a/src/main/java/net/minecraft/server/BlockRespawnAnchor.java b/src/main/java/net/minecraft/server/BlockRespawnAnchor.java
index 521d161a3d015b641b61de21401c79ac20eb73a7..60dfbf623cfb87ece1aeeceaf365b89cd17010c8 100644
--- a/src/main/java/net/minecraft/server/BlockRespawnAnchor.java
+++ b/src/main/java/net/minecraft/server/BlockRespawnAnchor.java
@@ -117,7 +117,7 @@ public class BlockRespawnAnchor extends Block {
     }
 
     public static int a(IBlockData iblockdata, int i) {
-        return MathHelper.d((float) ((Integer) iblockdata.get(BlockRespawnAnchor.a) - 0) / 4.0F * (float) i);
+        return MathHelper.d((float) ((Integer) iblockdata.get(BlockRespawnAnchor.a)) / 4.0F * (float) i);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/DataBits.java b/src/main/java/net/minecraft/server/DataBits.java
index 08cab23aeb38925b1157ae1d0ab42b5b7bd14e2d..89569deb0ca08beb71cb141145aa147db8474788 100644
--- a/src/main/java/net/minecraft/server/DataBits.java
+++ b/src/main/java/net/minecraft/server/DataBits.java
@@ -28,7 +28,7 @@ public class DataBits {
         this.f = (char) (64 / i);
         int k = 3 * (this.f - 1);
 
-        this.g = DataBits.a[k + 0]; this.g_unsigned = Integer.toUnsignedLong(this.g); // Paper
+        this.g = DataBits.a[k]; this.g_unsigned = Integer.toUnsignedLong(this.g); // Paper
         this.h = DataBits.a[k + 1]; this.h_unsigned = Integer.toUnsignedLong(this.h); // Paper
         this.i = DataBits.a[k + 2];
         int l = (j + this.f - 1) / this.f;
diff --git a/src/main/java/net/minecraft/server/DataConverterFlatten.java b/src/main/java/net/minecraft/server/DataConverterFlatten.java
index f80935cbb8d4001959f5e006c16ae6f4c087b169..c4797ee2012abecbf754289110e1c0c4e70b4f70 100644
--- a/src/main/java/net/minecraft/server/DataConverterFlatten.java
+++ b/src/main/java/net/minecraft/server/DataConverterFlatten.java
@@ -359,7 +359,7 @@ public class DataConverterFlatten extends DataFix {
         return this.fixTypeEverywhereTyped("ItemInstanceTheFlatteningFix", type, (typed) -> {
             Optional<Pair<String, String>> optional = typed.getOptional(opticfinder);
 
-            if (!optional.isPresent()) {
+            if (optional.isEmpty()) {
                 return typed;
             } else {
                 Typed<?> typed1 = typed;
diff --git a/src/main/java/net/minecraft/server/DragonControllerStrafe.java b/src/main/java/net/minecraft/server/DragonControllerStrafe.java
index 48afea81d81ee3272389f88e2115ef8c851f81f0..da066583e6e20ad0836e95a80ea3512ef0f6dddb 100644
--- a/src/main/java/net/minecraft/server/DragonControllerStrafe.java
+++ b/src/main/java/net/minecraft/server/DragonControllerStrafe.java
@@ -57,9 +57,9 @@ public class DragonControllerStrafe extends AbstractDragonController {
                     if (this.c >= 5 && f1 >= 0.0F && f1 < 10.0F) {
                         d2 = 1.0D;
                         Vec3D vec3d2 = this.a.f(1.0F);
-                        double d6 = this.a.bo.locX() - vec3d2.x * 1.0D;
+                        double d6 = this.a.bo.locX() - vec3d2.x;
                         double d7 = this.a.bo.e(0.5D) + 0.5D;
-                        double d8 = this.a.bo.locZ() - vec3d2.z * 1.0D;
+                        double d8 = this.a.bo.locZ() - vec3d2.z;
                         double d9 = this.f.locX() - d6;
                         double d10 = this.f.e(0.5D) - d7;
                         double d11 = this.f.locZ() - d8;
diff --git a/src/main/java/net/minecraft/server/EnchantmentManager.java b/src/main/java/net/minecraft/server/EnchantmentManager.java
index 8c8c945f6e19a86ae405b9a731e0c94fc8078bd5..8e3c161ecbbfd8a48d83f992e88e32c0d2361b5a 100644
--- a/src/main/java/net/minecraft/server/EnchantmentManager.java
+++ b/src/main/java/net/minecraft/server/EnchantmentManager.java
@@ -366,13 +366,8 @@ public class EnchantmentManager {
     }
 
     public static void a(List<WeightedRandomEnchant> list, WeightedRandomEnchant weightedrandomenchant) {
-        Iterator iterator = list.iterator();
 
-        while (iterator.hasNext()) {
-            if (!weightedrandomenchant.enchantment.isCompatible(((WeightedRandomEnchant) iterator.next()).enchantment)) {
-                iterator.remove();
-            }
-        }
+        list.removeIf(o -> !weightedrandomenchant.enchantment.isCompatible(((WeightedRandomEnchant) o).enchantment));
 
     }
 
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index b86154c1052801f7686af5f4834548cbba594299..aa3e0b435009e99310a06657f2f6b53dea90e280 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -3571,7 +3571,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
 
                 Vec3D vec3d2 = this.getMot();
 
-                vec3d = vec3d.a(d0 * 1.0D);
+                vec3d = vec3d.a(d0);
                 double d3 = 0.003D;
 
                 if (Math.abs(vec3d2.x) < 0.003D && Math.abs(vec3d2.z) < 0.003D && vec3d.f() < 0.0045000000000000005D) {
diff --git a/src/main/java/net/minecraft/server/EntityArrow.java b/src/main/java/net/minecraft/server/EntityArrow.java
index ad4bf72acda4d82ebbff4c2a82402e284a55ad86..f37f950b0f8906e509cf875c3b2ad48aeab33a2a 100644
--- a/src/main/java/net/minecraft/server/EntityArrow.java
+++ b/src/main/java/net/minecraft/server/EntityArrow.java
@@ -2,10 +2,8 @@ package net.minecraft.server;
 
 import com.google.common.collect.Lists;
 import it.unimi.dsi.fastutil.ints.IntOpenHashSet;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.List;
+
+import java.util.*;
 import javax.annotation.Nullable;
 
 // CraftBukkit start
@@ -379,7 +377,7 @@ public abstract class EntityArrow extends IProjectile {
                     if (this.am != null && this.isShotFromCrossbow()) {
                         CriterionTriggers.G.a(entityplayer, (Collection) this.am);
                     } else if (!entity.isAlive() && this.isShotFromCrossbow()) {
-                        CriterionTriggers.G.a(entityplayer, (Collection) Arrays.asList(entity));
+                        CriterionTriggers.G.a(entityplayer, (Collection) Collections.singletonList(entity));
                     }
                 }
             }
diff --git a/src/main/java/net/minecraft/server/EntityEvoker.java b/src/main/java/net/minecraft/server/EntityEvoker.java
index 6ff0f40ff30f5132c98e12f5c2e5a4b92064d639..5035c7e243b45520a9a6074a9ee0ff4716395416 100644
--- a/src/main/java/net/minecraft/server/EntityEvoker.java
+++ b/src/main/java/net/minecraft/server/EntityEvoker.java
@@ -295,7 +295,7 @@ public class EntityEvoker extends EntityIllagerWizard {
             } else {
                 for (i = 0; i < 16; ++i) {
                     double d2 = 1.25D * (double) (i + 1);
-                    int j = 1 * i;
+                    int j = i;
 
                     this.a(EntityEvoker.this.locX() + (double) MathHelper.cos(f) * d2, EntityEvoker.this.locZ() + (double) MathHelper.sin(f) * d2, d0, d1, f, j);
                 }
diff --git a/src/main/java/net/minecraft/server/EntityMushroomCow.java b/src/main/java/net/minecraft/server/EntityMushroomCow.java
index fcc35cca3a6c318ecff98f477f9e9554885cff61..69290a70aa9a19768d8a9899a72ab733c5af1abe 100644
--- a/src/main/java/net/minecraft/server/EntityMushroomCow.java
+++ b/src/main/java/net/minecraft/server/EntityMushroomCow.java
@@ -123,7 +123,7 @@ public class EntityMushroomCow extends EntityCow implements IShearable {
             } else {
                 Optional<Pair<MobEffectList, Integer>> optional = this.l(itemstack);
 
-                if (!optional.isPresent()) {
+                if (optional.isEmpty()) {
                     return tryRide(entityhuman, enumhand); // Purpur
                 }
 
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 7bdcb3d23174b764e0a097bb65c96f707d332a6b..381e40a699b852ad98c56d18599b39d7ba68cda1 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -863,9 +863,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         }
         // SPIGOT-5071: manually add player loot tables (SPIGOT-5195 - ignores keepInventory rule)
         this.a(damagesource, this.lastDamageByPlayerTime > 0);
-        for (org.bukkit.inventory.ItemStack item : this.drops) {
-            loot.add(item);
-        }
+        loot.addAll(this.drops);
         this.drops.clear(); // SPIGOT-5188: make sure to clear
 
         IChatBaseComponent defaultMessage = this.getCombatTracker().getDeathMessage();
@@ -1246,7 +1244,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             EnumDirection.EnumAxis enumdirection_enumaxis = (EnumDirection.EnumAxis) this.world.getType(this.ac).d(BlockPortal.AXIS).orElse(EnumDirection.EnumAxis.X);
             Optional<BlockUtil.Rectangle> optional1 = worldserver.getTravelAgent().createPortal(blockposition, enumdirection_enumaxis, this, createRadius); // CraftBukkit
 
-            if (!optional1.isPresent()) {
+            if (optional1.isEmpty()) {
                 // EntityPlayer.LOGGER.error("Unable to create a portal, likely target out of worldborder"); // CraftBukkit
             }
 
diff --git a/src/main/java/net/minecraft/server/EntityRaider.java b/src/main/java/net/minecraft/server/EntityRaider.java
index 0d47ad4211f2e654ae69d6ee3cde9a0aa1aaa833..fd21575bcd166741fa1636b5f77f130e2e3bb23e 100644
--- a/src/main/java/net/minecraft/server/EntityRaider.java
+++ b/src/main/java/net/minecraft/server/EntityRaider.java
@@ -297,7 +297,7 @@ public abstract class EntityRaider extends EntityMonsterPatrolling {
                 return villageplacetype == VillagePlaceType.r;
             }, this::a, VillagePlace.Occupancy.ANY, blockposition, 48, this.a.random);
 
-            if (!optional.isPresent()) {
+            if (optional.isEmpty()) {
                 return false;
             } else {
                 this.c = ((BlockPosition) optional.get()).immutableCopy();
diff --git a/src/main/java/net/minecraft/server/IChatBaseComponent.java b/src/main/java/net/minecraft/server/IChatBaseComponent.java
index af3ab25d1983c69bff53c8dbca3e840ffb20cee9..6c9f0c11afa4313491a7467c14f751ee5890abd1 100644
--- a/src/main/java/net/minecraft/server/IChatBaseComponent.java
+++ b/src/main/java/net/minecraft/server/IChatBaseComponent.java
@@ -92,7 +92,7 @@ public interface IChatBaseComponent extends Message, IChatFormatted, Iterable<IC
                 IChatBaseComponent ichatbasecomponent = (IChatBaseComponent) iterator.next();
 
                 optional1 = ichatbasecomponent.a(ichatformatted_a);
-            } while (!optional1.isPresent());
+            } while (optional1.isEmpty());
 
             return optional1;
         }
diff --git a/src/main/java/net/minecraft/server/JsonList.java b/src/main/java/net/minecraft/server/JsonList.java
index e75dab3b7f23c0636bf27c2df2918cf02300f82b..e61d8015c7b7b5b59fec5a07341b1b5e662f1d84 100644
--- a/src/main/java/net/minecraft/server/JsonList.java
+++ b/src/main/java/net/minecraft/server/JsonList.java
@@ -125,7 +125,7 @@ public abstract class JsonList<K, V extends JsonListEntry<K>> {
     // Yatopia end
 
     public String[] getEntries() {
-        return (String[]) this.d.keySet().toArray(new String[this.d.size()]);
+        return (String[]) this.d.keySet().toArray(new String[0]);
     }
 
     // CraftBukkit start
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 158388b057e5843e7a5dbe2a616757923e16b07e..56c486e5f41ddcb348dcab71fc39a0b2b500de77 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1311,7 +1311,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
                 agameprofile[k] = ((EntityPlayer) this.playerList.getPlayers().get(j + k)).getProfile();
             }
 
-            Collections.shuffle(Arrays.asList(agameprofile));
+            Collections.shuffle(Collections.singletonList(agameprofile));
             this.serverPing.b().a(agameprofile);
         }
 
diff --git a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
index 794f1a7fbc1ed4380ae22245e4c2b021466cdb6b..3ca0f40bb683db746501a8d46baeb756a227cb6e 100644
--- a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
+++ b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
@@ -95,7 +95,7 @@ public abstract class MobSpawnerAbstract {
                     NBTTagCompound nbttagcompound = this.spawnData.getEntity();
                     Optional<EntityTypes<?>> optional = EntityTypes.a(nbttagcompound);
 
-                    if (!optional.isPresent()) {
+                    if (optional.isEmpty()) {
                         this.i();
                         return;
                     }
diff --git a/src/main/java/net/minecraft/server/NameReferencingFileConverter.java b/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
index b7d16805f7ada2aabe449133e9692bfad1c29d55..493443a3b63ce34a8ae040b2baa7b6c160ca5a0b 100644
--- a/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
+++ b/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
@@ -315,7 +315,7 @@ public class NameReferencingFileConverter {
             }
 
             try {
-                final String[] astring = (String[]) list.toArray(new String[list.size()]);
+                final String[] astring = (String[]) list.toArray(new String[0]);
                 ProfileLookupCallback profilelookupcallback = new ProfileLookupCallback() {
                     public void onProfileLookupSucceeded(GameProfile gameprofile) {
                         dedicatedserver.getUserCache().a(gameprofile);
diff --git a/src/main/java/net/minecraft/server/PiglinAI.java b/src/main/java/net/minecraft/server/PiglinAI.java
index 2fa2ad5c7eeb166b32710398cf00e3ab106451dc..04a22a0955379675988cf458ce854462abeac76d 100644
--- a/src/main/java/net/minecraft/server/PiglinAI.java
+++ b/src/main/java/net/minecraft/server/PiglinAI.java
@@ -549,7 +549,7 @@ public class PiglinAI {
         Optional<EntityLiving> optional = f(entitypiglinabstract);
         EntityLiving entityliving1 = BehaviorUtil.a((EntityLiving) entitypiglinabstract, optional, entityliving);
 
-        if (!optional.isPresent() || optional.get() != entityliving1) {
+        if (optional.isEmpty() || optional.get() != entityliving1) {
             c(entitypiglinabstract, entityliving1);
         }
     }
diff --git a/src/main/java/net/minecraft/server/PlayerChunk.java b/src/main/java/net/minecraft/server/PlayerChunk.java
index 31973f446886f102c1ffe4e33b92ab5816339d9e..de2d752a443231086a5b60b17c581e3878f6f61e 100644
--- a/src/main/java/net/minecraft/server/PlayerChunk.java
+++ b/src/main/java/net/minecraft/server/PlayerChunk.java
@@ -281,7 +281,7 @@ public class PlayerChunk {
         for (ChunkStatus curr = ChunkStatus.FULL, next = curr.getPreviousStatus(); curr != next; curr = next, next = next.getPreviousStatus()) {
             CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> future = this.getStatusFutureUnchecked(curr);
             Either<IChunkAccess, PlayerChunk.Failure> either = future.getNow(null);
-            if (either == null || !either.left().isPresent()) {
+            if (either == null || either.left().isEmpty()) {
                 continue;
             }
             return either.left().get();
@@ -293,7 +293,7 @@ public class PlayerChunk {
         for (ChunkStatus curr = ChunkStatus.FULL, next = curr.getPreviousStatus(); curr != next; curr = next, next = next.getPreviousStatus()) {
             CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> future = this.getStatusFutureUnchecked(curr);
             Either<IChunkAccess, PlayerChunk.Failure> either = future.getNow(null);
-            if (either == null || !either.left().isPresent()) {
+            if (either == null || either.left().isEmpty()) {
                 continue;
             }
             return curr;
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index 2c05e49cca318ce897c3cccdf1f15353a14433f6..550eb30c87809b2f7e40258e76ed4e0783af75f4 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -815,7 +815,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                 final Either<IChunkAccess, PlayerChunk.Failure> either = (Either) iterator.next();
                 Optional<IChunkAccess> optional = either.left();
 
-                if (!optional.isPresent()) {
+                if (optional.isEmpty()) {
                     return Either.right(new PlayerChunk.Failure() {
                         public String toString() {
                             return "Unloaded " + new ChunkCoordIntPair(j + l1 % (i * 2 + 1), k + l1 / (i * 2 + 1)) + " " + ((PlayerChunk.Failure) either.right().get()).toString();
@@ -1210,7 +1210,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
             return completablefuture.thenComposeAsync((either) -> {
                 Optional<IChunkAccess> optional = either.left();
 
-                if (!optional.isPresent()) {
+                if (optional.isEmpty()) {
                     return CompletableFuture.completedFuture(either);
                 } else {
                     if (chunkstatus == ChunkStatus.LIGHT) {
diff --git a/src/main/java/net/minecraft/server/PlayerConnectionUtils.java b/src/main/java/net/minecraft/server/PlayerConnectionUtils.java
index eb7e229ba4a2e4701a5a7a599f5e18da403a638b..978be8fb96a6a9127b15581346fd5f3357414d8b 100644
--- a/src/main/java/net/minecraft/server/PlayerConnectionUtils.java
+++ b/src/main/java/net/minecraft/server/PlayerConnectionUtils.java
@@ -23,9 +23,7 @@ public class PlayerConnectionUtils {
 
     public static java.util.List<PacketListener> getCurrentPacketProcessors() {
         java.util.List<PacketListener> ret = new java.util.ArrayList<>(4);
-        for (PacketListener listener : packetProcessing) {
-            ret.add(listener);
-        }
+        ret.addAll(packetProcessing);
 
         return ret;
     }
diff --git a/src/main/java/net/minecraft/server/RecipeBookServer.java b/src/main/java/net/minecraft/server/RecipeBookServer.java
index 32c0de517314237417e94bccc49f1bd706bd87aa..c73263e68d986afd7db8e0e9c02134e1417ea6d7 100644
--- a/src/main/java/net/minecraft/server/RecipeBookServer.java
+++ b/src/main/java/net/minecraft/server/RecipeBookServer.java
@@ -108,7 +108,7 @@ public class RecipeBookServer extends RecipeBook {
                 MinecraftKey minecraftkey = new MinecraftKey(s);
                 Optional<? extends IRecipe<?>> optional = craftingmanager.getRecipe(minecraftkey);
 
-                if (!optional.isPresent()) {
+                if (optional.isEmpty()) {
                     RecipeBookServer.LOGGER.error("Tried to load unrecognized recipe: {} removed now.", minecraftkey);
                 } else {
                     consumer.accept(optional.get());
diff --git a/src/main/java/net/minecraft/server/RegistryMaterials.java b/src/main/java/net/minecraft/server/RegistryMaterials.java
index b9de548c9049fca7a24b5259b6c9a01fca0f16ae..3c409056ca1b015b2fe941d9d6f746f3476e420a 100644
--- a/src/main/java/net/minecraft/server/RegistryMaterials.java
+++ b/src/main/java/net/minecraft/server/RegistryMaterials.java
@@ -189,7 +189,7 @@ public class RegistryMaterials<T> extends IRegistryWritable<T> {
                 return null;
             }
 
-            this.b = collection.toArray(new Object[collection.size()]);
+            this.b = collection.toArray(new Object[0]);
         }
 
         return (T) SystemUtils.a(this.b, random);  // Paper - Decompile fix
diff --git a/src/main/java/net/minecraft/server/ScoreboardServer.java b/src/main/java/net/minecraft/server/ScoreboardServer.java
index 44acc2c57037f67e7b62915668b2760e5a00aadf..b5e908549f0b7aabb3ad6668a631416525e39029 100644
--- a/src/main/java/net/minecraft/server/ScoreboardServer.java
+++ b/src/main/java/net/minecraft/server/ScoreboardServer.java
@@ -2,10 +2,8 @@ package net.minecraft.server;
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
-import java.util.Arrays;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Set;
+
+import java.util.*;
 import javax.annotation.Nullable;
 
 public class ScoreboardServer extends Scoreboard {
@@ -72,7 +70,7 @@ public class ScoreboardServer extends Scoreboard {
     @Override
     public boolean addPlayerToTeam(String s, ScoreboardTeam scoreboardteam) {
         if (super.addPlayerToTeam(s, scoreboardteam)) {
-            this.sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, Arrays.asList(s), 3));
+            this.sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, Collections.singletonList(s), 3));
             this.b();
             return true;
         } else {
@@ -83,7 +81,7 @@ public class ScoreboardServer extends Scoreboard {
     @Override
     public void removePlayerFromTeam(String s, ScoreboardTeam scoreboardteam) {
         super.removePlayerFromTeam(s, scoreboardteam);
-        this.sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, Arrays.asList(s), 4));
+        this.sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, Collections.singletonList(s), 4));
         this.b();
     }
 
diff --git a/src/main/java/net/minecraft/server/TileEntityLectern.java b/src/main/java/net/minecraft/server/TileEntityLectern.java
index 45928f11a9673d018a6b60d0871627b2aca47950..5b522efd9eb113000bb708e9c9986f155911b4b2 100644
--- a/src/main/java/net/minecraft/server/TileEntityLectern.java
+++ b/src/main/java/net/minecraft/server/TileEntityLectern.java
@@ -3,10 +3,8 @@ package net.minecraft.server;
 import javax.annotation.Nullable;
 
 // CraftBukkit start
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import java.util.UUID;
+import java.util.*;
+
 import org.bukkit.Location;
 import org.bukkit.block.Lectern;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
@@ -30,7 +28,7 @@ public class TileEntityLectern extends TileEntity implements Clearable, ITileInv
 
         @Override
         public List<ItemStack> getContents() {
-            return Arrays.asList(book);
+            return Collections.singletonList(book);
         }
 
         @Override
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index d2c398f248ae9d78286a1d3914c0d40594dc6fbe..2fd7216056348275f1386503e602c084495a2a35 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -2637,7 +2637,7 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
         BlockPosition blockposition1 = blockposition.immutableCopy();
         // Yatopia start - reduce scheduling overhead
             chunkProvider.poiQueue.add(() -> {
-                if (!optional.isPresent() && this.getPoiStorage().test(blockposition1, com.google.common.base.Predicates.alwaysTrue())) {
+                if (optional.isEmpty() && this.getPoiStorage().test(blockposition1, com.google.common.base.Predicates.alwaysTrue())) {
                     this.getPoiStorage().remove(blockposition1);
                 }
         if (!Objects.equals(optional, optional1)) {
