From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Simon Gardling <titaniumtown@gmail.com>
Date: Fri, 19 Mar 2021 10:04:39 +0000
Subject: [PATCH] use enhanced for loops


diff --git a/src/main/java/net/minecraft/server/Advancement.java b/src/main/java/net/minecraft/server/Advancement.java
index 486034a826b67c71dc7d07852013dc07fefadb0f..09e32e45513fdfbe3abd5c546726f42759d4215b 100644
--- a/src/main/java/net/minecraft/server/Advancement.java
+++ b/src/main/java/net/minecraft/server/Advancement.java
@@ -250,10 +250,9 @@ public class Advancement {
 
             jsonobject.add("rewards", this.d.b());
             JsonObject jsonobject1 = new JsonObject();
-            Iterator iterator = this.e.entrySet().iterator();
 
-            while (iterator.hasNext()) {
-                Entry<String, Criterion> entry = (Entry) iterator.next();
+            for (Entry<String, Criterion> stringCriterionEntry : this.e.entrySet()) {
+                Entry<String, Criterion> entry = (Entry) stringCriterionEntry;
 
                 jsonobject1.add((String) entry.getKey(), ((Criterion) entry.getValue()).b());
             }
@@ -263,8 +262,7 @@ public class Advancement {
             String[][] astring = this.f;
             int i = astring.length;
 
-            for (int j = 0; j < i; ++j) {
-                String[] astring1 = astring[j];
+            for (String[] astring1 : astring) {
                 JsonArray jsonarray1 = new JsonArray();
                 String[] astring2 = astring1;
                 int k = astring1.length;
@@ -302,9 +300,7 @@ public class Advancement {
             String[][] astring = this.f;
             int i = astring.length;
 
-            for (int j = 0; j < i; ++j) {
-                String[] astring1 = astring[j];
-
+            for (String[] astring1 : astring) {
                 packetdataserializer.d(astring1.length);
                 String[] astring2 = astring1;
                 int k = astring1.length;
@@ -383,10 +379,7 @@ public class Advancement {
                     }
                 }
 
-                Iterator iterator1 = map.keySet().iterator();
-
-                while (iterator1.hasNext()) {
-                    String s2 = (String) iterator1.next();
+                for (String s2 : map.keySet()) {
                     boolean flag = false;
                     String[][] astring4 = astring;
                     int j1 = astring.length;
diff --git a/src/main/java/net/minecraft/server/AdvancementDataPlayer.java b/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
index 96069438ad3f4b00e2996247c222153228cbc2e1..a66bde6254c6f9081f138f2d8f7d422518225276 100644
--- a/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
+++ b/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
@@ -91,11 +91,8 @@ public class AdvancementDataPlayer {
     }
 
     private void b(AdvancementDataWorld advancementdataworld) {
-        Iterator iterator = advancementdataworld.getAdvancements().iterator();
-
-        while (iterator.hasNext()) {
-            Advancement advancement = (Advancement) iterator.next();
 
+        for (Advancement advancement : advancementdataworld.getAdvancements()) {
             this.c(advancement);
         }
 
@@ -125,11 +122,8 @@ public class AdvancementDataPlayer {
     }
 
     private void c(AdvancementDataWorld advancementdataworld) {
-        Iterator iterator = advancementdataworld.getAdvancements().iterator();
-
-        while (iterator.hasNext()) {
-            Advancement advancement = (Advancement) iterator.next();
 
+        for (Advancement advancement : advancementdataworld.getAdvancements()) {
             if (advancement.getCriteria().isEmpty()) {
                 this.grantCriteria(advancement, "");
                 advancement.d().a(this.player);
@@ -241,10 +235,9 @@ public class AdvancementDataPlayer {
     public void b() {
         if (org.spigotmc.SpigotConfig.disableAdvancementSaving) return; // Spigot
         Map<MinecraftKey, AdvancementProgress> map = Maps.newHashMap();
-        Iterator iterator = this.data.entrySet().iterator();
 
-        while (iterator.hasNext()) {
-            Entry<Advancement, AdvancementProgress> entry = (Entry) iterator.next();
+        for (Entry<Advancement, AdvancementProgress> advancementAdvancementProgressEntry : this.data.entrySet()) {
+            Entry<Advancement, AdvancementProgress> entry = (Entry) advancementAdvancementProgressEntry;
             AdvancementProgress advancementprogress = (AdvancementProgress) entry.getValue();
 
             if (advancementprogress.b()) {
@@ -367,34 +360,32 @@ public class AdvancementDataPlayer {
         }
     }
     private void beginTrackingNoIsDone(Advancement advancement, AdvancementProgress advancementprogress) {
-            Iterator iterator = advancement.getCriteria().entrySet().iterator();
 
-            while (iterator.hasNext()) {
-                Entry<String, Criterion> entry = (Entry) iterator.next();
-                CriterionProgress criterionprogress = advancementprogress.getCriterionProgress((String) entry.getKey());
+        for (Entry<String, Criterion> stringCriterionEntry : advancement.getCriteria().entrySet()) {
+            Entry<String, Criterion> entry = (Entry) stringCriterionEntry;
+            CriterionProgress criterionprogress = advancementprogress.getCriterionProgress((String) entry.getKey());
 
-                if (criterionprogress != null && !criterionprogress.a()) {
-                    CriterionInstance criterioninstance = ((Criterion) entry.getValue()).a();
+            if (criterionprogress != null && !criterionprogress.a()) {
+                CriterionInstance criterioninstance = ((Criterion) entry.getValue()).a();
 
-                    if (criterioninstance != null) {
-                        CriterionTrigger<CriterionInstance> criteriontrigger = CriterionTriggers.a(criterioninstance.a());
+                if (criterioninstance != null) {
+                    CriterionTrigger<CriterionInstance> criteriontrigger = CriterionTriggers.a(criterioninstance.a());
 
-                        if (criteriontrigger != null) {
-                            criteriontrigger.a(this, new CriterionTrigger.a<>(criterioninstance, advancement, (String) entry.getKey()));
-                        }
+                    if (criteriontrigger != null) {
+                        criteriontrigger.a(this, new CriterionTrigger.a<>(criterioninstance, advancement, (String) entry.getKey()));
                     }
                 }
             }
+        }
 
         //} // Yatopia end
     }
 
     private void d(Advancement advancement) {
         AdvancementProgress advancementprogress = this.getProgress(advancement);
-        Iterator iterator = advancement.getCriteria().entrySet().iterator();
 
-        while (iterator.hasNext()) {
-            Entry<String, Criterion> entry = (Entry) iterator.next();
+        for (Entry<String, Criterion> stringCriterionEntry : advancement.getCriteria().entrySet()) {
+            Entry<String, Criterion> entry = (Entry) stringCriterionEntry;
             CriterionProgress criterionprogress = advancementprogress.getCriterionProgress((String) entry.getKey());
 
             if (criterionprogress != null && (criterionprogress.a() || advancementprogress.isDone())) {
@@ -519,11 +510,7 @@ public class AdvancementDataPlayer {
             return;
         } // Paper end
 
-        Iterator iterator = advancement.e().iterator();
-
-        while (iterator.hasNext()) {
-            Advancement advancement1 = (Advancement) iterator.next();
-
+        for (Advancement advancement1 : advancement.e()) {
             this.e(advancement1, IterationEntryPoint.ITERATOR); // Paper - Mark this call as being from iteration
         }
 
diff --git a/src/main/java/net/minecraft/server/AdvancementDataWorld.java b/src/main/java/net/minecraft/server/AdvancementDataWorld.java
index a46750b525184c77d37961f6dba7de8f4104eb63..1bcc99fb54123231bc33b7d912788e87971b5f98 100644
--- a/src/main/java/net/minecraft/server/AdvancementDataWorld.java
+++ b/src/main/java/net/minecraft/server/AdvancementDataWorld.java
@@ -48,11 +48,8 @@ public class AdvancementDataWorld extends ResourceDataJson {
         Advancements advancements = new Advancements();
 
         advancements.a((Map) map1);
-        Iterator iterator = advancements.b().iterator();
-
-        while (iterator.hasNext()) {
-            Advancement advancement = (Advancement) iterator.next();
 
+        for (Advancement advancement : advancements.b()) {
             if (advancement.c() != null) {
                 AdvancementTree.a(advancement);
             }
diff --git a/src/main/java/net/minecraft/server/AdvancementFrameType.java b/src/main/java/net/minecraft/server/AdvancementFrameType.java
index 9a3a53cf3576c299629a84ba76cb5b9b86a14491..f62cae240314e1a739fc3a590e750eda914a5c8d 100644
--- a/src/main/java/net/minecraft/server/AdvancementFrameType.java
+++ b/src/main/java/net/minecraft/server/AdvancementFrameType.java
@@ -35,9 +35,7 @@ public enum AdvancementFrameType {
         AdvancementFrameType[] aadvancementframetype = values();
         int i = aadvancementframetype.length;
 
-        for (int j = 0; j < i; ++j) {
-            AdvancementFrameType advancementframetype = aadvancementframetype[j];
-
+        for (AdvancementFrameType advancementframetype : aadvancementframetype) {
             if (advancementframetype.d.equals(s)) {
                 return advancementframetype;
             }
diff --git a/src/main/java/net/minecraft/server/ArgumentBlock.java b/src/main/java/net/minecraft/server/ArgumentBlock.java
index 892f99c8b9385e80381058ead72d4346b8a61fee..7fb0d5aa2d214908600ac7376133a5b084d92aba 100644
--- a/src/main/java/net/minecraft/server/ArgumentBlock.java
+++ b/src/main/java/net/minecraft/server/ArgumentBlock.java
@@ -125,10 +125,9 @@ public class ArgumentBlock {
 
     private CompletableFuture<Suggestions> d(SuggestionsBuilder suggestionsbuilder, Tags<Block> tags) {
         String s = suggestionsbuilder.getRemaining().toLowerCase(Locale.ROOT);
-        Iterator iterator = this.o.r().iterator();
 
-        while (iterator.hasNext()) {
-            IBlockState<?> iblockstate = (IBlockState) iterator.next();
+        for (IBlockState<?> iBlockState : this.o.r()) {
+            IBlockState<?> iblockstate = (IBlockState) iBlockState;
 
             if (!this.k.containsKey(iblockstate) && iblockstate.getName().startsWith(s)) {
                 suggestionsbuilder.suggest(iblockstate.getName() + '=');
@@ -218,11 +217,9 @@ public class ArgumentBlock {
     }
 
     private static <T extends Comparable<T>> SuggestionsBuilder a(SuggestionsBuilder suggestionsbuilder, IBlockState<T> iblockstate) {
-        Iterator iterator = iblockstate.getValues().iterator();
-
-        while (iterator.hasNext()) {
-            T t0 = (T) iterator.next(); // CraftBukkit - decompile error
 
+        // CraftBukkit - decompile error
+        for (T t0 : iblockstate.getValues()) {
             if (t0 instanceof Integer) {
                 suggestionsbuilder.suggest((Integer) t0);
             } else {
diff --git a/src/main/java/net/minecraft/server/AttributeMapBase.java b/src/main/java/net/minecraft/server/AttributeMapBase.java
index f5f2f31e88433d894ff1e7c2f26686f671744c56..32f8f14f778a7330a5deb6768ceb28b9def66aa0 100644
--- a/src/main/java/net/minecraft/server/AttributeMapBase.java
+++ b/src/main/java/net/minecraft/server/AttributeMapBase.java
@@ -101,11 +101,8 @@ public class AttributeMapBase {
 
     public NBTTagList c() {
         NBTTagList nbttaglist = new NBTTagList();
-        Iterator iterator = this.b.values().iterator();
-
-        while (iterator.hasNext()) {
-            AttributeModifiable attributemodifiable = (AttributeModifiable) iterator.next();
 
+        for (AttributeModifiable attributemodifiable : this.b.values()) {
             nbttaglist.add(attributemodifiable.g());
         }
 
diff --git a/src/main/java/net/minecraft/server/AutoRecipe.java b/src/main/java/net/minecraft/server/AutoRecipe.java
index 156ab966e8fb4d742b50a2f90420710b0c7b4764..b8fb290d07b2a715710b8a20a7224dac64e6cd52 100644
--- a/src/main/java/net/minecraft/server/AutoRecipe.java
+++ b/src/main/java/net/minecraft/server/AutoRecipe.java
@@ -193,11 +193,8 @@ public class AutoRecipe<C extends IInventory> implements AutoRecipeAbstract<Inte
                     int k = this.c.firstPartial(itemstack);
 
                     if (k == -1 && list.size() <= i) {
-                        Iterator iterator = list.iterator();
-
-                        while (iterator.hasNext()) {
-                            ItemStack itemstack1 = (ItemStack) iterator.next();
 
+                        for (ItemStack itemstack1 : list) {
                             if (itemstack1.doMaterialsMatch(itemstack) && itemstack1.getCount() != itemstack1.getMaxStackSize() && itemstack1.getCount() + itemstack.getCount() <= itemstack1.getMaxStackSize()) {
                                 itemstack1.add(itemstack.getCount());
                                 itemstack.setCount(0);
diff --git a/src/main/java/net/minecraft/server/BehaviorController.java b/src/main/java/net/minecraft/server/BehaviorController.java
index b623e0e81ecd40edde0fb3711b8f68a873962296..4ad771dc05b0dc39c69957cdf2f1299a14b854b8 100644
--- a/src/main/java/net/minecraft/server/BehaviorController.java
+++ b/src/main/java/net/minecraft/server/BehaviorController.java
@@ -233,18 +233,15 @@ public class BehaviorController<E extends EntityLiving> {
     @Deprecated
     public List<Behavior<? super E>> d() {
         List<Behavior<? super E>> list = new ObjectArrayList();
-        Iterator iterator = this.e.values().iterator();
 
-        while (iterator.hasNext()) {
-            Map<Activity, Set<Behavior<? super E>>> map = (Map) iterator.next();
-            Iterator iterator1 = map.values().iterator();
+        for (Map<Activity, Set<Behavior<? super E>>> activitySetMap : this.e.values()) {
+            Map<Activity, Set<Behavior<? super E>>> map = (Map) activitySetMap;
 
-            while (iterator1.hasNext()) {
-                Set<Behavior<? super E>> set = (Set) iterator1.next();
-                Iterator iterator2 = set.iterator();
+            for (Set<Behavior<? super E>> behaviors : map.values()) {
+                Set<Behavior<? super E>> set = (Set) behaviors;
 
-                while (iterator2.hasNext()) {
-                    Behavior<? super E> behavior = (Behavior) iterator2.next();
+                for (Behavior<? super E> value : set) {
+                    Behavior<? super E> behavior = (Behavior) value;
 
                     if (behavior.a() == Behavior.Status.RUNNING) {
                         list.add(behavior);
@@ -295,19 +292,15 @@ public class BehaviorController<E extends EntityLiving> {
     }
 
     private void e(Activity activity) {
-        Iterator iterator = this.j.iterator();
-
-        while (iterator.hasNext()) {
-            Activity activity1 = (Activity) iterator.next();
 
+        for (Activity activity1 : this.j) {
             if (activity1 != activity) {
                 Set<MemoryModuleType<?>> set = (Set) this.h.get(activity1);
 
                 if (set != null) {
-                    Iterator iterator1 = set.iterator();
 
-                    while (iterator1.hasNext()) {
-                        MemoryModuleType<?> memorymoduletype = (MemoryModuleType) iterator1.next();
+                    for (MemoryModuleType<?> memoryModuleType : set) {
+                        MemoryModuleType<?> memorymoduletype = (MemoryModuleType) memoryModuleType;
 
                         this.removeMemory(memorymoduletype);
                     }
@@ -330,11 +323,8 @@ public class BehaviorController<E extends EntityLiving> {
     }
 
     public void a(List<Activity> list) {
-        Iterator iterator = list.iterator();
-
-        while (iterator.hasNext()) {
-            Activity activity = (Activity) iterator.next();
 
+        for (Activity activity : list) {
             if (this.f(activity)) {
                 this.d(activity);
                 break;
@@ -392,10 +382,9 @@ public class BehaviorController<E extends EntityLiving> {
 
     public BehaviorController<E> h() {
         BehaviorController<E> behaviorcontroller = new BehaviorController<>(this.memories.keySet(), this.sensors.keySet(), ImmutableList.of(), this.b);
-        Iterator iterator = this.memories.entrySet().iterator();
 
-        while (iterator.hasNext()) {
-            Entry<MemoryModuleType<?>, Optional<? extends ExpirableMemory<?>>> entry = (Entry) iterator.next();
+        for (Entry<MemoryModuleType<?>, Optional<? extends ExpirableMemory<?>>> memoryModuleTypeOptionalEntry : this.memories.entrySet()) {
+            Entry<MemoryModuleType<?>, Optional<? extends ExpirableMemory<?>>> entry = (Entry) memoryModuleTypeOptionalEntry;
             MemoryModuleType<?> memorymoduletype = (MemoryModuleType) entry.getKey();
 
             if (((Optional) entry.getValue()).isPresent()) {
@@ -414,10 +403,9 @@ public class BehaviorController<E extends EntityLiving> {
     }
 
     private void c(WorldServer worldserver, E e0) {
-        Iterator iterator = this.sensors.values().iterator();
 
-        while (iterator.hasNext()) {
-            Sensor<? super E> sensor = (Sensor) iterator.next();
+        for (Sensor<? super E> value : this.sensors.values()) {
+            Sensor<? super E> sensor = (Sensor) value;
 
             sensor.b(worldserver, e0);
         }
@@ -425,10 +413,9 @@ public class BehaviorController<E extends EntityLiving> {
     }
 
     private void k() {
-        Iterator iterator = this.memories.entrySet().iterator();
 
-        while (iterator.hasNext()) {
-            Entry<MemoryModuleType<?>, Optional<? extends ExpirableMemory<?>>> entry = (Entry) iterator.next();
+        for (Entry<MemoryModuleType<?>, Optional<? extends ExpirableMemory<?>>> memoryModuleTypeOptionalEntry : this.memories.entrySet()) {
+            Entry<MemoryModuleType<?>, Optional<? extends ExpirableMemory<?>>> entry = (Entry) memoryModuleTypeOptionalEntry;
 
             if (((Optional) entry.getValue()).isPresent()) {
                 ExpirableMemory<?> expirablememory = (ExpirableMemory) ((Optional) entry.getValue()).get();
@@ -444,10 +431,9 @@ public class BehaviorController<E extends EntityLiving> {
 
     public void b(WorldServer worldserver, E e0) {
         long i = e0.world.getTime();
-        Iterator iterator = this.d().iterator();
 
-        while (iterator.hasNext()) {
-            Behavior<? super E> behavior = (Behavior) iterator.next();
+        for (Behavior<? super E> value : this.d()) {
+            Behavior<? super E> behavior = (Behavior) value;
 
             behavior.g(worldserver, e0, i);
         }
@@ -456,22 +442,19 @@ public class BehaviorController<E extends EntityLiving> {
 
     private void d(WorldServer worldserver, E e0) {
         long i = worldserver.getTime();
-        Iterator iterator = this.e.values().iterator();
 
-        while (iterator.hasNext()) {
-            Map<Activity, Set<Behavior<? super E>>> map = (Map) iterator.next();
-            Iterator iterator1 = map.entrySet().iterator();
+        for (Map<Activity, Set<Behavior<? super E>>> activitySetMap : this.e.values()) {
+            Map<Activity, Set<Behavior<? super E>>> map = (Map) activitySetMap;
 
-            while (iterator1.hasNext()) {
-                Entry<Activity, Set<Behavior<? super E>>> entry = (Entry) iterator1.next();
+            for (Entry<Activity, Set<Behavior<? super E>>> activitySetEntry : map.entrySet()) {
+                Entry<Activity, Set<Behavior<? super E>>> entry = (Entry) activitySetEntry;
                 Activity activity = (Activity) entry.getKey();
 
                 if (this.j.contains(activity)) {
                     Set<Behavior<? super E>> set = (Set) entry.getValue();
-                    Iterator iterator2 = set.iterator();
 
-                    while (iterator2.hasNext()) {
-                        Behavior<? super E> behavior = (Behavior) iterator2.next();
+                    for (Behavior<? super E> value : set) {
+                        Behavior<? super E> behavior = (Behavior) value;
 
                         if (behavior.a() == Behavior.Status.STOPPED) {
                             behavior.e(worldserver, e0, i);
@@ -485,10 +468,9 @@ public class BehaviorController<E extends EntityLiving> {
 
     private void e(WorldServer worldserver, E e0) {
         long i = worldserver.getTime();
-        Iterator iterator = this.d().iterator();
 
-        while (iterator.hasNext()) {
-            Behavior<? super E> behavior = (Behavior) iterator.next();
+        for (Behavior<? super E> value : this.d()) {
+            Behavior<? super E> behavior = (Behavior) value;
 
             behavior.f(worldserver, e0, i);
         }
diff --git a/src/main/java/net/minecraft/server/BehaviorFindPosition.java b/src/main/java/net/minecraft/server/BehaviorFindPosition.java
index 490a1d4d53a6180ac4c40f1f51d4704825c01ed7..71f63d8ef65473ad2eacd22152d67420b4b2892f 100644
--- a/src/main/java/net/minecraft/server/BehaviorFindPosition.java
+++ b/src/main/java/net/minecraft/server/BehaviorFindPosition.java
@@ -105,13 +105,10 @@ public class BehaviorFindPosition extends Behavior<EntityCreature> {
                 PacketDebug.c(worldserver, blockposition);
             });
         } else {
-            Iterator iterator = set.iterator();
-
-            while (iterator.hasNext()) {
-                BlockPosition blockposition1 = (BlockPosition) iterator.next();
 
+            for (BlockPosition blockposition1 : set) {
                 this.g.computeIfAbsent(blockposition1.asLong(), (j) -> {
-                    return new BehaviorFindPosition.a(java.util.concurrent.ThreadLocalRandom.current(), i); // Yatopia
+                    return new a(java.util.concurrent.ThreadLocalRandom.current(), i); // Yatopia
                 });
             }
         }
diff --git a/src/main/java/net/minecraft/server/BehaviorLookInteract.java b/src/main/java/net/minecraft/server/BehaviorLookInteract.java
index ce57e6a4acac97d6da82202094306e7e91f1c87e..ea049d10a667db88e857de98ec7440281ca2fd18 100644
--- a/src/main/java/net/minecraft/server/BehaviorLookInteract.java
+++ b/src/main/java/net/minecraft/server/BehaviorLookInteract.java
@@ -35,8 +35,8 @@ public class BehaviorLookInteract extends Behavior<EntityLiving> {
         }
 
         List<EntityLiving> list = this.b(entityliving);
-        for (int index = 0, len = list.size(); index < len; ++index) {
-            if (this.a(list.get(index))) {
+        for (EntityLiving entityLiving : list) {
+            if (this.a(entityLiving)) {
                 return true;
             }
         }
@@ -54,8 +54,7 @@ public class BehaviorLookInteract extends Behavior<EntityLiving> {
         List<EntityLiving> inLOS = behaviorcontroller.getMemory(MemoryModuleType.VISIBLE_MOBS).orElse(null);
         if (inLOS != null) {
             double maxRangeSquared = this.getMaxRange();
-            for (int index = 0, len = inLOS.size(); index < len; ++index) {
-                EntityLiving entity = inLOS.get(index);
+            for (EntityLiving entity : inLOS) {
                 if (!this.canTarget(entity)) {
                     continue;
                 }
diff --git a/src/main/java/net/minecraft/server/Block.java b/src/main/java/net/minecraft/server/Block.java
index d717c1856201bf7155b78507e86bc90c70c80762..a409fc1068fbe779052e3e3e67538ec53e674a68 100644
--- a/src/main/java/net/minecraft/server/Block.java
+++ b/src/main/java/net/minecraft/server/Block.java
@@ -93,10 +93,8 @@ public class Block extends BlockBase implements IMaterial {
     public static IBlockData a(IBlockData iblockdata, IBlockData iblockdata1, World world, BlockPosition blockposition) {
         VoxelShape voxelshape = VoxelShapes.b(iblockdata.getCollisionShape(world, blockposition), iblockdata1.getCollisionShape(world, blockposition), OperatorBoolean.ONLY_SECOND).a((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ());
         List<Entity> list = world.getEntities((Entity) null, voxelshape.getBoundingBox());
-        Iterator iterator = list.iterator();
 
-        while (iterator.hasNext()) {
-            Entity entity = (Entity) iterator.next();
+        for (Entity entity : list) {
             double d0 = VoxelShapes.a(EnumDirection.EnumAxis.Y, entity.getBoundingBox().d(0.0D, 1.0D, 0.0D), Stream.of(voxelshape), -1.0D);
 
             entity.enderTeleportTo(entity.locX(), entity.locY() + 1.0D + d0, entity.locZ());
@@ -124,9 +122,7 @@ public class Block extends BlockBase implements IMaterial {
         EnumDirection[] aenumdirection = Block.ar;
         int i = aenumdirection.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumDirection enumdirection = aenumdirection[j];
-
+        for (EnumDirection enumdirection : aenumdirection) {
             blockposition_mutableblockposition.a((BaseBlockPosition) blockposition, enumdirection);
             iblockdata1 = iblockdata1.updateState(enumdirection, generatoraccess.getType(blockposition_mutableblockposition), generatoraccess, blockposition, blockposition_mutableblockposition);
         }
diff --git a/src/main/java/net/minecraft/server/BlockBase.java b/src/main/java/net/minecraft/server/BlockBase.java
index 83008998a701c19f95bfc0199490cf594c659146..4f67173fda95be586de0fdcfc9571fa315a4110c 100644
--- a/src/main/java/net/minecraft/server/BlockBase.java
+++ b/src/main/java/net/minecraft/server/BlockBase.java
@@ -606,9 +606,7 @@ public abstract class BlockBase {
             EnumDirection[] aenumdirection = BlockBase.ar;
             int k = aenumdirection.length;
 
-            for (int l = 0; l < k; ++l) {
-                EnumDirection enumdirection = aenumdirection[l];
-
+            for (EnumDirection enumdirection : aenumdirection) {
                 blockposition_mutableblockposition.a((BaseBlockPosition) blockposition, enumdirection);
                 IBlockData iblockdata = generatoraccess.getTypeIfLoaded(blockposition_mutableblockposition); // EMC
                 if (iblockdata == null) continue; // EMC
@@ -798,9 +796,7 @@ public abstract class BlockBase {
                     EnumBlockSupport[] aenumblocksupport = EnumBlockSupport.values();
                     int l = aenumblocksupport.length;
 
-                    for (int i1 = 0; i1 < l; ++i1) {
-                        EnumBlockSupport enumblocksupport = aenumblocksupport[i1];
-
+                    for (EnumBlockSupport enumblocksupport : aenumblocksupport) {
                         this.j[b(enumdirection1, enumblocksupport)] = enumblocksupport.a(iblockdata, BlockAccessAir.INSTANCE, BlockPosition.ZERO, enumdirection1);
                     }
                 }
diff --git a/src/main/java/net/minecraft/server/BlockBeehive.java b/src/main/java/net/minecraft/server/BlockBeehive.java
index eda45e7f2f824c42653d6c545172efc7c96ef332..5c6acb008ae2d2fddec7b7d1da491b3f3334d984 100644
--- a/src/main/java/net/minecraft/server/BlockBeehive.java
+++ b/src/main/java/net/minecraft/server/BlockBeehive.java
@@ -51,11 +51,8 @@ public class BlockBeehive extends BlockTileEntity {
         if (!list.isEmpty()) {
             List<EntityHuman> list1 = world.a(EntityHuman.class, (new AxisAlignedBB(blockposition)).grow(8.0D, 6.0D, 8.0D));
             int i = list1.size();
-            Iterator iterator = list.iterator();
-
-            while (iterator.hasNext()) {
-                EntityBee entitybee = (EntityBee) iterator.next();
 
+            for (EntityBee entitybee : list) {
                 if (entitybee.getGoalTarget() == null) {
                     entitybee.setGoalTarget((EntityLiving) list1.get(world.random.nextInt(i)), org.bukkit.event.entity.EntityTargetEvent.TargetReason.CLOSEST_PLAYER, true); // CraftBukkit
                 }
diff --git a/src/main/java/net/minecraft/server/BlockChest.java b/src/main/java/net/minecraft/server/BlockChest.java
index 71a32a317e38b9c8f802fd5dd9ae546fb46eb020..735790598f39ec71b27fded3f0e7951dc025c67a 100644
--- a/src/main/java/net/minecraft/server/BlockChest.java
+++ b/src/main/java/net/minecraft/server/BlockChest.java
@@ -277,11 +277,8 @@ public class BlockChest extends BlockChestAbstract<TileEntityChest> implements I
         List<EntityCat> list = generatoraccess.a(EntityCat.class, new AxisAlignedBB((double) blockposition.getX(), (double) (blockposition.getY() + 1), (double) blockposition.getZ(), (double) (blockposition.getX() + 1), (double) (blockposition.getY() + 2), (double) (blockposition.getZ() + 1)));
 
         if (!list.isEmpty()) {
-            Iterator iterator = list.iterator();
-
-            while (iterator.hasNext()) {
-                EntityCat entitycat = (EntityCat) iterator.next();
 
+            for (EntityCat entitycat : list) {
                 if (entitycat.isSitting()) {
                     return true;
                 }
diff --git a/src/main/java/net/minecraft/server/BlockChorusFlower.java b/src/main/java/net/minecraft/server/BlockChorusFlower.java
index ff1e69f95d566635c6ff4ed3926f4649565b91ac..6f20df961e982afbb477ed53696b1fa348e87690 100644
--- a/src/main/java/net/minecraft/server/BlockChorusFlower.java
+++ b/src/main/java/net/minecraft/server/BlockChorusFlower.java
@@ -163,10 +163,8 @@ public class BlockChorusFlower extends Block {
                 return false;
             } else {
                 boolean flag = false;
-                Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
-                while (iterator.hasNext()) {
-                    EnumDirection enumdirection = (EnumDirection) iterator.next();
+                for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
                     IBlockData iblockdata2 = iworldreader.getType(blockposition.shift(enumdirection));
 
                     if (iblockdata2.a((Block) this.b)) {
diff --git a/src/main/java/net/minecraft/server/BlockCocoa.java b/src/main/java/net/minecraft/server/BlockCocoa.java
index 5f00a69d4e596886a44c953900f36c991d43d6b6..1b5892991be235e1934cd62a715129131762ab13 100644
--- a/src/main/java/net/minecraft/server/BlockCocoa.java
+++ b/src/main/java/net/minecraft/server/BlockCocoa.java
@@ -68,9 +68,7 @@ public class BlockCocoa extends BlockFacingHorizontal implements IBlockFragilePl
         EnumDirection[] aenumdirection = blockactioncontext.e();
         int i = aenumdirection.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumDirection enumdirection = aenumdirection[j];
-
+        for (EnumDirection enumdirection : aenumdirection) {
             if (enumdirection.n().d()) {
                 iblockdata = (IBlockData) iblockdata.set(BlockCocoa.FACING, enumdirection);
                 if (iblockdata.canPlace(world, blockposition)) {
diff --git a/src/main/java/net/minecraft/server/BlockConcretePowder.java b/src/main/java/net/minecraft/server/BlockConcretePowder.java
index 502eae3a50e9989b66578fee4efe043c526ae64d..0db9703b7abc127385a9a3aabd68e96d010e907b 100644
--- a/src/main/java/net/minecraft/server/BlockConcretePowder.java
+++ b/src/main/java/net/minecraft/server/BlockConcretePowder.java
@@ -58,8 +58,7 @@ public class BlockConcretePowder extends BlockFalling {
         EnumDirection[] aenumdirection = EnumDirection.values();
         int i = aenumdirection.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumDirection enumdirection = aenumdirection[j];
+        for (EnumDirection enumdirection : aenumdirection) {
             IBlockData iblockdata = iblockaccess.getType(blockposition_mutableblockposition);
 
             if (enumdirection != EnumDirection.DOWN || l(iblockdata)) {
diff --git a/src/main/java/net/minecraft/server/BlockCoral.java b/src/main/java/net/minecraft/server/BlockCoral.java
index 4611577966e19836311098d5b1a2d1e596327466..fddf785aaab45f0aa82e4da305267f70aeea631b 100644
--- a/src/main/java/net/minecraft/server/BlockCoral.java
+++ b/src/main/java/net/minecraft/server/BlockCoral.java
@@ -38,8 +38,7 @@ public class BlockCoral extends Block {
         EnumDirection[] aenumdirection = EnumDirection.values();
         int i = aenumdirection.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumDirection enumdirection = aenumdirection[j];
+        for (EnumDirection enumdirection : aenumdirection) {
             Fluid fluid = iblockaccess.getFluid(blockposition.shift(enumdirection));
 
             if (fluid.a((Tag) TagsFluid.WATER)) {
diff --git a/src/main/java/net/minecraft/server/BlockDiodeAbstract.java b/src/main/java/net/minecraft/server/BlockDiodeAbstract.java
index bb437b53c2d46ba14fa83717cb1b28f0d732cee3..21d9a1f5687d8c50f838056e77e9eba27b5dbb8b 100644
--- a/src/main/java/net/minecraft/server/BlockDiodeAbstract.java
+++ b/src/main/java/net/minecraft/server/BlockDiodeAbstract.java
@@ -73,9 +73,7 @@ public abstract class BlockDiodeAbstract extends BlockFacingHorizontal {
             EnumDirection[] aenumdirection = EnumDirection.values();
             int i = aenumdirection.length;
 
-            for (int j = 0; j < i; ++j) {
-                EnumDirection enumdirection = aenumdirection[j];
-
+            for (EnumDirection enumdirection : aenumdirection) {
                 world.applyPhysics(blockposition.shift(enumdirection), this);
             }
 
diff --git a/src/main/java/net/minecraft/server/BlockFire.java b/src/main/java/net/minecraft/server/BlockFire.java
index 0e6ce21db67447d0eb84eb1633653decc172b2da..60457a8ae9f01ae98e9eb800b89021ce43cfbb38 100644
--- a/src/main/java/net/minecraft/server/BlockFire.java
+++ b/src/main/java/net/minecraft/server/BlockFire.java
@@ -112,8 +112,7 @@ public class BlockFire extends BlockFireAbstract {
             EnumDirection[] aenumdirection = EnumDirection.values();
             int i = aenumdirection.length;
 
-            for (int j = 0; j < i; ++j) {
-                EnumDirection enumdirection = aenumdirection[j];
+            for (EnumDirection enumdirection : aenumdirection) {
                 BlockStateBoolean blockstateboolean = (BlockStateBoolean) BlockFire.h.get(enumdirection);
 
                 if (blockstateboolean != null) {
@@ -302,9 +301,7 @@ public class BlockFire extends BlockFireAbstract {
         EnumDirection[] aenumdirection = EnumDirection.values();
         int i = aenumdirection.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumDirection enumdirection = aenumdirection[j];
-
+        for (EnumDirection enumdirection : aenumdirection) {
             if (this.e(iblockaccess.getTypeIfLoaded(blockposition.shift(enumdirection)))) { // Paper - prevent chunk loads
                 return true;
             }
@@ -321,8 +318,7 @@ public class BlockFire extends BlockFireAbstract {
             EnumDirection[] aenumdirection = EnumDirection.values();
             int j = aenumdirection.length;
 
-            for (int k = 0; k < j; ++k) {
-                EnumDirection enumdirection = aenumdirection[k];
+            for (EnumDirection enumdirection : aenumdirection) {
                 // Paper start
                 IBlockData iblockdata = iworldreader.getTypeIfLoaded(blockposition.shift(enumdirection));
                 if (iblockdata == null) {
diff --git a/src/main/java/net/minecraft/server/BlockFireAbstract.java b/src/main/java/net/minecraft/server/BlockFireAbstract.java
index 691346f69e5afd2eb96411c485ba8071d491d12a..420a0c9229a0d28b5f6eee11a5babb14e69d858d 100644
--- a/src/main/java/net/minecraft/server/BlockFireAbstract.java
+++ b/src/main/java/net/minecraft/server/BlockFireAbstract.java
@@ -101,9 +101,7 @@ public abstract class BlockFireAbstract extends Block {
             EnumDirection[] aenumdirection = EnumDirection.values();
             int i = aenumdirection.length;
 
-            for (int j = 0; j < i; ++j) {
-                EnumDirection enumdirection1 = aenumdirection[j];
-
+            for (EnumDirection enumdirection1 : aenumdirection) {
                 if (world.getType(blockposition_mutableblockposition.g(blockposition).c(enumdirection1)).a(Blocks.OBSIDIAN)) {
                     flag = true;
                     break;
diff --git a/src/main/java/net/minecraft/server/BlockFluids.java b/src/main/java/net/minecraft/server/BlockFluids.java
index e470551fd4078924c3269714e7c60449fcecbc4d..22ae4a4f2786fddeacd7d5c024b94bab3740a5fa 100644
--- a/src/main/java/net/minecraft/server/BlockFluids.java
+++ b/src/main/java/net/minecraft/server/BlockFluids.java
@@ -121,9 +121,7 @@ public class BlockFluids extends Block implements IFluidSource {
             EnumDirection[] aenumdirection = EnumDirection.values();
             int i = aenumdirection.length;
 
-            for (int j = 0; j < i; ++j) {
-                EnumDirection enumdirection = aenumdirection[j];
-
+            for (EnumDirection enumdirection : aenumdirection) {
                 if (enumdirection != EnumDirection.DOWN) {
                     BlockPosition blockposition1 = blockposition.shift(enumdirection);
 
diff --git a/src/main/java/net/minecraft/server/BlockIceFrost.java b/src/main/java/net/minecraft/server/BlockIceFrost.java
index 77f5f835c60c181a0a2d6fc782d756338bc2ccb0..ec9107290dd2539f30771f1edd55ab44f251a3a8 100644
--- a/src/main/java/net/minecraft/server/BlockIceFrost.java
+++ b/src/main/java/net/minecraft/server/BlockIceFrost.java
@@ -24,12 +24,12 @@ public class BlockIceFrost extends BlockIce {
             EnumDirection[] aenumdirection = EnumDirection.values();
             int i = aenumdirection.length;
 
-            for (int j = 0; j < i; ++j) {
-                EnumDirection enumdirection = aenumdirection[j];
-
+            for (EnumDirection enumdirection : aenumdirection) {
                 blockposition_mutableblockposition.a((BaseBlockPosition) blockposition, enumdirection);
                 IBlockData iblockdata1 = worldserver.getTypeIfLoaded(blockposition_mutableblockposition); // Paper
-                if (iblockdata1 == null) { continue; } // Paper
+                if (iblockdata1 == null) {
+                    continue;
+                } // Paper
 
                 if (iblockdata1.a((Block) this) && !this.e(iblockdata1, (World) worldserver, blockposition_mutableblockposition)) {
                     worldserver.getBlockTickList().a(blockposition_mutableblockposition, this, MathHelper.nextInt(random, worldserver.paperConfig.frostedIceDelayMin, worldserver.paperConfig.frostedIceDelayMax)); // Paper - use configurable min/max delay
@@ -68,9 +68,7 @@ public class BlockIceFrost extends BlockIce {
         EnumDirection[] aenumdirection = EnumDirection.values();
         int k = aenumdirection.length;
 
-        for (int l = 0; l < k; ++l) {
-            EnumDirection enumdirection = aenumdirection[l];
-
+        for (EnumDirection enumdirection : aenumdirection) {
             blockposition_mutableblockposition.a((BaseBlockPosition) blockposition, enumdirection);
             // Paper start
             IBlockData type = iblockaccess.getTypeIfLoaded(blockposition_mutableblockposition);
diff --git a/src/main/java/net/minecraft/server/BlockLeaves.java b/src/main/java/net/minecraft/server/BlockLeaves.java
index 468d0bf193f9a90e734ff413b223e83d431113e7..8edcf00e623e4c6a04228a0b590454a328b25174 100644
--- a/src/main/java/net/minecraft/server/BlockLeaves.java
+++ b/src/main/java/net/minecraft/server/BlockLeaves.java
@@ -68,9 +68,7 @@ public class BlockLeaves extends Block {
         EnumDirection[] aenumdirection = EnumDirection.values();
         int j = aenumdirection.length;
 
-        for (int k = 0; k < j; ++k) {
-            EnumDirection enumdirection = aenumdirection[k];
-
+        for (EnumDirection enumdirection : aenumdirection) {
             blockposition_mutableblockposition.a((BaseBlockPosition) blockposition, enumdirection);
             i = Math.min(i, h(generatoraccess.getType(blockposition_mutableblockposition)) + 1);
             if (i == 1) {
diff --git a/src/main/java/net/minecraft/server/BlockMinecartDetector.java b/src/main/java/net/minecraft/server/BlockMinecartDetector.java
index 77fde30769860828b6f16eefb186962c140beaae..65c6a4cc54f7e716a59fc8080d2d8f9ff609029c 100644
--- a/src/main/java/net/minecraft/server/BlockMinecartDetector.java
+++ b/src/main/java/net/minecraft/server/BlockMinecartDetector.java
@@ -101,10 +101,8 @@ public class BlockMinecartDetector extends BlockMinecartTrackAbstract {
     protected void b(World world, BlockPosition blockposition, IBlockData iblockdata, boolean flag) {
         MinecartTrackLogic minecarttracklogic = new MinecartTrackLogic(world, blockposition, iblockdata);
         List<BlockPosition> list = minecarttracklogic.a();
-        Iterator iterator = list.iterator();
 
-        while (iterator.hasNext()) {
-            BlockPosition blockposition1 = (BlockPosition) iterator.next();
+        for (BlockPosition blockposition1 : list) {
             IBlockData iblockdata1 = world.getType(blockposition1);
 
             iblockdata1.doPhysics(world, blockposition1, iblockdata1.getBlock(), blockposition, false);
diff --git a/src/main/java/net/minecraft/server/BlockMushroom.java b/src/main/java/net/minecraft/server/BlockMushroom.java
index 9409cb3784499ae83988bcbfd59771d675ba002c..e1a98a1901649c08bb05707877b7f2d8a8f3c068 100644
--- a/src/main/java/net/minecraft/server/BlockMushroom.java
+++ b/src/main/java/net/minecraft/server/BlockMushroom.java
@@ -25,11 +25,8 @@ public class BlockMushroom extends BlockPlant implements IBlockFragilePlantEleme
         if (random.nextInt(Math.max(1, (int) (100.0F / worldserver.spigotConfig.mushroomModifier) * 25)) == 0) { // Spigot
             int i = 5;
             boolean flag = true;
-            Iterator iterator = BlockPosition.a(blockposition.b(-4, -1, -4), blockposition.b(4, 1, 4)).iterator();
-
-            while (iterator.hasNext()) {
-                BlockPosition blockposition1 = (BlockPosition) iterator.next();
 
+            for (BlockPosition blockposition1 : BlockPosition.a(blockposition.b(-4, -1, -4), blockposition.b(4, 1, 4))) {
                 if (worldserver.getType(blockposition1).a((Block) this)) {
                     --i;
                     if (i <= 0) {
diff --git a/src/main/java/net/minecraft/server/BlockPiston.java b/src/main/java/net/minecraft/server/BlockPiston.java
index 7f084e7f11a829c10d113c7fb39eec0b8ad77080..34ffe507dca994b73cd82afc93dab921786f75da 100644
--- a/src/main/java/net/minecraft/server/BlockPiston.java
+++ b/src/main/java/net/minecraft/server/BlockPiston.java
@@ -301,8 +301,8 @@ public class BlockPiston extends BlockDirectional {
             List<BlockPosition> list = pistonextendschecker.getMovedBlocks();
             List<IBlockData> list1 = Lists.newArrayList();
 
-            for (int i = 0; i < list.size(); ++i) {
-                BlockPosition blockposition2 = (BlockPosition) list.get(i);
+            for (BlockPosition blockPosition : list) {
+                BlockPosition blockposition2 = (BlockPosition) blockPosition;
                 IBlockData iblockdata = world.getType(blockposition2);
 
                 list1.add(iblockdata);
diff --git a/src/main/java/net/minecraft/server/BlockPressurePlateBinary.java b/src/main/java/net/minecraft/server/BlockPressurePlateBinary.java
index 2e1dbd4786f77a8822d039206000799b927ff24c..2dc4aac13a8e6f077341ac8ac9867e1feb56187b 100644
--- a/src/main/java/net/minecraft/server/BlockPressurePlateBinary.java
+++ b/src/main/java/net/minecraft/server/BlockPressurePlateBinary.java
@@ -63,10 +63,9 @@ public class BlockPressurePlateBinary extends BlockPressurePlateAbstract {
         }
 
         if (!list.isEmpty()) {
-            Iterator iterator = list.iterator();
 
-            while (iterator.hasNext()) {
-                Entity entity = (Entity) iterator.next();
+            for (Object o : list) {
+                Entity entity = (Entity) o;
                 if (entity.isIgnoreBlockTrigger()) continue; // Paper - don't call event for ignored entities
 
                 // CraftBukkit start - Call interact event when turning on a pressure plate
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneOre.java b/src/main/java/net/minecraft/server/BlockRedstoneOre.java
index 668c60e047ded4e311cbc31d6f6816db69648673..242cc1a61bc8d388bde424c1f09021a9d547c568 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneOre.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneOre.java
@@ -118,8 +118,7 @@ public class BlockRedstoneOre extends Block {
         EnumDirection[] aenumdirection = EnumDirection.values();
         int i = aenumdirection.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumDirection enumdirection = aenumdirection[j];
+        for (EnumDirection enumdirection : aenumdirection) {
             BlockPosition blockposition1 = blockposition.shift(enumdirection);
 
             if (!world.getType(blockposition1).i(world, blockposition1)) {
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneTorch.java b/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
index a63a60348fe45f63deec6fcb27b6be09cd2f088c..4cf4068e2d18a26dec4f20e31401089576124022 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
@@ -23,9 +23,7 @@ public class BlockRedstoneTorch extends BlockTorch {
         EnumDirection[] aenumdirection = EnumDirection.values();
         int i = aenumdirection.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumDirection enumdirection = aenumdirection[j];
-
+        for (EnumDirection enumdirection : aenumdirection) {
             world.applyPhysics(blockposition.shift(enumdirection), this);
         }
 
@@ -37,9 +35,7 @@ public class BlockRedstoneTorch extends BlockTorch {
             EnumDirection[] aenumdirection = EnumDirection.values();
             int i = aenumdirection.length;
 
-            for (int j = 0; j < i; ++j) {
-                EnumDirection enumdirection = aenumdirection[j];
-
+            for (EnumDirection enumdirection : aenumdirection) {
                 world.applyPhysics(blockposition.shift(enumdirection), this);
             }
 
@@ -144,8 +140,7 @@ public class BlockRedstoneTorch extends BlockTorch {
 
         int i = 0;
 
-        for (java.util.Iterator<BlockRedstoneTorch.RedstoneUpdateInfo> iterator = list.iterator(); iterator.hasNext();) {
-            BlockRedstoneTorch.RedstoneUpdateInfo blockredstonetorch_redstoneupdateinfo = iterator.next();
+        for (RedstoneUpdateInfo blockredstonetorch_redstoneupdateinfo : list) {
             // Paper end
             if (blockredstonetorch_redstoneupdateinfo.a.equals(blockposition)) {
                 ++i;
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneWire.java b/src/main/java/net/minecraft/server/BlockRedstoneWire.java
index 7f9ca45d403000d26d84198d8f88cd484fd6cf79..8ffbcaa32c4eb5f226e3705681c43677d03a51da 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneWire.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneWire.java
@@ -47,10 +47,8 @@ public class BlockRedstoneWire extends Block {
 
     private VoxelShape l(IBlockData iblockdata) {
         VoxelShape voxelshape = BlockRedstoneWire.g;
-        Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
-        while (iterator.hasNext()) {
-            EnumDirection enumdirection = (EnumDirection) iterator.next();
+        for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
             BlockPropertyRedstoneSide blockpropertyredstoneside = (BlockPropertyRedstoneSide) iblockdata.get((IBlockState) BlockRedstoneWire.f.get(enumdirection));
 
             if (blockpropertyredstoneside == BlockPropertyRedstoneSide.SIDE) {
@@ -109,11 +107,8 @@ public class BlockRedstoneWire extends Block {
 
     private IBlockData b(IBlockAccess iblockaccess, IBlockData iblockdata, BlockPosition blockposition) {
         boolean flag = !iblockaccess.getType(blockposition.up()).isOccluding(iblockaccess, blockposition);
-        Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
-
-        while (iterator.hasNext()) {
-            EnumDirection enumdirection = (EnumDirection) iterator.next();
 
+        for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
             if (!((BlockPropertyRedstoneSide) iblockdata.get((IBlockState) BlockRedstoneWire.f.get(enumdirection))).b()) {
                 BlockPropertyRedstoneSide blockpropertyredstoneside = this.a(iblockaccess, blockposition, enumdirection, flag);
 
@@ -148,10 +143,8 @@ public class BlockRedstoneWire extends Block {
     @Override
     public void a(IBlockData iblockdata, GeneratorAccess generatoraccess, BlockPosition blockposition, int i, int j) {
         BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition();
-        Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
-        while (iterator.hasNext()) {
-            EnumDirection enumdirection = (EnumDirection) iterator.next();
+        for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
             BlockPropertyRedstoneSide blockpropertyredstoneside = (BlockPropertyRedstoneSide) iblockdata.get((IBlockState) BlockRedstoneWire.f.get(enumdirection));
 
             if (blockpropertyredstoneside != BlockPropertyRedstoneSide.NONE && !generatoraccess.getType(blockposition_mutableblockposition.a((BaseBlockPosition) blockposition, enumdirection)).a((Block) this)) {
@@ -352,17 +345,11 @@ public class BlockRedstoneWire extends Block {
             EnumDirection[] aenumdirection = EnumDirection.values();
             int j = aenumdirection.length;
 
-            for (int k = 0; k < j; ++k) {
-                EnumDirection enumdirection = aenumdirection[k];
-
+            for (EnumDirection enumdirection : aenumdirection) {
                 set.add(blockposition.shift(enumdirection));
             }
 
-            Iterator iterator = set.iterator();
-
-            while (iterator.hasNext()) {
-                BlockPosition blockposition1 = (BlockPosition) iterator.next();
-
+            for (BlockPosition blockposition1 : set) {
                 world.applyPhysics(blockposition1, this);
             }
         }
@@ -377,10 +364,8 @@ public class BlockRedstoneWire extends Block {
         int j = 0;
 
         if (i < 15) {
-            Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
-            while (iterator.hasNext()) {
-                EnumDirection enumdirection = (EnumDirection) iterator.next();
+            for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
                 BlockPosition blockposition1 = blockposition.shift(enumdirection);
                 IBlockData iblockdata = world.getType(blockposition1);
 
@@ -410,9 +395,7 @@ public class BlockRedstoneWire extends Block {
             EnumDirection[] aenumdirection = EnumDirection.values();
             int i = aenumdirection.length;
 
-            for (int j = 0; j < i; ++j) {
-                EnumDirection enumdirection = aenumdirection[j];
-
+            for (EnumDirection enumdirection : aenumdirection) {
                 world.applyPhysics(blockposition.shift(enumdirection), this);
             }
 
@@ -423,11 +406,8 @@ public class BlockRedstoneWire extends Block {
     public void onPlace(IBlockData iblockdata, World world, BlockPosition blockposition, IBlockData iblockdata1, boolean flag) {
         if (!iblockdata1.a(iblockdata.getBlock()) && !world.isClientSide) {
             this.updateSurroundingRedstone(world, blockposition, iblockdata, null); // Paper - Optimize redstone
-            Iterator iterator = EnumDirection.EnumDirectionLimit.VERTICAL.iterator();
-
-            while (iterator.hasNext()) {
-                EnumDirection enumdirection = (EnumDirection) iterator.next();
 
+            for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.VERTICAL) {
                 world.applyPhysics(blockposition.shift(enumdirection), this);
             }
 
@@ -443,9 +423,7 @@ public class BlockRedstoneWire extends Block {
                 EnumDirection[] aenumdirection = EnumDirection.values();
                 int i = aenumdirection.length;
 
-                for (int j = 0; j < i; ++j) {
-                    EnumDirection enumdirection = aenumdirection[j];
-
+                for (EnumDirection enumdirection : aenumdirection) {
                     world.applyPhysics(blockposition.shift(enumdirection), this);
                 }
 
@@ -583,10 +561,8 @@ public class BlockRedstoneWire extends Block {
     }
 
     private void a(World world, BlockPosition blockposition, IBlockData iblockdata, IBlockData iblockdata1) {
-        Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
-        while (iterator.hasNext()) {
-            EnumDirection enumdirection = (EnumDirection) iterator.next();
+        for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
             BlockPosition blockposition1 = blockposition.shift(enumdirection);
 
             if (((BlockPropertyRedstoneSide) iblockdata.get((IBlockState) BlockRedstoneWire.f.get(enumdirection))).b() != ((BlockPropertyRedstoneSide) iblockdata1.get((IBlockState) BlockRedstoneWire.f.get(enumdirection))).b() && world.getType(blockposition1).isOccluding(world, blockposition1)) {
diff --git a/src/main/java/net/minecraft/server/BlockReed.java b/src/main/java/net/minecraft/server/BlockReed.java
index c051decd19ff763a061822bc2a4b03289dfe3ac7..b512815658dcce18d153018c631b5c3f7711fa8b 100644
--- a/src/main/java/net/minecraft/server/BlockReed.java
+++ b/src/main/java/net/minecraft/server/BlockReed.java
@@ -67,10 +67,8 @@ public class BlockReed extends Block {
         } else {
             if (iblockdata1.a(Blocks.GRASS_BLOCK) || iblockdata1.a(Blocks.DIRT) || iblockdata1.a(Blocks.COARSE_DIRT) || iblockdata1.a(Blocks.PODZOL) || iblockdata1.a(Blocks.SAND) || iblockdata1.a(Blocks.RED_SAND)) {
                 BlockPosition blockposition1 = blockposition.down();
-                Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
-                while (iterator.hasNext()) {
-                    EnumDirection enumdirection = (EnumDirection) iterator.next();
+                for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
                     IBlockData iblockdata2 = iworldreader.getType(blockposition1.shift(enumdirection));
                     Fluid fluid = iworldreader.getFluid(blockposition1.shift(enumdirection));
 
diff --git a/src/main/java/net/minecraft/server/BlockScaffolding.java b/src/main/java/net/minecraft/server/BlockScaffolding.java
index 903862a298c9aaded01488c81bd1cd7ebbfbef8d..d5ba7f34f2914f658cec0a742e6ae6312b57f586 100644
--- a/src/main/java/net/minecraft/server/BlockScaffolding.java
+++ b/src/main/java/net/minecraft/server/BlockScaffolding.java
@@ -115,10 +115,7 @@ public class BlockScaffolding extends Block implements IBlockWaterlogged {
             return 0;
         }
 
-        Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
-
-        while (iterator.hasNext()) {
-            EnumDirection enumdirection = (EnumDirection) iterator.next();
+        for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
             IBlockData iblockdata1 = iblockaccess.getType(blockposition_mutableblockposition.a((BaseBlockPosition) blockposition, enumdirection));
 
             if (iblockdata1.a(Blocks.SCAFFOLDING)) {
diff --git a/src/main/java/net/minecraft/server/BlockSponge.java b/src/main/java/net/minecraft/server/BlockSponge.java
index 7a2130d74e787f82b771d4efa8d3f15804f05940..92057a6ee2e9ed6f8bd1ad66e52e39d68b44bbec 100644
--- a/src/main/java/net/minecraft/server/BlockSponge.java
+++ b/src/main/java/net/minecraft/server/BlockSponge.java
@@ -51,8 +51,7 @@ public class BlockSponge extends Block {
             EnumDirection[] aenumdirection = EnumDirection.values();
             int k = aenumdirection.length;
 
-            for (int l = 0; l < k; ++l) {
-                EnumDirection enumdirection = aenumdirection[l];
+            for (EnumDirection enumdirection : aenumdirection) {
                 BlockPosition blockposition2 = blockposition1.shift(enumdirection);
                 // CraftBukkit start
                 IBlockData iblockdata = blockList.getType(blockposition2);
diff --git a/src/main/java/net/minecraft/server/BlockStateEnum.java b/src/main/java/net/minecraft/server/BlockStateEnum.java
index 8dc620b22bb904aa6a82e2127aa9da861986525c..e2bd12d5d2018c09b62f727bf3a10f28337e863e 100644
--- a/src/main/java/net/minecraft/server/BlockStateEnum.java
+++ b/src/main/java/net/minecraft/server/BlockStateEnum.java
@@ -20,10 +20,10 @@ public class BlockStateEnum<T extends Enum<T> & INamable> extends IBlockState<T>
     protected BlockStateEnum(String s, Class<T> oclass, Collection<T> collection) {
         super(s, oclass);
         this.a = ImmutableSet.copyOf(collection);
-        Iterator<T> iterator = collection.iterator(); // Paper - decompile fix
+        // Paper - decompile fix
 
-        while (iterator.hasNext()) {
-            T t0 = iterator.next(); // Paper - Decompile fix
+        // Paper - Decompile fix
+        for (T t0 : collection) {
             String s1 = ((INamable) t0).getName();
 
             if (this.b.containsKey(s1)) {
diff --git a/src/main/java/net/minecraft/server/BlockTripwire.java b/src/main/java/net/minecraft/server/BlockTripwire.java
index 5c401f28191c83b1a121d8cef4a5d8b2e681de49..d252a48a4de96166a9130ae1fc17a5d2f613b2d1 100644
--- a/src/main/java/net/minecraft/server/BlockTripwire.java
+++ b/src/main/java/net/minecraft/server/BlockTripwire.java
@@ -122,11 +122,8 @@ public class BlockTripwire extends Block {
         List<? extends Entity> list = world.getEntities((Entity) null, iblockdata.getShape(world, blockposition).getBoundingBox().a(blockposition));
 
         if (!list.isEmpty()) {
-            Iterator iterator = list.iterator();
-
-            while (iterator.hasNext()) {
-                Entity entity = (Entity) iterator.next();
 
+            for (Entity entity : list) {
                 if (!entity.isIgnoreBlockTrigger()) {
                     flag1 = true;
                     break;
diff --git a/src/main/java/net/minecraft/server/BlockVine.java b/src/main/java/net/minecraft/server/BlockVine.java
index 7980ce67b927b349bdf0ca680deda8252149eb8f..f2e9fc8ae7d4eeff76fc6cb91eaa48a85cd481c1 100644
--- a/src/main/java/net/minecraft/server/BlockVine.java
+++ b/src/main/java/net/minecraft/server/BlockVine.java
@@ -75,11 +75,8 @@ public class BlockVine extends Block {
 
     private int m(IBlockData iblockdata) {
         int i = 0;
-        Iterator iterator = BlockVine.f.values().iterator();
-
-        while (iterator.hasNext()) {
-            BlockStateBoolean blockstateboolean = (BlockStateBoolean) iterator.next();
 
+        for (BlockStateBoolean blockstateboolean : BlockVine.f.values()) {
             if ((Boolean) iblockdata.get(blockstateboolean)) {
                 ++i;
             }
@@ -121,10 +118,8 @@ public class BlockVine extends Block {
         }
 
         IBlockData iblockdata1 = null;
-        Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
-        while (iterator.hasNext()) {
-            EnumDirection enumdirection = (EnumDirection) iterator.next();
+        for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
             BlockStateBoolean blockstateboolean = getDirection(enumdirection);
 
             if ((Boolean) iblockdata.get(blockstateboolean)) {
@@ -214,10 +209,9 @@ public class BlockVine extends Block {
                         }
 
                         IBlockData iblockdata2 = iblockdata;
-                        Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
-                        while (iterator.hasNext()) {
-                            enumdirection1 = (EnumDirection) iterator.next();
+                        for (EnumDirection enumDirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
+                            enumdirection1 = enumDirection;
                             if (random.nextBoolean() || !a((IBlockAccess) worldserver, blockposition1.shift(enumdirection1), EnumDirection.UP)) {
                                 iblockdata2 = (IBlockData) iblockdata2.set(getDirection(enumdirection1), false);
                             }
@@ -249,11 +243,8 @@ public class BlockVine extends Block {
     }
 
     private IBlockData a(IBlockData iblockdata, IBlockData iblockdata1, Random random) {
-        Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
-
-        while (iterator.hasNext()) {
-            EnumDirection enumdirection = (EnumDirection) iterator.next();
 
+        for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
             if (random.nextBoolean()) {
                 BlockStateBoolean blockstateboolean = getDirection(enumdirection);
 
@@ -274,11 +265,8 @@ public class BlockVine extends Block {
         boolean flag = true;
         Iterable<BlockPosition> iterable = BlockPosition.b(blockposition.getX() - 4, blockposition.getY() - 1, blockposition.getZ() - 4, blockposition.getX() + 4, blockposition.getY() + 1, blockposition.getZ() + 4);
         int i = 5;
-        Iterator iterator = iterable.iterator();
-
-        while (iterator.hasNext()) {
-            BlockPosition blockposition1 = (BlockPosition) iterator.next();
 
+        for (BlockPosition blockposition1 : iterable) {
             if (iblockaccess.getType(blockposition1).a((Block) this)) {
                 --i;
                 if (i <= 0) {
@@ -306,9 +294,7 @@ public class BlockVine extends Block {
         EnumDirection[] aenumdirection = blockactioncontext.e();
         int i = aenumdirection.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumDirection enumdirection = aenumdirection[j];
-
+        for (EnumDirection enumdirection : aenumdirection) {
             if (enumdirection != EnumDirection.DOWN) {
                 BlockStateBoolean blockstateboolean = getDirection(enumdirection);
                 boolean flag1 = flag && (Boolean) iblockdata.get(blockstateboolean);
diff --git a/src/main/java/net/minecraft/server/BossBattle.java b/src/main/java/net/minecraft/server/BossBattle.java
index 04477938aeae32b221c15c3491fb9a80248eebb5..e0c6b5a677c9c07813ddbf6add447792c9d0cc9b 100644
--- a/src/main/java/net/minecraft/server/BossBattle.java
+++ b/src/main/java/net/minecraft/server/BossBattle.java
@@ -118,9 +118,7 @@ public abstract class BossBattle {
             BossBattle.BarStyle[] abossbattle_barstyle = values();
             int i = abossbattle_barstyle.length;
 
-            for (int j = 0; j < i; ++j) {
-                BossBattle.BarStyle bossbattle_barstyle = abossbattle_barstyle[j];
-
+            for (BarStyle bossbattle_barstyle : abossbattle_barstyle) {
                 if (bossbattle_barstyle.f.equals(s)) {
                     return bossbattle_barstyle;
                 }
@@ -154,9 +152,7 @@ public abstract class BossBattle {
             BossBattle.BarColor[] abossbattle_barcolor = values();
             int i = abossbattle_barcolor.length;
 
-            for (int j = 0; j < i; ++j) {
-                BossBattle.BarColor bossbattle_barcolor = abossbattle_barcolor[j];
-
+            for (BarColor bossbattle_barcolor : abossbattle_barcolor) {
                 if (bossbattle_barcolor.h.equals(s)) {
                     return bossbattle_barcolor;
                 }
diff --git a/src/main/java/net/minecraft/server/BossBattleCustom.java b/src/main/java/net/minecraft/server/BossBattleCustom.java
index 00b1d1bd873c6fe5e1c26973e2b09dd688e4b150..82a2443eb57904022b3fcc4ad2d03a568f106fdb 100644
--- a/src/main/java/net/minecraft/server/BossBattleCustom.java
+++ b/src/main/java/net/minecraft/server/BossBattleCustom.java
@@ -188,11 +188,8 @@ public class BossBattleCustom extends BossBattleServer {
         nbttagcompound.setBoolean("PlayBossMusic", this.isPlayMusic());
         nbttagcompound.setBoolean("CreateWorldFog", this.isCreateFog());
         NBTTagList nbttaglist = new NBTTagList();
-        Iterator iterator = this.i.iterator();
-
-        while (iterator.hasNext()) {
-            UUID uuid = (UUID) iterator.next();
 
+        for (UUID uuid : this.i) {
             nbttaglist.add(GameProfileSerializer.a(uuid));
         }
 
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 545eb26020ed8263e9d069acaadaab1c8512c071..764235f7fd31a853e2d9b9ecd3d8b09775c775d9 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -223,12 +223,11 @@ public class Chunk implements IChunkAccess {
         Object[] backingSet = nearby.getBackingSet();
         double closestDistance = maxRange < 0.0 ? Double.MAX_VALUE : maxRange * maxRange;
         EntityPlayer closest = null;
-        for (int i = 0, len = backingSet.length; i < len; ++i) {
-            Object _player = backingSet[i];
+        for (Object _player : backingSet) {
             if (!(_player instanceof EntityPlayer)) {
                 continue;
             }
-            EntityPlayer player = (EntityPlayer)_player;
+            EntityPlayer player = (EntityPlayer) _player;
 
             double distance = player.getDistanceSquared(sourceX, sourceY, sourceZ);
             if (distance < closestDistance && predicate.test(player)) {
@@ -254,12 +253,11 @@ public class Chunk implements IChunkAccess {
         double rangeSquared = range * range;
 
         Object[] backingSet = nearby.getBackingSet();
-        for (int i = 0, len = backingSet.length; i < len; ++i) {
-            Object _player = backingSet[i];
+        for (Object _player : backingSet) {
             if (!(_player instanceof EntityPlayer)) {
                 continue;
             }
-            EntityPlayer player = (EntityPlayer)_player;
+            EntityPlayer player = (EntityPlayer) _player;
 
             if (range >= 0.0) {
                 double distanceSquared = player.getDistanceSquared(sourceX, sourceY, sourceZ);
@@ -291,9 +289,7 @@ public class Chunk implements IChunkAccess {
         HeightMap.Type[] aheightmap_type = HeightMap.Type.values();
         int j = aheightmap_type.length;
 
-        for (int k = 0; k < j; ++k) {
-            HeightMap.Type heightmap_type = aheightmap_type[k];
-
+        for (HeightMap.Type heightmap_type : aheightmap_type) {
             if (ChunkStatus.FULL.h().contains(heightmap_type)) {
                 this.heightMap.put(heightmap_type, new HeightMap(this, heightmap_type));
             }
diff --git a/src/main/java/net/minecraft/server/ChunkConverter.java b/src/main/java/net/minecraft/server/ChunkConverter.java
index 5366314e5f889b5b8d7740bbd0f024d9b7b9d643..24fba9047f2a684ff7355a4e1ce8f0d9b4801621 100644
--- a/src/main/java/net/minecraft/server/ChunkConverter.java
+++ b/src/main/java/net/minecraft/server/ChunkConverter.java
@@ -47,9 +47,7 @@ public class ChunkConverter {
         EnumDirection8[] aenumdirection8 = EnumDirection8.values();
         int k = aenumdirection8.length;
 
-        for (int l = 0; l < k; ++l) {
-            EnumDirection8 enumdirection8 = aenumdirection8[l];
-
+        for (EnumDirection8 enumdirection8 : aenumdirection8) {
             if ((j & 1 << enumdirection8.ordinal()) != 0) {
                 this.d.add(enumdirection8);
             }
@@ -62,9 +60,7 @@ public class ChunkConverter {
         EnumDirection8[] aenumdirection8 = ChunkConverter.c;
         int i = aenumdirection8.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumDirection8 enumdirection8 = aenumdirection8[j];
-
+        for (EnumDirection8 enumdirection8 : aenumdirection8) {
             a(chunk, enumdirection8);
         }
 
@@ -94,10 +90,8 @@ public class ChunkConverter {
             int l = chunkcoordintpair.e() + (flag6 && (flag2 || flag3) ? 14 : (flag5 ? 0 : 15));
             EnumDirection[] aenumdirection = EnumDirection.values();
             BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition();
-            Iterator iterator = BlockPosition.b(i, 0, k, j, world.getBuildHeight() - 1, l).iterator();
 
-            while (iterator.hasNext()) {
-                BlockPosition blockposition = (BlockPosition) iterator.next();
+            for (BlockPosition blockposition : BlockPosition.b(i, 0, k, j, world.getBuildHeight() - 1, l)) {
                 IBlockData iblockdata = world.getType(blockposition);
                 IBlockData iblockdata1 = iblockdata;
                 EnumDirection[] aenumdirection1 = aenumdirection;
@@ -179,9 +173,7 @@ public class ChunkConverter {
         int[][] aint = this.e;
         int i = aint.length;
 
-        for (int j = 0; j < i; ++j) {
-            int[] aint1 = aint[j];
-
+        for (int[] aint1 : aint) {
             if (aint1 != null) {
                 return false;
             }
@@ -306,9 +298,7 @@ public class ChunkConverter {
                                 EnumDirection[] aenumdirection = f; // Paper - decomp fix
                                 int k = aenumdirection.length;
 
-                                for (int l = 0; l < k; ++l) {
-                                    EnumDirection enumdirection = aenumdirection[l];
-
+                                for (EnumDirection enumdirection : aenumdirection) {
                                     blockposition_mutableblockposition.a((BaseBlockPosition) blockposition, enumdirection);
                                     IBlockData iblockdata1 = generatoraccess.getType(blockposition_mutableblockposition);
 
diff --git a/src/main/java/net/minecraft/server/ChunkGenerator.java b/src/main/java/net/minecraft/server/ChunkGenerator.java
index 01caa55482aa963dfe7726e652a1157aa90f5631..38b6c9bb3609dd21382f637070a837949a788352 100644
--- a/src/main/java/net/minecraft/server/ChunkGenerator.java
+++ b/src/main/java/net/minecraft/server/ChunkGenerator.java
@@ -149,11 +149,8 @@ public abstract class ChunkGenerator {
             BlockPosition blockposition1 = null;
             double d0 = Double.MAX_VALUE;
             BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition();
-            Iterator iterator = this.f.iterator();
-
-            while (iterator.hasNext()) {
-                ChunkCoordIntPair chunkcoordintpair = (ChunkCoordIntPair) iterator.next();
 
+            for (ChunkCoordIntPair chunkcoordintpair : this.f) {
                 blockposition_mutableblockposition.d((chunkcoordintpair.x << 4) + 8, 32, (chunkcoordintpair.z << 4) + 8);
                 double d1 = blockposition_mutableblockposition.j(blockposition);
 
diff --git a/src/main/java/net/minecraft/server/ChunkGeneratorAbstract.java b/src/main/java/net/minecraft/server/ChunkGeneratorAbstract.java
index de469f9b4f0fecc05dca7a5aacd1308db6f80a18..4f0f99d11f86cf1b62366b22deaa6d77a4d6d072 100644
--- a/src/main/java/net/minecraft/server/ChunkGeneratorAbstract.java
+++ b/src/main/java/net/minecraft/server/ChunkGeneratorAbstract.java
@@ -471,10 +471,8 @@ public final class ChunkGeneratorAbstract extends ChunkGenerator {
         boolean flag2 = k + 4 >= 0 && k < this.x;
 
         if (flag1 || flag2) {
-            Iterator iterator = BlockPosition.b(i, 0, j, i + 15, 0, j + 15).iterator();
 
-            while (iterator.hasNext()) {
-                BlockPosition blockposition = (BlockPosition) iterator.next();
+            for (BlockPosition blockposition : BlockPosition.b(i, 0, j, i + 15, 0, j + 15)) {
                 int i1;
 
                 if (flag1) {
@@ -506,10 +504,9 @@ public final class ChunkGeneratorAbstract extends ChunkGenerator {
         int j = chunkcoordintpair.z;
         int k = i << 4;
         int l = j << 4;
-        Iterator iterator = StructureGenerator.t.iterator();
 
-        while (iterator.hasNext()) {
-            StructureGenerator<?> structuregenerator = (StructureGenerator) iterator.next();
+        for (StructureGenerator<?> structureGenerator : StructureGenerator.t) {
+            StructureGenerator<?> structuregenerator = (StructureGenerator) structureGenerator;
 
             for (StructureStart<?> structurestart : structuremanager.getFeatureStarts(SectionPosition.a(chunkcoordintpair, 0), structuregenerator)) { // Paper - remove structure streams
                 Iterator iterator1 = structurestart.d().iterator();
diff --git a/src/main/java/net/minecraft/server/ChunkRegionLoader.java b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
index 5f04591193d58ba7897194142da5efcbec3763dd..1a596028138ce03c0a3d0ef918c93681b4873301 100644
--- a/src/main/java/net/minecraft/server/ChunkRegionLoader.java
+++ b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
@@ -210,11 +210,8 @@ public class ChunkRegionLoader {
             }
 
             if (!flag && protochunk.getChunkStatus().b(ChunkStatus.LIGHT)) {
-                Iterator iterator = BlockPosition.b(chunkcoordintpair.d(), 0, chunkcoordintpair.e(), chunkcoordintpair.f(), 255, chunkcoordintpair.g()).iterator();
-
-                while (iterator.hasNext()) {
-                    BlockPosition blockposition = (BlockPosition) iterator.next();
 
+                for (BlockPosition blockposition : BlockPosition.b(chunkcoordintpair.d(), 0, chunkcoordintpair.e(), chunkcoordintpair.f(), 255, chunkcoordintpair.g())) {
                     if (((IChunkAccess) object).getType(blockposition).f() != 0) {
                         protochunk.k(blockposition);
                     }
@@ -225,10 +222,8 @@ public class ChunkRegionLoader {
         ((IChunkAccess) object).b(flag);
         NBTTagCompound nbttagcompound3 = nbttagcompound1.getCompound("Heightmaps");
         EnumSet<HeightMap.Type> enumset = EnumSet.noneOf(HeightMap.Type.class);
-        Iterator iterator1 = ((IChunkAccess) object).getChunkStatus().h().iterator();
 
-        while (iterator1.hasNext()) {
-            HeightMap.Type heightmap_type = (HeightMap.Type) iterator1.next();
+        for (HeightMap.Type heightmap_type : ((IChunkAccess) object).getChunkStatus().h()) {
             String s = heightmap_type.b();
 
             if (nbttagcompound3.hasKeyOfType(s, 12)) {
@@ -291,10 +286,8 @@ public class ChunkRegionLoader {
             }
 
             nbttagcompound5 = nbttagcompound1.getCompound("CarvingMasks");
-            Iterator iterator2 = nbttagcompound5.getKeys().iterator();
 
-            while (iterator2.hasNext()) {
-                String s1 = (String) iterator2.next();
+            for (String s1 : nbttagcompound5.getKeys()) {
                 WorldGenStage.Features worldgenstage_features = WorldGenStage.Features.valueOf(s1);
 
                 protochunk1.a(worldgenstage_features, BitSet.valueOf(nbttagcompound5.getByteArray(s1)));
@@ -532,10 +525,8 @@ public class ChunkRegionLoader {
             // Paper start
             final Map<EntityTypes<?>, Integer> savedEntityCounts = Maps.newHashMap();
             for (int j = 0; j < chunk.getEntitySlices().length; ++j) {
-                Iterator iterator1 = chunk.getEntitySlices()[j].iterator();
 
-                while (iterator1.hasNext()) {
-                    Entity entity = (Entity) iterator1.next();
+                for (Entity entity : chunk.getEntitySlices()[j]) {
                     if (!entity.canSaveToDisk()) continue; // Purpur
                     final EntityTypes<?> entityType = entity.getEntityType();
                     final int saveLimit = worldserver.paperConfig.entityPerChunkSaveLimits.getOrDefault(entityType, -1);
@@ -578,8 +569,7 @@ public class ChunkRegionLoader {
             WorldGenStage.Features[] aworldgenstage_features = WorldGenStage.Features.values();
             int k = aworldgenstage_features.length;
 
-            for (int l = 0; l < k; ++l) {
-                WorldGenStage.Features worldgenstage_features = aworldgenstage_features[l];
+            for (WorldGenStage.Features worldgenstage_features : aworldgenstage_features) {
                 BitSet bitset = protochunk.a(worldgenstage_features);
 
                 if (bitset != null) {
@@ -621,10 +611,9 @@ public class ChunkRegionLoader {
 
         nbttagcompound1.set("PostProcessing", a(ichunkaccess.l()));
         nbttagcompound2 = new NBTTagCompound();
-        Iterator iterator2 = ichunkaccess.f().iterator();
 
-        while (iterator2.hasNext()) {
-            Entry<HeightMap.Type, HeightMap> entry = (Entry) iterator2.next();
+        for (Entry<HeightMap.Type, HeightMap> typeHeightMapEntry : ichunkaccess.f()) {
+            Entry<HeightMap.Type, HeightMap> entry = (Entry) typeHeightMapEntry;
 
             if (ichunkaccess.getChunkStatus().h().contains(entry.getKey())) {
                 nbttagcompound2.set(((HeightMap.Type) entry.getKey()).b(), new NBTTagLongArray(((HeightMap) entry.getValue()).a()));
@@ -719,20 +708,18 @@ public class ChunkRegionLoader {
     private static NBTTagCompound a(ChunkCoordIntPair chunkcoordintpair, Map<StructureGenerator<?>, StructureStart<?>> map, Map<StructureGenerator<?>, LongSet> map1) {
         NBTTagCompound nbttagcompound = new NBTTagCompound();
         NBTTagCompound nbttagcompound1 = new NBTTagCompound();
-        Iterator iterator = map.entrySet().iterator();
 
-        while (iterator.hasNext()) {
-            Entry<StructureGenerator<?>, StructureStart<?>> entry = (Entry) iterator.next();
+        for (Entry<StructureGenerator<?>, StructureStart<?>> structureGeneratorStructureStartEntry : map.entrySet()) {
+            Entry<StructureGenerator<?>, StructureStart<?>> entry = (Entry) structureGeneratorStructureStartEntry;
 
             nbttagcompound1.set(((StructureGenerator) entry.getKey()).i(), ((StructureStart) entry.getValue()).a(chunkcoordintpair.x, chunkcoordintpair.z));
         }
 
         nbttagcompound.set("Starts", nbttagcompound1);
         NBTTagCompound nbttagcompound2 = new NBTTagCompound();
-        Iterator iterator1 = map1.entrySet().iterator();
 
-        while (iterator1.hasNext()) {
-            Entry<StructureGenerator<?>, LongSet> entry1 = (Entry) iterator1.next();
+        for (Entry<StructureGenerator<?>, LongSet> structureGeneratorLongSetEntry : map1.entrySet()) {
+            Entry<StructureGenerator<?>, LongSet> entry1 = (Entry) structureGeneratorLongSetEntry;
 
             nbttagcompound2.set(((StructureGenerator) entry1.getKey()).i(), new NBTTagLongArray((LongSet) entry1.getValue()));
         }
@@ -744,10 +731,8 @@ public class ChunkRegionLoader {
     private static Map<StructureGenerator<?>, StructureStart<?>> a(DefinedStructureManager definedstructuremanager, NBTTagCompound nbttagcompound, long i) {
         Map<StructureGenerator<?>, StructureStart<?>> map = Maps.newHashMap();
         NBTTagCompound nbttagcompound1 = nbttagcompound.getCompound("Starts");
-        Iterator iterator = nbttagcompound1.getKeys().iterator();
 
-        while (iterator.hasNext()) {
-            String s = (String) iterator.next();
+        for (String s : nbttagcompound1.getKeys()) {
             String s1 = s.toLowerCase(Locale.ROOT);
             StructureGenerator<?> structuregenerator = (StructureGenerator) StructureGenerator.a.get(s1);
 
@@ -768,11 +753,8 @@ public class ChunkRegionLoader {
     private static Map<StructureGenerator<?>, LongSet> a(ChunkCoordIntPair chunkcoordintpair, NBTTagCompound nbttagcompound) {
         Map<StructureGenerator<?>, LongSet> map = Maps.newHashMap();
         NBTTagCompound nbttagcompound1 = nbttagcompound.getCompound("References");
-        Iterator iterator = nbttagcompound1.getKeys().iterator();
-
-        while (iterator.hasNext()) {
-            String s = (String) iterator.next();
 
+        for (String s : nbttagcompound1.getKeys()) {
             map.put(StructureGenerator.a.get(s.toLowerCase(Locale.ROOT)), new LongOpenHashSet(Arrays.stream(nbttagcompound1.getLongArray(s)).filter((i) -> {
                 ChunkCoordIntPair chunkcoordintpair1 = new ChunkCoordIntPair(i);
 
diff --git a/src/main/java/net/minecraft/server/CombatTracker.java b/src/main/java/net/minecraft/server/CombatTracker.java
index a8054a599e3eb502e7bbce903b5683987f95fb66..8172baf8a73d8185819e52c52691f00ec7ae68af 100644
--- a/src/main/java/net/minecraft/server/CombatTracker.java
+++ b/src/main/java/net/minecraft/server/CombatTracker.java
@@ -121,11 +121,8 @@ public class CombatTracker {
         EntityHuman entityhuman = null;
         float f = 0.0F;
         float f1 = 0.0F;
-        Iterator iterator = this.a.iterator();
-
-        while (iterator.hasNext()) {
-            CombatEntry combatentry = (CombatEntry) iterator.next();
 
+        for (CombatEntry combatentry : this.a) {
             if (combatentry.a().getEntity() instanceof EntityHuman && (entityhuman == null || combatentry.c() > f1)) {
                 f1 = combatentry.c();
                 entityhuman = (EntityHuman) combatentry.a().getEntity();
diff --git a/src/main/java/net/minecraft/server/CommandDifficulty.java b/src/main/java/net/minecraft/server/CommandDifficulty.java
index 9efc743e028650ccc9cda5a2c9deb1836253b91d..38fbfe97468563840b21539c03c5bfcf76b822e1 100644
--- a/src/main/java/net/minecraft/server/CommandDifficulty.java
+++ b/src/main/java/net/minecraft/server/CommandDifficulty.java
@@ -15,9 +15,7 @@ public class CommandDifficulty {
         EnumDifficulty[] aenumdifficulty = EnumDifficulty.values();
         int i = aenumdifficulty.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumDifficulty enumdifficulty = aenumdifficulty[j];
-
+        for (EnumDifficulty enumdifficulty : aenumdifficulty) {
             literalargumentbuilder.then(CommandDispatcher.a(enumdifficulty.c()).executes((commandcontext) -> {
                 return a((CommandListenerWrapper) commandcontext.getSource(), enumdifficulty);
             }));
diff --git a/src/main/java/net/minecraft/server/CommandDispatcher.java b/src/main/java/net/minecraft/server/CommandDispatcher.java
index bbd17231a4f7ad0ddde6eb5e589a6c403366cc36..c828963401151daf879728c2234e292fd358de39 100644
--- a/src/main/java/net/minecraft/server/CommandDispatcher.java
+++ b/src/main/java/net/minecraft/server/CommandDispatcher.java
@@ -299,11 +299,10 @@ public class CommandDispatcher {
     }
 
     private void a(CommandNode<CommandListenerWrapper> commandnode, CommandNode<ICompletionProvider> commandnode1, CommandListenerWrapper commandlistenerwrapper, Map<CommandNode<CommandListenerWrapper>, CommandNode<ICompletionProvider>> map) {
-        Iterator iterator = commandnode.getChildren().iterator();
 
-        while (iterator.hasNext()) {
-            CommandNode<CommandListenerWrapper> commandnode2 = (CommandNode) iterator.next();
-            if ( !org.spigotmc.SpigotConfig.sendNamespaced && commandnode2.getName().contains( ":" ) ) continue; // Spigot
+        for (CommandNode<CommandListenerWrapper> commandListenerWrapperCommandNode : commandnode.getChildren()) {
+            CommandNode<CommandListenerWrapper> commandnode2 = (CommandNode) commandListenerWrapperCommandNode;
+            if (!org.spigotmc.SpigotConfig.sendNamespaced && commandnode2.getName().contains(":")) continue; // Spigot
 
             if (commandnode2.canUse(commandlistenerwrapper)) {
                 ArgumentBuilder argumentbuilder = commandnode2.createBuilder(); // CraftBukkit - decompile error
diff --git a/src/main/java/net/minecraft/server/CommandEffect.java b/src/main/java/net/minecraft/server/CommandEffect.java
index ee1e642b22736b2b9b9f59cc7f2c3e9edc98796b..e50197edf921f32f175088231746d9c4bdda8ffb 100644
--- a/src/main/java/net/minecraft/server/CommandEffect.java
+++ b/src/main/java/net/minecraft/server/CommandEffect.java
@@ -54,11 +54,7 @@ public class CommandEffect {
             k = 600;
         }
 
-        Iterator iterator = collection.iterator();
-
-        while (iterator.hasNext()) {
-            Entity entity = (Entity) iterator.next();
-
+        for (Entity entity : collection) {
             if (entity instanceof EntityLiving) {
                 MobEffect mobeffect = new MobEffect(mobeffectlist, k, i, false, flag);
 
@@ -83,11 +79,8 @@ public class CommandEffect {
 
     private static int a(CommandListenerWrapper commandlistenerwrapper, Collection<? extends Entity> collection) throws CommandSyntaxException {
         int i = 0;
-        Iterator iterator = collection.iterator();
-
-        while (iterator.hasNext()) {
-            Entity entity = (Entity) iterator.next();
 
+        for (Entity entity : collection) {
             if (entity instanceof EntityLiving && ((EntityLiving) entity).removeAllEffects(org.bukkit.event.entity.EntityPotionEffectEvent.Cause.COMMAND)) { // CraftBukkit
                 ++i;
             }
@@ -108,11 +101,8 @@ public class CommandEffect {
 
     private static int a(CommandListenerWrapper commandlistenerwrapper, Collection<? extends Entity> collection, MobEffectList mobeffectlist) throws CommandSyntaxException {
         int i = 0;
-        Iterator iterator = collection.iterator();
-
-        while (iterator.hasNext()) {
-            Entity entity = (Entity) iterator.next();
 
+        for (Entity entity : collection) {
             if (entity instanceof EntityLiving && ((EntityLiving) entity).removeEffect(mobeffectlist, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.COMMAND)) { // CraftBukkit
                 ++i;
             }
diff --git a/src/main/java/net/minecraft/server/CommandGamemode.java b/src/main/java/net/minecraft/server/CommandGamemode.java
index 8400fa356dd2c5a76ac7741d114bf066af8043c5..f0e2d41d2661fc72b126c14d97758e063daf573d 100644
--- a/src/main/java/net/minecraft/server/CommandGamemode.java
+++ b/src/main/java/net/minecraft/server/CommandGamemode.java
@@ -16,9 +16,7 @@ public class CommandGamemode {
         EnumGamemode[] aenumgamemode = EnumGamemode.values();
         int i = aenumgamemode.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumGamemode enumgamemode = aenumgamemode[j];
-
+        for (EnumGamemode enumgamemode : aenumgamemode) {
             if (enumgamemode != EnumGamemode.NOT_SET) {
                 literalargumentbuilder.then(((LiteralArgumentBuilder) CommandDispatcher.a(enumgamemode.b()).executes((commandcontext) -> {
                     return a(commandcontext, (Collection) Collections.singleton(((CommandListenerWrapper) commandcontext.getSource()).h()), enumgamemode);
@@ -48,11 +46,8 @@ public class CommandGamemode {
 
     private static int a(CommandContext<CommandListenerWrapper> commandcontext, Collection<EntityPlayer> collection, EnumGamemode enumgamemode) {
         int i = 0;
-        Iterator iterator = collection.iterator();
-
-        while (iterator.hasNext()) {
-            EntityPlayer entityplayer = (EntityPlayer) iterator.next();
 
+        for (EntityPlayer entityplayer : collection) {
             if (entityplayer.playerInteractManager.getGameMode() != enumgamemode) {
                 entityplayer.a(enumgamemode);
                 // CraftBukkit start - handle event cancelling the change
diff --git a/src/main/java/net/minecraft/server/CommandGive.java b/src/main/java/net/minecraft/server/CommandGive.java
index 7bf90f27fdc48440ef229cca0e100d2c5c0ebef7..6537073d6c74d34298d5c987287a1e2fc3384cfd 100644
--- a/src/main/java/net/minecraft/server/CommandGive.java
+++ b/src/main/java/net/minecraft/server/CommandGive.java
@@ -21,10 +21,8 @@ public class CommandGive {
     }
 
     private static int a(CommandListenerWrapper commandlistenerwrapper, ArgumentPredicateItemStack argumentpredicateitemstack, Collection<EntityPlayer> collection, int i) throws CommandSyntaxException {
-        Iterator iterator = collection.iterator();
 
-        while (iterator.hasNext()) {
-            EntityPlayer entityplayer = (EntityPlayer) iterator.next();
+        for (EntityPlayer entityplayer : collection) {
             int j = i;
 
             while (j > 0) {
@@ -35,7 +33,8 @@ public class CommandGive {
                 boolean flag = entityplayer.inventory.pickup(itemstack);
                 EntityItem entityitem;
 
-                if (net.pl3x.purpur.PurpurConfig.disableGiveCommandDrops) continue; // Purpur - add config option for toggling give command dropping
+                if (net.pl3x.purpur.PurpurConfig.disableGiveCommandDrops)
+                    continue; // Purpur - add config option for toggling give command dropping
                 if (flag && itemstack.isEmpty()) {
                     itemstack.setCount(1);
                     entityitem = entityplayer.drop(itemstack, false);
diff --git a/src/main/java/net/minecraft/server/CommandListenerWrapper.java b/src/main/java/net/minecraft/server/CommandListenerWrapper.java
index 8a605b88584a574d5814e97d83c63661b56cf753..24296cc72a5dd1a23c66b613d7103268f68f0d8b 100644
--- a/src/main/java/net/minecraft/server/CommandListenerWrapper.java
+++ b/src/main/java/net/minecraft/server/CommandListenerWrapper.java
@@ -226,11 +226,8 @@ public class CommandListenerWrapper implements ICompletionProvider, com.destroys
         IChatMutableComponent ichatmutablecomponent = (new ChatMessage("chat.type.admin", new Object[]{this.getScoreboardDisplayName(), ichatbasecomponent})).a(new EnumChatFormat[]{EnumChatFormat.GRAY, EnumChatFormat.ITALIC});
 
         if (this.i.getGameRules().getBoolean(GameRules.SEND_COMMAND_FEEDBACK)) {
-            Iterator iterator = this.i.getPlayerList().getPlayers().iterator();
-
-            while (iterator.hasNext()) {
-                EntityPlayer entityplayer = (EntityPlayer) iterator.next();
 
+            for (EntityPlayer entityplayer : this.i.getPlayerList().getPlayers()) {
                 if (entityplayer != this.base && entityplayer.getBukkitEntity().hasPermission("minecraft.admin.command_feedback")) { // CraftBukkit
                     entityplayer.sendMessage(ichatmutablecomponent, SystemUtils.b);
                 }
diff --git a/src/main/java/net/minecraft/server/CommandSpreadPlayers.java b/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
index c9f4b69874e693c8e5c3346f09db7b5014dcfb63..a088ca211d1b7404dadb12fdd14f5fc92bc171d7 100644
--- a/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
+++ b/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
@@ -53,11 +53,8 @@ public class CommandSpreadPlayers {
 
     private static int a(Collection<? extends Entity> collection) {
         Set<ScoreboardTeamBase> set = Sets.newHashSet();
-        Iterator iterator = collection.iterator();
-
-        while (iterator.hasNext()) {
-            Entity entity = (Entity) iterator.next();
 
+        for (Entity entity : collection) {
             if (entity instanceof EntityHuman) {
                 set.add(entity.getScoreboardTeam());
             } else {
diff --git a/src/main/java/net/minecraft/server/CommandTeleport.java b/src/main/java/net/minecraft/server/CommandTeleport.java
index 57a23dd7a1196402ddc58e7491ac9ada97f402a4..ceabe4ff787726887eccb87a635b5c4403cf78cb 100644
--- a/src/main/java/net/minecraft/server/CommandTeleport.java
+++ b/src/main/java/net/minecraft/server/CommandTeleport.java
@@ -50,11 +50,8 @@ public class CommandTeleport {
     }
 
     private static int a(CommandListenerWrapper commandlistenerwrapper, Collection<? extends Entity> collection, Entity entity) throws CommandSyntaxException {
-        Iterator iterator = collection.iterator();
-
-        while (iterator.hasNext()) {
-            Entity entity1 = (Entity) iterator.next();
 
+        for (Entity entity1 : collection) {
             a(commandlistenerwrapper, entity1, (WorldServer) entity.world, entity.locX(), entity.locY(), entity.locZ(), EnumSet.noneOf(PacketPlayOutPosition.EnumPlayerTeleportFlags.class), entity.yaw, entity.pitch, (CommandTeleport.a) null);
         }
 
@@ -97,11 +94,7 @@ public class CommandTeleport {
             }
         }
 
-        Iterator iterator = collection.iterator();
-
-        while (iterator.hasNext()) {
-            Entity entity = (Entity) iterator.next();
-
+        for (Entity entity : collection) {
             if (ivectorposition1 == null) {
                 a(commandlistenerwrapper, entity, worldserver, vec3d.x, vec3d.y, vec3d.z, set, entity.yaw, entity.pitch, commandteleport_a);
             } else {
diff --git a/src/main/java/net/minecraft/server/CommandTime.java b/src/main/java/net/minecraft/server/CommandTime.java
index b484a0e9259819962c3b4c2dc79fe20484da2e70..3a770249ff9f02ecb5b957ea4c699273b36c8686 100644
--- a/src/main/java/net/minecraft/server/CommandTime.java
+++ b/src/main/java/net/minecraft/server/CommandTime.java
@@ -46,11 +46,8 @@ public class CommandTime {
     }
 
     public static int a(CommandListenerWrapper commandlistenerwrapper, int i) {
-        Iterator iterator = commandlistenerwrapper.getServer().getWorlds().iterator();
-
-        while (iterator.hasNext()) {
-            WorldServer worldserver = (WorldServer) iterator.next();
 
+        for (WorldServer worldserver : commandlistenerwrapper.getServer().getWorlds()) {
             // CraftBukkit start
             TimeSkipEvent event = new TimeSkipEvent(worldserver.getWorld(), TimeSkipEvent.SkipReason.COMMAND, i - worldserver.getDayTime());
             Bukkit.getPluginManager().callEvent(event);
@@ -65,11 +62,8 @@ public class CommandTime {
     }
 
     public static int b(CommandListenerWrapper commandlistenerwrapper, int i) {
-        Iterator iterator = commandlistenerwrapper.getServer().getWorlds().iterator();
-
-        while (iterator.hasNext()) {
-            WorldServer worldserver = (WorldServer) iterator.next();
 
+        for (WorldServer worldserver : commandlistenerwrapper.getServer().getWorlds()) {
             // CraftBukkit start
             TimeSkipEvent event = new TimeSkipEvent(worldserver.getWorld(), TimeSkipEvent.SkipReason.COMMAND, i);
             Bukkit.getPluginManager().callEvent(event);
diff --git a/src/main/java/net/minecraft/server/Container.java b/src/main/java/net/minecraft/server/Container.java
index a5c92b2b7fe42b81e7feebf8969a08bd7d08e0e6..1eb75f24c76934cea110e5d67d28c93639b1bc77 100644
--- a/src/main/java/net/minecraft/server/Container.java
+++ b/src/main/java/net/minecraft/server/Container.java
@@ -124,8 +124,8 @@ public abstract class Container {
     public NonNullList<ItemStack> b() {
         NonNullList<ItemStack> nonnulllist = NonNullList.a();
 
-        for (int i = 0; i < this.slots.size(); ++i) {
-            nonnulllist.add(((Slot) this.slots.get(i)).getItem());
+        for (Slot slot : this.slots) {
+            nonnulllist.add(((Slot) slot).getItem());
         }
 
         return nonnulllist;
@@ -143,11 +143,8 @@ public abstract class Container {
                 ItemStack itemstack2 = itemstack.cloneItemStack();
 
                 this.items.set(i, itemstack2);
-                Iterator iterator = this.listeners.iterator();
-
-                while (iterator.hasNext()) {
-                    ICrafting icrafting = (ICrafting) iterator.next();
 
+                for (ICrafting icrafting : this.listeners) {
                     icrafting.a(this, i, itemstack2);
                 }
             }
@@ -157,11 +154,8 @@ public abstract class Container {
             ContainerProperty containerproperty = (ContainerProperty) this.d.get(i);
 
             if (containerproperty.c()) {
-                Iterator iterator1 = this.listeners.iterator();
-
-                while (iterator1.hasNext()) {
-                    ICrafting icrafting1 = (ICrafting) iterator1.next();
 
+                for (ICrafting icrafting1 : this.listeners) {
                     icrafting1.setContainerData(this, i, containerproperty.get());
                 }
             }
diff --git a/src/main/java/net/minecraft/server/ContainerAnvil.java b/src/main/java/net/minecraft/server/ContainerAnvil.java
index 02924766a4c655f149b58bf1ded8e0610f8900a3..6dae7714411d5243d256040e7ddde059709ac38d 100644
--- a/src/main/java/net/minecraft/server/ContainerAnvil.java
+++ b/src/main/java/net/minecraft/server/ContainerAnvil.java
@@ -177,11 +177,8 @@ public class ContainerAnvil extends ContainerAnvilAbstract {
                     Map<Enchantment, Integer> map1 = EnchantmentManager.a(itemstack2);
                     boolean flag1 = false;
                     boolean flag2 = false;
-                    Iterator iterator = map1.keySet().iterator();
-
-                    while (iterator.hasNext()) {
-                        Enchantment enchantment = (Enchantment) iterator.next();
 
+                    for (Enchantment enchantment : map1.keySet()) {
                         if (enchantment != null) {
                             int l1 = (Integer) map.getOrDefault(enchantment, 0);
                             int i2 = (Integer) map1.get(enchantment);
@@ -193,11 +190,7 @@ public class ContainerAnvil extends ContainerAnvilAbstract {
                                 flag3 = true;
                             }
 
-                            Iterator iterator1 = map.keySet().iterator();
-
-                            while (iterator1.hasNext()) {
-                                Enchantment enchantment1 = (Enchantment) iterator1.next();
-
+                            for (Enchantment enchantment1 : map.keySet()) {
                                 if (enchantment1 != enchantment && !enchantment.isCompatible(enchantment1)) {
                                     flag3 = canDoUnsafeEnchants; // Purpur
                                     ++i;
diff --git a/src/main/java/net/minecraft/server/ContainerGrindstone.java b/src/main/java/net/minecraft/server/ContainerGrindstone.java
index 99e342038172d7e74a45789bd4b58d4660c775d3..44ebe260f4803af2195b3ca4e2482391a79ec074 100644
--- a/src/main/java/net/minecraft/server/ContainerGrindstone.java
+++ b/src/main/java/net/minecraft/server/ContainerGrindstone.java
@@ -109,10 +109,9 @@ public class ContainerGrindstone extends Container {
             private int e(ItemStack itemstack) {
                 int j = 0;
                 Map<Enchantment, Integer> map = EnchantmentManager.a(itemstack);
-                Iterator iterator = map.entrySet().iterator();
 
-                while (iterator.hasNext()) {
-                    Entry<Enchantment, Integer> entry = (Entry) iterator.next();
+                for (Entry<Enchantment, Integer> enchantmentIntegerEntry : map.entrySet()) {
+                    Entry<Enchantment, Integer> entry = (Entry) enchantmentIntegerEntry;
                     Enchantment enchantment = (Enchantment) entry.getKey();
                     Integer integer = (Integer) entry.getValue();
 
@@ -210,10 +209,9 @@ public class ContainerGrindstone extends Container {
     private ItemStack b(ItemStack itemstack, ItemStack itemstack1) {
         ItemStack itemstack2 = itemstack.cloneItemStack();
         Map<Enchantment, Integer> map = EnchantmentManager.a(itemstack1);
-        Iterator iterator = map.entrySet().iterator();
 
-        while (iterator.hasNext()) {
-            Entry<Enchantment, Integer> entry = (Entry) iterator.next();
+        for (Entry<Enchantment, Integer> enchantmentIntegerEntry : map.entrySet()) {
+            Entry<Enchantment, Integer> entry = (Entry) enchantmentIntegerEntry;
             Enchantment enchantment = (Enchantment) entry.getKey();
 
             if (!enchantment.c() || EnchantmentManager.getEnchantmentLevel(enchantment, itemstack2) == 0) {
diff --git a/src/main/java/net/minecraft/server/CraftingManager.java b/src/main/java/net/minecraft/server/CraftingManager.java
index 6f3754d88e6d98fce5859fd2d58a9fc2e40f604a..2c6dd4744500088b3654948b950cd629b3b85e44 100644
--- a/src/main/java/net/minecraft/server/CraftingManager.java
+++ b/src/main/java/net/minecraft/server/CraftingManager.java
@@ -50,10 +50,9 @@ public class CraftingManager extends ResourceDataJson {
             map1.put(recipeType, new Object2ObjectLinkedOpenHashMap<>());
         }
         // CraftBukkit end
-        Iterator iterator = map.entrySet().iterator();
 
-        while (iterator.hasNext()) {
-            Entry<MinecraftKey, JsonElement> entry = (Entry) iterator.next();
+        for (Entry<MinecraftKey, JsonElement> minecraftKeyJsonElementEntry : map.entrySet()) {
+            Entry<MinecraftKey, JsonElement> entry = (Entry) minecraftKeyJsonElementEntry;
             MinecraftKey minecraftkey = (MinecraftKey) entry.getKey();
 
             try {
diff --git a/src/main/java/net/minecraft/server/CrashReport.java b/src/main/java/net/minecraft/server/CrashReport.java
index 2f8ec64c26f5ed239b4dd9f9532c402d7081f9ed..1ef5091e2689acf9944860378281bb9e11fa9c49 100644
--- a/src/main/java/net/minecraft/server/CrashReport.java
+++ b/src/main/java/net/minecraft/server/CrashReport.java
@@ -93,9 +93,7 @@ public class CrashReport {
             StackTraceElement[] astacktraceelement = this.h;
             int i = astacktraceelement.length;
 
-            for (int j = 0; j < i; ++j) {
-                StackTraceElement stacktraceelement = astacktraceelement[j];
-
+            for (StackTraceElement stacktraceelement : astacktraceelement) {
                 stringbuilder.append("\t").append("at ").append(stacktraceelement);
                 stringbuilder.append("\n");
             }
@@ -103,11 +101,7 @@ public class CrashReport {
             stringbuilder.append("\n");
         }
 
-        Iterator iterator = this.e.iterator();
-
-        while (iterator.hasNext()) {
-            CrashReportSystemDetails crashreportsystemdetails = (CrashReportSystemDetails) iterator.next();
-
+        for (CrashReportSystemDetails crashreportsystemdetails : this.e) {
             crashreportsystemdetails.a(stringbuilder);
             stringbuilder.append("\n\n");
         }
diff --git a/src/main/java/net/minecraft/server/CustomFunctionData.java b/src/main/java/net/minecraft/server/CustomFunctionData.java
index 2a48d85f0490991eb323ef550cb6148d6387acaf..d8907b4d7eb482f974e71d88098d62799ec3c570 100644
--- a/src/main/java/net/minecraft/server/CustomFunctionData.java
+++ b/src/main/java/net/minecraft/server/CustomFunctionData.java
@@ -46,11 +46,8 @@ public class CustomFunctionData {
 
     private void a(Collection<CustomFunction> collection, MinecraftKey minecraftkey) {
         this.server.getMethodProfiler().a(minecraftkey::toString);
-        Iterator iterator = collection.iterator();
-
-        while (iterator.hasNext()) {
-            CustomFunction customfunction = (CustomFunction) iterator.next();
 
+        for (CustomFunction customfunction : collection) {
             this.a(customfunction, this.e());
         }
 
diff --git a/src/main/java/net/minecraft/server/DataBits.java b/src/main/java/net/minecraft/server/DataBits.java
index f0c9009fb808ca664a7c3ebaeb8cfa8e2ba7b97e..08cab23aeb38925b1157ae1d0ab42b5b7bd14e2d 100644
--- a/src/main/java/net/minecraft/server/DataBits.java
+++ b/src/main/java/net/minecraft/server/DataBits.java
@@ -97,8 +97,8 @@ public class DataBits {
         long[] along = this.b;
         int j = along.length;
 
-        for (int k = 0; k < j; ++k) {
-            long l = along[k];
+        for (long value : along) {
+            long l = value;
 
             for (int i1 = 0; i1 < this.f; ++i1) {
                 intconsumer.accept((int) (l & this.d));
@@ -118,8 +118,8 @@ public class DataBits {
         long[] along = this.b;
         int j = along.length;
 
-        for (int k = 0; k < j; ++k) {
-            long l = along[k];
+        for (long value : along) {
+            long l = value;
 
             for (int i1 = 0; i1 < this.f; ++i1) {
                 consumer.accept(i, (int) (l & this.d));
diff --git a/src/main/java/net/minecraft/server/DataPaletteBlock.java b/src/main/java/net/minecraft/server/DataPaletteBlock.java
index 73163b417af7e522a4509bf9c1ab56d6499be622..fa6372417bfce09ae2a510b2ead0463a1b5bb7a9 100644
--- a/src/main/java/net/minecraft/server/DataPaletteBlock.java
+++ b/src/main/java/net/minecraft/server/DataPaletteBlock.java
@@ -79,8 +79,8 @@ public class DataPaletteBlock<T> implements DataPaletteExpandable<T> {
     // Paper start - Anti-Xray - Add predefined objects
     private void addPredefinedObjects() {
         if (this.predefinedObjects != null && this.getDataPalette() != this.getDataPaletteGlobal()) {
-            for (int i = 0; i < this.predefinedObjects.length; i++) {
-                this.getDataPalette().getOrCreateIdFor(this.predefinedObjects[i]);
+            for (T predefinedObject : this.predefinedObjects) {
+                this.getDataPalette().getOrCreateIdFor(predefinedObject);
             }
         }
     }
diff --git a/src/main/java/net/minecraft/server/DefinedStructure.java b/src/main/java/net/minecraft/server/DefinedStructure.java
index ef70d0689f84d34c8dd77d5e64335473925b838a..eb21dcef41f5c535466b704f0b38b4baf25116db 100644
--- a/src/main/java/net/minecraft/server/DefinedStructure.java
+++ b/src/main/java/net/minecraft/server/DefinedStructure.java
@@ -47,16 +47,14 @@ public class DefinedStructure {
             BlockPosition blockposition4 = new BlockPosition(Math.max(blockposition.getX(), blockposition2.getX()), Math.max(blockposition.getY(), blockposition2.getY()), Math.max(blockposition.getZ(), blockposition2.getZ()));
 
             this.c = blockposition1;
-            Iterator iterator = BlockPosition.a(blockposition3, blockposition4).iterator();
 
-            while (iterator.hasNext()) {
-                BlockPosition blockposition5 = (BlockPosition) iterator.next();
+            for (BlockPosition blockposition5 : BlockPosition.a(blockposition3, blockposition4)) {
                 BlockPosition blockposition6 = blockposition5.b(blockposition3);
                 IBlockData iblockdata = world.getType(blockposition5);
 
                 if (block == null || block != iblockdata.getBlock()) {
                     TileEntity tileentity = world.getTileEntity(blockposition5);
-                    DefinedStructure.BlockInfo definedstructure_blockinfo;
+                    BlockInfo definedstructure_blockinfo;
 
                     if (tileentity != null) {
                         NBTTagCompound nbttagcompound = tileentity.save(new NBTTagCompound());
@@ -64,9 +62,9 @@ public class DefinedStructure {
                         nbttagcompound.remove("x");
                         nbttagcompound.remove("y");
                         nbttagcompound.remove("z");
-                        definedstructure_blockinfo = new DefinedStructure.BlockInfo(blockposition6, iblockdata, nbttagcompound.clone());
+                        definedstructure_blockinfo = new BlockInfo(blockposition6, iblockdata, nbttagcompound.clone());
                     } else {
-                        definedstructure_blockinfo = new DefinedStructure.BlockInfo(blockposition6, iblockdata, (NBTTagCompound) null);
+                        definedstructure_blockinfo = new BlockInfo(blockposition6, iblockdata, (NBTTagCompound) null);
                     }
 
                     a(definedstructure_blockinfo, (List) list, (List) list1, (List) list2);
@@ -306,10 +304,9 @@ public class DefinedStructure {
                         int i2 = j;
                         int j2 = k;
                         int k2 = l;
-                        Iterator iterator2 = list2.iterator();
 
-                        while (iterator2.hasNext()) {
-                            Pair<BlockPosition, NBTTagCompound> pair = (Pair) iterator2.next();
+                        for (Pair<BlockPosition, NBTTagCompound> blockPositionNBTTagCompoundPair : list2) {
+                            Pair<BlockPosition, NBTTagCompound> pair = (Pair) blockPositionNBTTagCompoundPair;
                             BlockPosition blockposition6 = (BlockPosition) pair.getFirst();
 
                             voxelshapebitset.a(blockposition6.getX() - i2, blockposition6.getY() - j2, blockposition6.getZ() - k2, true, true);
@@ -378,12 +375,10 @@ public class DefinedStructure {
 
     public static List<DefinedStructure.BlockInfo> a(GeneratorAccess generatoraccess, BlockPosition blockposition, BlockPosition blockposition1, DefinedStructureInfo definedstructureinfo, List<DefinedStructure.BlockInfo> list) {
         List<DefinedStructure.BlockInfo> list1 = Lists.newArrayList();
-        Iterator iterator = list.iterator();
 
-        while (iterator.hasNext()) {
-            DefinedStructure.BlockInfo definedstructure_blockinfo = (DefinedStructure.BlockInfo) iterator.next();
+        for (BlockInfo definedstructure_blockinfo : list) {
             BlockPosition blockposition2 = a(definedstructureinfo, definedstructure_blockinfo.a).a((BaseBlockPosition) blockposition);
-            DefinedStructure.BlockInfo definedstructure_blockinfo1 = new DefinedStructure.BlockInfo(blockposition2, definedstructure_blockinfo.b, definedstructure_blockinfo.c != null ? definedstructure_blockinfo.c.clone() : null);
+            BlockInfo definedstructure_blockinfo1 = new BlockInfo(blockposition2, definedstructure_blockinfo.b, definedstructure_blockinfo.c != null ? definedstructure_blockinfo.c.clone() : null);
 
             for (Iterator iterator1 = definedstructureinfo.j().iterator(); definedstructure_blockinfo1 != null && iterator1.hasNext(); definedstructure_blockinfo1 = ((DefinedStructureProcessor) iterator1.next()).a(generatoraccess, blockposition, blockposition1, definedstructure_blockinfo, definedstructure_blockinfo1, definedstructureinfo)) {
                 ;
@@ -398,10 +393,8 @@ public class DefinedStructure {
     }
 
     private void a(WorldAccess worldaccess, BlockPosition blockposition, EnumBlockMirror enumblockmirror, EnumBlockRotation enumblockrotation, BlockPosition blockposition1, @Nullable StructureBoundingBox structureboundingbox, boolean flag) {
-        Iterator iterator = this.b.iterator();
 
-        while (iterator.hasNext()) {
-            DefinedStructure.EntityInfo definedstructure_entityinfo = (DefinedStructure.EntityInfo) iterator.next();
+        for (EntityInfo definedstructure_entityinfo : this.b) {
             BlockPosition blockposition2 = a(definedstructure_entityinfo.b, enumblockmirror, enumblockrotation, blockposition1).a((BaseBlockPosition) blockposition);
 
             if (structureboundingbox == null || structureboundingbox.b((BaseBlockPosition) blockposition2)) {
@@ -659,11 +652,8 @@ public class DefinedStructure {
                 while (iterator.hasNext()) {
                     DefinedStructure.b definedstructure_b2 = (DefinedStructure.b) iterator.next();
                     NBTTagList nbttaglist2 = new NBTTagList();
-                    Iterator iterator1 = definedstructure_b2.iterator();
-
-                    while (iterator1.hasNext()) {
-                        IBlockData iblockdata1 = (IBlockData) iterator1.next();
 
+                    for (IBlockData iblockdata1 : definedstructure_b2) {
                         nbttaglist2.add(GameProfileSerializer.a(iblockdata1));
                     }
 
diff --git a/src/main/java/net/minecraft/server/DispenseBehaviorShears.java b/src/main/java/net/minecraft/server/DispenseBehaviorShears.java
index 0c9c4f4cba461a2553da9a1bd43781249f952fbf..c08d9e7af8b1820e90b16a8fa2aec2fef4ebfaeb 100644
--- a/src/main/java/net/minecraft/server/DispenseBehaviorShears.java
+++ b/src/main/java/net/minecraft/server/DispenseBehaviorShears.java
@@ -71,11 +71,8 @@ public class DispenseBehaviorShears extends DispenseBehaviorMaybe {
 
     private static boolean b(WorldServer worldserver, BlockPosition blockposition, org.bukkit.block.Block bukkitBlock, CraftItemStack craftItem) { // CraftBukkit - add args
         List<EntityLiving> list = worldserver.a(EntityLiving.class, new AxisAlignedBB(blockposition), IEntitySelector.g);
-        Iterator iterator = list.iterator();
-
-        while (iterator.hasNext()) {
-            EntityLiving entityliving = (EntityLiving) iterator.next();
 
+        for (EntityLiving entityliving : list) {
             if (entityliving instanceof IShearable) {
                 IShearable ishearable = (IShearable) entityliving;
 
diff --git a/src/main/java/net/minecraft/server/Enchantment.java b/src/main/java/net/minecraft/server/Enchantment.java
index 8e94a62916574bc2e5e93c5cf2e5ea7950d61e2e..472b5a65e9af57d5d7a601b587f3d944b015e23e 100644
--- a/src/main/java/net/minecraft/server/Enchantment.java
+++ b/src/main/java/net/minecraft/server/Enchantment.java
@@ -23,8 +23,7 @@ public abstract class Enchantment {
         EnumItemSlot[] aenumitemslot = this.a;
         int i = aenumitemslot.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumItemSlot enumitemslot = aenumitemslot[j];
+        for (EnumItemSlot enumitemslot : aenumitemslot) {
             ItemStack itemstack = entityliving.getEquipment(enumitemslot);
 
             if (!itemstack.isEmpty()) {
diff --git a/src/main/java/net/minecraft/server/EnchantmentFrostWalker.java b/src/main/java/net/minecraft/server/EnchantmentFrostWalker.java
index d35f7a6f8ceb11be4e182bdf4ab2fb9b54d3c395..3225a94a1fc1b4529dc683c17bdca89a9c514d03 100644
--- a/src/main/java/net/minecraft/server/EnchantmentFrostWalker.java
+++ b/src/main/java/net/minecraft/server/EnchantmentFrostWalker.java
@@ -33,11 +33,8 @@ public class EnchantmentFrostWalker extends Enchantment {
             IBlockData iblockdata = Blocks.FROSTED_ICE.getBlockData();
             float f = (float) Math.min(16, 2 + i);
             BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition();
-            Iterator iterator = BlockPosition.a(blockposition.a((double) (-f), -1.0D, (double) (-f)), blockposition.a((double) f, -1.0D, (double) f)).iterator();
-
-            while (iterator.hasNext()) {
-                BlockPosition blockposition1 = (BlockPosition) iterator.next();
 
+            for (BlockPosition blockposition1 : BlockPosition.a(blockposition.a((double) (-f), -1.0D, (double) (-f)), blockposition.a((double) f, -1.0D, (double) f))) {
                 if (blockposition1.a((IPosition) entityliving.getPositionVector(), (double) f)) {
                     blockposition_mutableblockposition.d(blockposition1.getX(), blockposition1.getY() + 1, blockposition1.getZ());
                     IBlockData iblockdata1 = world.getType(blockposition_mutableblockposition);
diff --git a/src/main/java/net/minecraft/server/EnchantmentManager.java b/src/main/java/net/minecraft/server/EnchantmentManager.java
index 33e2dc3a1003fe95fa71999fc24df84131238a6a..8c8c945f6e19a86ae405b9a731e0c94fc8078bd5 100644
--- a/src/main/java/net/minecraft/server/EnchantmentManager.java
+++ b/src/main/java/net/minecraft/server/EnchantmentManager.java
@@ -57,10 +57,9 @@ public class EnchantmentManager {
 
     public static void a(Map<Enchantment, Integer> map, ItemStack itemstack) {
         NBTTagList nbttaglist = new NBTTagList();
-        Iterator iterator = map.entrySet().iterator();
 
-        while (iterator.hasNext()) {
-            Entry<Enchantment, Integer> entry = (Entry) iterator.next();
+        for (Entry<Enchantment, Integer> enchantmentIntegerEntry : map.entrySet()) {
+            Entry<Enchantment, Integer> entry = (Entry) enchantmentIntegerEntry;
             Enchantment enchantment = (Enchantment) entry.getKey();
 
             if (enchantment != null) {
@@ -101,11 +100,8 @@ public class EnchantmentManager {
     }
 
     private static void a(EnchantmentManager.a enchantmentmanager_a, Iterable<ItemStack> iterable) {
-        Iterator iterator = iterable.iterator();
-
-        while (iterator.hasNext()) {
-            ItemStack itemstack = (ItemStack) iterator.next();
 
+        for (ItemStack itemstack : iterable) {
             a(enchantmentmanager_a, itemstack);
         }
 
@@ -172,10 +168,8 @@ public class EnchantmentManager {
             return 0;
         } else {
             int i = 0;
-            Iterator iterator = iterable.iterator();
 
-            while (iterator.hasNext()) {
-                ItemStack itemstack = (ItemStack) iterator.next();
+            for (ItemStack itemstack : iterable) {
                 int j = getEnchantmentLevel(enchantment, itemstack);
 
                 if (j > i) {
@@ -289,10 +283,9 @@ public class EnchantmentManager {
             return null;
         } else {
             List<Entry<EnumItemSlot, ItemStack>> list = Lists.newArrayList();
-            Iterator iterator = map.entrySet().iterator();
 
-            while (iterator.hasNext()) {
-                Entry<EnumItemSlot, ItemStack> entry = (Entry) iterator.next();
+            for (Entry<EnumItemSlot, ItemStack> enumItemSlotItemStackEntry : map.entrySet()) {
+                Entry<EnumItemSlot, ItemStack> entry = (Entry) enumItemSlotItemStackEntry;
                 ItemStack itemstack = (ItemStack) entry.getValue();
 
                 if (!itemstack.isEmpty() && getEnchantmentLevel(enchantment, itemstack) > 0 && predicate.test(itemstack)) {
@@ -329,11 +322,7 @@ public class EnchantmentManager {
             itemstack = new ItemStack(Items.ENCHANTED_BOOK);
         }
 
-        Iterator iterator = list.iterator();
-
-        while (iterator.hasNext()) {
-            WeightedRandomEnchant weightedrandomenchant = (WeightedRandomEnchant) iterator.next();
-
+        for (WeightedRandomEnchant weightedrandomenchant : list) {
             if (flag1) {
                 ItemEnchantedBook.a(itemstack, weightedrandomenchant);
             } else {
diff --git a/src/main/java/net/minecraft/server/EnderDragonBattle.java b/src/main/java/net/minecraft/server/EnderDragonBattle.java
index 0d8fba494ed11ad79201dfd1c7f3ad5b288ca0ca..138a562da65f515c5ef86a6629f12fe87d8557cf 100644
--- a/src/main/java/net/minecraft/server/EnderDragonBattle.java
+++ b/src/main/java/net/minecraft/server/EnderDragonBattle.java
@@ -94,11 +94,8 @@ public class EnderDragonBattle {
         }
 
         NBTTagList nbttaglist = new NBTTagList();
-        Iterator iterator = this.gateways.iterator();
-
-        while (iterator.hasNext()) {
-            int i = (Integer) iterator.next();
 
+        for (int i : this.gateways) {
             nbttaglist.add(NBTTagInt.a(i));
         }
 
@@ -257,11 +254,8 @@ public class EnderDragonBattle {
         for (i = -8; i <= 8; ++i) {
             for (j = -8; j <= 8; ++j) {
                 Chunk chunk = this.world.getChunkAt(i, j);
-                Iterator iterator = chunk.getTileEntities().values().iterator();
-
-                while (iterator.hasNext()) {
-                    TileEntity tileentity = (TileEntity) iterator.next();
 
+                for (TileEntity tileentity : chunk.getTileEntities().values()) {
                     if (tileentity instanceof TileEntityEnderPortal) {
                         ShapeDetector.ShapeDetectorCollection shapedetector_shapedetectorcollection = this.f.a(this.world, tileentity.getPosition());
 
@@ -318,11 +312,8 @@ public class EnderDragonBattle {
 
     private void l() {
         Set<EntityPlayer> set = Sets.newHashSet();
-        Iterator iterator = this.world.a(EnderDragonBattle.b).iterator();
-
-        while (iterator.hasNext()) {
-            EntityPlayer entityplayer = (EntityPlayer) iterator.next();
 
+        for (EntityPlayer entityplayer : this.world.a(EnderDragonBattle.b)) {
             this.bossBattle.addPlayer(entityplayer);
             set.add(entityplayer);
         }
@@ -330,11 +321,8 @@ public class EnderDragonBattle {
         Set<EntityPlayer> set1 = Sets.newHashSet(this.bossBattle.getPlayers());
 
         set1.removeAll(set);
-        Iterator iterator1 = set1.iterator();
-
-        while (iterator1.hasNext()) {
-            EntityPlayer entityplayer1 = (EntityPlayer) iterator1.next();
 
+        for (EntityPlayer entityplayer1 : set1) {
             this.bossBattle.removePlayer(entityplayer1);
         }
 
@@ -480,10 +468,8 @@ public class EnderDragonBattle {
 
             List<EntityEnderCrystal> list = Lists.newArrayList();
             BlockPosition blockposition1 = blockposition.up(1);
-            Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
-            while (iterator.hasNext()) {
-                EnumDirection enumdirection = (EnumDirection) iterator.next();
+            for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
                 List<EntityEnderCrystal> list1 = this.world.a(EntityEnderCrystal.class, new AxisAlignedBB(blockposition1.shift(enumdirection, 2)));
 
                 if (list1.isEmpty()) {
@@ -524,16 +510,11 @@ public class EnderDragonBattle {
     }
 
     public void resetCrystals() {
-        Iterator iterator = WorldGenEnder.a((GeneratorAccessSeed) this.world).iterator();
 
-        while (iterator.hasNext()) {
-            WorldGenEnder.Spike worldgenender_spike = (WorldGenEnder.Spike) iterator.next();
+        for (WorldGenEnder.Spike worldgenender_spike : WorldGenEnder.a((GeneratorAccessSeed) this.world)) {
             List<EntityEnderCrystal> list = this.world.a(EntityEnderCrystal.class, worldgenender_spike.f());
-            Iterator iterator1 = list.iterator();
-
-            while (iterator1.hasNext()) {
-                EntityEnderCrystal entityendercrystal = (EntityEnderCrystal) iterator1.next();
 
+            for (EntityEnderCrystal entityendercrystal : list) {
                 entityendercrystal.setInvulnerable(false);
                 entityendercrystal.setBeamTarget((BlockPosition) null);
             }
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 81658f91c96544ac46d7ae666a0de87673ba4ee4..1c11db82157e1459121335962e67122ae79798dd 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -924,8 +924,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
 
     // Tuinity start - optimise entity movement
     private static double performCollisionsX(AxisAlignedBB currentBoundingBox, double value, List<AxisAlignedBB> potentialCollisions) {
-        for (int i = 0, len = potentialCollisions.size(); i < len; ++i) {
-            AxisAlignedBB target = potentialCollisions.get(i);
+        for (AxisAlignedBB target : potentialCollisions) {
             value = AxisAlignedBB.collideX(target, currentBoundingBox, value);
         }
 
@@ -933,8 +932,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     private static double performCollisionsY(AxisAlignedBB currentBoundingBox, double value, List<AxisAlignedBB> potentialCollisions) {
-        for (int i = 0, len = potentialCollisions.size(); i < len; ++i) {
-            AxisAlignedBB target = potentialCollisions.get(i);
+        for (AxisAlignedBB target : potentialCollisions) {
             value = AxisAlignedBB.collideY(target, currentBoundingBox, value);
         }
 
@@ -942,8 +940,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     private static double performCollisionsZ(AxisAlignedBB currentBoundingBox, double value, List<AxisAlignedBB> potentialCollisions) {
-        for (int i = 0, len = potentialCollisions.size(); i < len; ++i) {
-            AxisAlignedBB target = potentialCollisions.get(i);
+        for (AxisAlignedBB target : potentialCollisions) {
             value = AxisAlignedBB.collideZ(target, currentBoundingBox, value);
         }
 
@@ -1322,11 +1319,8 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
 
     public boolean b(float f, float f1) {
         if (this.isVehicle()) {
-            Iterator iterator = this.getPassengers().iterator();
-
-            while (iterator.hasNext()) {
-                Entity entity = (Entity) iterator.next();
 
+            for (Entity entity : this.getPassengers()) {
                 entity.b(f, f1);
             }
         }
@@ -2744,9 +2738,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         EnumDirection[] aenumdirection = new EnumDirection[]{EnumDirection.NORTH, EnumDirection.SOUTH, EnumDirection.WEST, EnumDirection.EAST, EnumDirection.UP};
         int i = aenumdirection.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumDirection enumdirection1 = aenumdirection[j];
-
+        for (EnumDirection enumdirection1 : aenumdirection) {
             blockposition_mutableblockposition.a((BaseBlockPosition) blockposition, enumdirection1);
             if (!this.world.getBlockStateIfLoaded(blockposition_mutableblockposition).r(this.world, blockposition_mutableblockposition)) {
                 double d4 = vec3d.a(enumdirection1.n());
@@ -2780,11 +2772,8 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
 
     private static IChatBaseComponent b(IChatBaseComponent ichatbasecomponent) {
         IChatMutableComponent ichatmutablecomponent = ichatbasecomponent.g().setChatModifier(ichatbasecomponent.getChatModifier().setChatClickable((ChatClickable) null));
-        Iterator iterator = ichatbasecomponent.getSiblings().iterator();
-
-        while (iterator.hasNext()) {
-            IChatBaseComponent ichatbasecomponent1 = (IChatBaseComponent) iterator.next();
 
+        for (IChatBaseComponent ichatbasecomponent1 : ichatbasecomponent.getSiblings()) {
             ichatmutablecomponent.addSibling(b(ichatbasecomponent1));
         }
 
@@ -3153,11 +3142,9 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
             this.recursiveStream().forEach((entity) -> {
                 worldserver.chunkCheck(entity);
                 entity.az = true;
-                Iterator iterator = new java.util.ArrayList<>(entity.passengers).iterator(); // Tuinity - copy list to guard against CME
-
-                while (iterator.hasNext()) {
-                    Entity entity1 = (Entity) iterator.next();
+                // Tuinity - copy list to guard against CME
 
+                for (Entity entity1 : new java.util.ArrayList<>(entity.passengers)) {
                     entity.a(entity1, Entity::teleportAndSync);
                 }
 
@@ -3397,11 +3384,9 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
 
     public Collection<Entity> getAllPassengers() {
         Set<Entity> set = Sets.newHashSet();
-        Iterator iterator = this.passengers.iterator(); // Paper - do not copy list
-
-        while (iterator.hasNext()) {
-            Entity entity = (Entity) iterator.next();
+        // Paper - do not copy list
 
+        for (Entity entity : this.passengers) {
             set.add(entity);
             entity.a(false, set);
         }
diff --git a/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java b/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java
index 35fb12c23bf46d3211ae5756fd604196bdc16da5..f0265933509523086c333a441b741e9630653245 100644
--- a/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java
+++ b/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java
@@ -310,11 +310,8 @@ public class EntityAreaEffectCloud extends Entity {
                                     EntityLiving entityliving = ((CraftLivingEntity) entity).getHandle();
                                     // CraftBukkit end
                                     this.affectedEntities.put(entityliving, this.ticksLived + this.reapplicationDelay);
-                                    Iterator iterator3 = list.iterator();
-
-                                    while (iterator3.hasNext()) {
-                                        MobEffect mobeffect1 = (MobEffect) iterator3.next();
 
+                                    for (MobEffect mobeffect1 : list) {
                                         if (mobeffect1.getMobEffect().isInstant()) {
                                             mobeffect1.getMobEffect().applyInstantEffect(this, this.getSource(), entityliving, mobeffect1.getAmplifier(), 0.5D);
                                         } else {
@@ -450,11 +447,8 @@ public class EntityAreaEffectCloud extends Entity {
 
         if (!this.effects.isEmpty()) {
             NBTTagList nbttaglist = new NBTTagList();
-            Iterator iterator = this.effects.iterator();
-
-            while (iterator.hasNext()) {
-                MobEffect mobeffect = (MobEffect) iterator.next();
 
+            for (MobEffect mobeffect : this.effects) {
                 nbttaglist.add(mobeffect.a(new NBTTagCompound()));
             }
 
diff --git a/src/main/java/net/minecraft/server/EntityArmorStand.java b/src/main/java/net/minecraft/server/EntityArmorStand.java
index 74fda434ed7beb6612f46ed75fdccad59f394b60..850e8611728eb08f24809e83ab1548cfb8830891 100644
--- a/src/main/java/net/minecraft/server/EntityArmorStand.java
+++ b/src/main/java/net/minecraft/server/EntityArmorStand.java
@@ -341,8 +341,8 @@ public class EntityArmorStand extends EntityLiving {
         if (!world.paperConfig.armorStandEntityLookups) return; // Paper
         List<Entity> list = this.world.getEntities(this, this.getBoundingBox(), EntityArmorStand.br);
 
-        for (int i = 0; i < list.size(); ++i) {
-            Entity entity = (Entity) list.get(i);
+        for (Entity value : list) {
+            Entity entity = (Entity) value;
 
             if (this.h(entity) <= 0.2D) {
                 entity.collide(this);
diff --git a/src/main/java/net/minecraft/server/EntityArrow.java b/src/main/java/net/minecraft/server/EntityArrow.java
index ed662d59384a718a56149ea24f01115f62c30d91..ad4bf72acda4d82ebbff4c2a82402e284a55ad86 100644
--- a/src/main/java/net/minecraft/server/EntityArrow.java
+++ b/src/main/java/net/minecraft/server/EntityArrow.java
@@ -103,11 +103,8 @@ public abstract class EntityArrow extends IProjectile {
 
             if (!voxelshape.isEmpty()) {
                 vec3d1 = this.getPositionVector();
-                Iterator iterator = voxelshape.d().iterator();
-
-                while (iterator.hasNext()) {
-                    AxisAlignedBB axisalignedbb = (AxisAlignedBB) iterator.next();
 
+                for (AxisAlignedBB axisalignedbb : voxelshape.d()) {
                     if (axisalignedbb.a(blockposition).d(vec3d1)) {
                         this.inGround = true;
                         break;
diff --git a/src/main/java/net/minecraft/server/EntityBoat.java b/src/main/java/net/minecraft/server/EntityBoat.java
index fcb4936e78d56907b0e56d0aaf7f8361513d0a4e..1bcf7203b5c5340d6c0bba1920fd4c56ed1aa21e 100644
--- a/src/main/java/net/minecraft/server/EntityBoat.java
+++ b/src/main/java/net/minecraft/server/EntityBoat.java
@@ -337,8 +337,8 @@ public class EntityBoat extends Entity {
         if (!list.isEmpty()) {
             boolean flag = !this.world.isClientSide && !(this.getRidingPassenger() instanceof EntityHuman);
 
-            for (int j = 0; j < list.size(); ++j) {
-                Entity entity = (Entity) list.get(j);
+            for (Entity value : list) {
+                Entity entity = (Entity) value;
 
                 if (!entity.w(this)) {
                     if (flag && this.passengers.size() < 2 && !entity.isPassenger() && entity.getWidth() < this.getWidth() && entity instanceof EntityLiving && !(entity instanceof EntityWaterAnimal) && !(entity instanceof EntityHuman)) { // Paper - do not copy passenger list
@@ -927,9 +927,9 @@ public class EntityBoat extends Entity {
         public static EntityBoat.EnumBoatType a(String s) {
             EntityBoat.EnumBoatType[] aentityboat_enumboattype = values();
 
-            for (int i = 0; i < aentityboat_enumboattype.length; ++i) {
-                if (aentityboat_enumboattype[i].a().equals(s)) {
-                    return aentityboat_enumboattype[i];
+            for (EnumBoatType enumBoatType : aentityboat_enumboattype) {
+                if (enumBoatType.a().equals(s)) {
+                    return enumBoatType;
                 }
             }
 
diff --git a/src/main/java/net/minecraft/server/EntityCat.java b/src/main/java/net/minecraft/server/EntityCat.java
index 2128d8a9a6fe6bdea81881cfc8ab7b03f448576f..9c163a8cefbb8537e1730a43d32754e6de512bd6 100644
--- a/src/main/java/net/minecraft/server/EntityCat.java
+++ b/src/main/java/net/minecraft/server/EntityCat.java
@@ -529,11 +529,8 @@ public class EntityCat extends EntityTameableAnimal {
             LootTable loottable = this.a.world.getMinecraftServer().getLootTableRegistry().getLootTable(LootTables.ak);
             LootTableInfo.Builder loottableinfo_builder = (new LootTableInfo.Builder((WorldServer) this.a.world)).set(LootContextParameters.ORIGIN, this.a.getPositionVector()).set(LootContextParameters.THIS_ENTITY, this.a).a(random);
             List<ItemStack> list = loottable.populateLoot(loottableinfo_builder.build(LootContextParameterSets.GIFT));
-            Iterator iterator = list.iterator();
-
-            while (iterator.hasNext()) {
-                ItemStack itemstack = (ItemStack) iterator.next();
 
+            for (ItemStack itemstack : list) {
                 // CraftBukkit start
                 EntityItem entityitem = new EntityItem(this.a.world, (double) blockposition_mutableblockposition.getX() - (double) MathHelper.sin(this.a.aA * 0.017453292F), (double) blockposition_mutableblockposition.getY(), (double) blockposition_mutableblockposition.getZ() + (double) MathHelper.cos(this.a.aA * 0.017453292F), itemstack);
                 org.bukkit.event.entity.EntityDropItemEvent event = new org.bukkit.event.entity.EntityDropItemEvent(this.a.getBukkitEntity(), (org.bukkit.entity.Item) entityitem.getBukkitEntity());
diff --git a/src/main/java/net/minecraft/server/EntityCreeper.java b/src/main/java/net/minecraft/server/EntityCreeper.java
index 523988bcc0607198dfb73afca5932ed6dd82cca1..e1c788c6eb0678caa3c535e46be65f43e2af545e 100644
--- a/src/main/java/net/minecraft/server/EntityCreeper.java
+++ b/src/main/java/net/minecraft/server/EntityCreeper.java
@@ -320,11 +320,8 @@ public class EntityCreeper extends EntityMonster {
             entityareaeffectcloud.setWaitTime(10);
             entityareaeffectcloud.setDuration(entityareaeffectcloud.getDuration() / 2);
             entityareaeffectcloud.setRadiusPerTick(-entityareaeffectcloud.getRadius() / (float) entityareaeffectcloud.getDuration());
-            Iterator iterator = collection.iterator();
-
-            while (iterator.hasNext()) {
-                MobEffect mobeffect = (MobEffect) iterator.next();
 
+            for (MobEffect mobeffect : collection) {
                 entityareaeffectcloud.addEffect(new MobEffect(mobeffect));
             }
 
diff --git a/src/main/java/net/minecraft/server/EntityDragonFireball.java b/src/main/java/net/minecraft/server/EntityDragonFireball.java
index 9d2d5be5eedc60749e276434be9be6ab41f2289d..dbca3694e91f2d3d272f0daefa5b571902cd37c4 100644
--- a/src/main/java/net/minecraft/server/EntityDragonFireball.java
+++ b/src/main/java/net/minecraft/server/EntityDragonFireball.java
@@ -33,10 +33,8 @@ public class EntityDragonFireball extends EntityFireball {
                 entityareaeffectcloud.setRadiusPerTick((7.0F - entityareaeffectcloud.getRadius()) / (float) entityareaeffectcloud.getDuration());
                 entityareaeffectcloud.addEffect(new MobEffect(MobEffects.HARM, 1, 1));
                 if (!list.isEmpty()) {
-                    Iterator iterator = list.iterator();
 
-                    while (iterator.hasNext()) {
-                        EntityLiving entityliving = (EntityLiving) iterator.next();
+                    for (EntityLiving entityliving : list) {
                         double d0 = this.h(entityliving);
 
                         if (d0 < 16.0D) {
diff --git a/src/main/java/net/minecraft/server/EntityEnderDragon.java b/src/main/java/net/minecraft/server/EntityEnderDragon.java
index a495c14b9f168884a0bba6b95d28c9ecfa9dfdab..5b5e610eede13bf8c470a8ea23bdee43f514c69e 100644
--- a/src/main/java/net/minecraft/server/EntityEnderDragon.java
+++ b/src/main/java/net/minecraft/server/EntityEnderDragon.java
@@ -410,10 +410,8 @@ public class EntityEnderDragon extends EntityInsentient implements IMonster {
             List<EntityEnderCrystal> list = this.world.a(EntityEnderCrystal.class, this.getBoundingBox().g(32.0D));
             EntityEnderCrystal entityendercrystal = null;
             double d0 = Double.MAX_VALUE;
-            Iterator iterator = list.iterator();
 
-            while (iterator.hasNext()) {
-                EntityEnderCrystal entityendercrystal1 = (EntityEnderCrystal) iterator.next();
+            for (EntityEnderCrystal entityendercrystal1 : list) {
                 double d1 = entityendercrystal1.h(this);
 
                 if (d1 < d0) {
@@ -430,11 +428,8 @@ public class EntityEnderDragon extends EntityInsentient implements IMonster {
     private void a(List<Entity> list) {
         double d0 = (this.bz.getBoundingBox().minX + this.bz.getBoundingBox().maxX) / 2.0D;
         double d1 = (this.bz.getBoundingBox().minZ + this.bz.getBoundingBox().maxZ) / 2.0D;
-        Iterator iterator = list.iterator();
-
-        while (iterator.hasNext()) {
-            Entity entity = (Entity) iterator.next();
 
+        for (Entity entity : list) {
             if (entity instanceof EntityLiving) {
                 double d2 = entity.locX() - d0;
                 double d3 = entity.locZ() - d1;
@@ -451,11 +446,8 @@ public class EntityEnderDragon extends EntityInsentient implements IMonster {
     }
 
     private void b(List<Entity> list) {
-        Iterator iterator = list.iterator();
-
-        while (iterator.hasNext()) {
-            Entity entity = (Entity) iterator.next();
 
+        for (Entity entity : list) {
             if (entity instanceof EntityLiving) {
                 entity.damageEntity(DamageSource.mobAttack(this), 10.0F);
                 this.a((EntityLiving) this, entity);
diff --git a/src/main/java/net/minecraft/server/EntityEvokerFangs.java b/src/main/java/net/minecraft/server/EntityEvokerFangs.java
index 035d82f9391a10a53616e71ed47c3fb06137f512..7b8ad3e066d768abe46e633f3759c1dadbffcdc9 100644
--- a/src/main/java/net/minecraft/server/EntityEvokerFangs.java
+++ b/src/main/java/net/minecraft/server/EntityEvokerFangs.java
@@ -88,11 +88,8 @@ public class EntityEvokerFangs extends Entity {
         } else if (--this.b < 0) {
             if (this.b == -8) {
                 List<EntityLiving> list = this.world.a(EntityLiving.class, this.getBoundingBox().grow(0.2D, 0.0D, 0.2D));
-                Iterator iterator = list.iterator();
-
-                while (iterator.hasNext()) {
-                    EntityLiving entityliving = (EntityLiving) iterator.next();
 
+                for (EntityLiving entityliving : list) {
                     this.c(entityliving);
                 }
             }
diff --git a/src/main/java/net/minecraft/server/EntityFallingBlock.java b/src/main/java/net/minecraft/server/EntityFallingBlock.java
index 0fbcf454c2db2427055123424c6d10cfbb939c17..f82f54eab80b9cb0e0235d7304efcfa9f55e81c1 100644
--- a/src/main/java/net/minecraft/server/EntityFallingBlock.java
+++ b/src/main/java/net/minecraft/server/EntityFallingBlock.java
@@ -150,10 +150,8 @@ public class EntityFallingBlock extends Entity {
 
                                         if (tileentity != null) {
                                             NBTTagCompound nbttagcompound = tileentity.save(new NBTTagCompound());
-                                            Iterator iterator = this.tileEntityData.getKeys().iterator();
 
-                                            while (iterator.hasNext()) {
-                                                String s = (String) iterator.next();
+                                            for (String s : this.tileEntityData.getKeys()) {
                                                 NBTBase nbtbase = this.tileEntityData.get(s);
 
                                                 if (!"x".equals(s) && !"y".equals(s) && !"z".equals(s)) {
@@ -191,11 +189,8 @@ public class EntityFallingBlock extends Entity {
                 List<Entity> list = Lists.newArrayList(this.world.getEntities(this, this.getBoundingBox()));
                 boolean flag = this.block.a((Tag) TagsBlock.ANVIL);
                 DamageSource damagesource = flag ? DamageSource.ANVIL : DamageSource.FALLING_BLOCK;
-                Iterator iterator = list.iterator();
-
-                while (iterator.hasNext()) {
-                    Entity entity = (Entity) iterator.next();
 
+                for (Entity entity : list) {
                     CraftEventFactory.entityDamage = this; // CraftBukkit
                     entity.damageEntity(damagesource, (float) Math.min(MathHelper.d((float) i * this.fallHurtAmount), this.fallHurtMax));
                     CraftEventFactory.entityDamage = null; // CraftBukkit
diff --git a/src/main/java/net/minecraft/server/EntityFireworks.java b/src/main/java/net/minecraft/server/EntityFireworks.java
index e4c2bf2de6c032332b7557c240bb458297bdd33f..391824d5d67febb79ff9dfae194086577f4f1520 100644
--- a/src/main/java/net/minecraft/server/EntityFireworks.java
+++ b/src/main/java/net/minecraft/server/EntityFireworks.java
@@ -213,11 +213,8 @@ public class EntityFireworks extends IProjectile {
             double d0 = 5.0D;
             Vec3D vec3d = this.getPositionVector();
             List<EntityLiving> list = this.world.a(EntityLiving.class, this.getBoundingBox().g(5.0D));
-            Iterator iterator = list.iterator();
-
-            while (iterator.hasNext()) {
-                EntityLiving entityliving = (EntityLiving) iterator.next();
 
+            for (EntityLiving entityliving : list) {
                 if (entityliving != this.ridingEntity && this.h(entityliving) <= 25.0D) {
                     boolean flag = false;
 
diff --git a/src/main/java/net/minecraft/server/EntityFishingHook.java b/src/main/java/net/minecraft/server/EntityFishingHook.java
index f0502c7f5419f637641b48d8c87f5df206e4f922..157e78641ab80f9a2cbb24682b943cff6f3ac006 100644
--- a/src/main/java/net/minecraft/server/EntityFishingHook.java
+++ b/src/main/java/net/minecraft/server/EntityFishingHook.java
@@ -444,10 +444,8 @@ public class EntityFishingHook extends IProjectile {
                 List<ItemStack> list = loottable.populateLoot(loottableinfo_builder.build(LootContextParameterSets.FISHING));
 
                 CriterionTriggers.D.a((EntityPlayer) entityhuman, itemstack, this, (Collection) list);
-                Iterator iterator = list.iterator();
 
-                while (iterator.hasNext()) {
-                    ItemStack itemstack1 = (ItemStack) iterator.next();
+                for (ItemStack itemstack1 : list) {
                     // Paper start, new EntityItem would throw if for whatever reason (mostly shitty datapacks) the itemstack1 turns out to be empty
                     // if the item stack is empty we instead just have our entityitem as null
                     EntityItem entityitem = null;
diff --git a/src/main/java/net/minecraft/server/EntityFox.java b/src/main/java/net/minecraft/server/EntityFox.java
index ff78bd607f19a1b9f37281946db3f705c844f7cc..8ac53539b8b879345ac95025f11421e7c2fa7355 100644
--- a/src/main/java/net/minecraft/server/EntityFox.java
+++ b/src/main/java/net/minecraft/server/EntityFox.java
@@ -334,11 +334,8 @@ public class EntityFox extends EntityAnimal {
         super.saveData(nbttagcompound);
         List<UUID> list = this.fa();
         NBTTagList nbttaglist = new NBTTagList();
-        Iterator iterator = list.iterator();
-
-        while (iterator.hasNext()) {
-            UUID uuid = (UUID) iterator.next();
 
+        for (UUID uuid : list) {
             if (uuid != null) {
                 nbttaglist.add(GameProfileSerializer.a(uuid));
             }
@@ -1225,11 +1222,8 @@ public class EntityFox extends EntityAnimal {
             if (this.b > 0 && this.e.getRandom().nextInt(this.b) != 0) {
                 return false;
             } else {
-                Iterator iterator = EntityFox.this.fa().iterator();
-
-                while (iterator.hasNext()) {
-                    UUID uuid = (UUID) iterator.next();
 
+                for (UUID uuid : EntityFox.this.fa()) {
                     if (uuid != null && EntityFox.this.world instanceof WorldServer) {
                         Entity entity = ((WorldServer) EntityFox.this.world).getEntity(uuid);
 
diff --git a/src/main/java/net/minecraft/server/EntityGuardianElder.java b/src/main/java/net/minecraft/server/EntityGuardianElder.java
index 7afba8136f9a809e779d9af8c93cda7c0765c095..9dbaed1f35544ce80c0dae268be71734a9c2e003 100644
--- a/src/main/java/net/minecraft/server/EntityGuardianElder.java
+++ b/src/main/java/net/minecraft/server/EntityGuardianElder.java
@@ -75,11 +75,8 @@ public class EntityGuardianElder extends EntityGuardian {
             boolean flag1 = true;
             boolean flag2 = true;
             boolean flag3 = true;
-            Iterator iterator = list.iterator();
-
-            while (iterator.hasNext()) {
-                EntityPlayer entityplayer = (EntityPlayer) iterator.next();
 
+            for (EntityPlayer entityplayer : list) {
                 if (!entityplayer.hasEffect(mobeffectlist) || entityplayer.getEffect(mobeffectlist).getAmplifier() < 2 || entityplayer.getEffect(mobeffectlist).getDuration() < 1200) {
                     entityplayer.playerConnection.sendPacket(new PacketPlayOutGameStateChange(PacketPlayOutGameStateChange.k, this.isSilent() ? 0.0F : 1.0F));
                     entityplayer.addEffect(new MobEffect(mobeffectlist, 6000, 2), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.ATTACK); // CraftBukkit
diff --git a/src/main/java/net/minecraft/server/EntityHorseAbstract.java b/src/main/java/net/minecraft/server/EntityHorseAbstract.java
index 2bed0a08eaad5fee5d5e85ba6cb3d3e8e1be1c2c..7235091ec250f0a208de547d8642fc20955216b3 100644
--- a/src/main/java/net/minecraft/server/EntityHorseAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityHorseAbstract.java
@@ -237,11 +237,8 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
         } else {
             this.damageEntity(DamageSource.FALL, (float) i);
             if (this.isVehicle()) {
-                Iterator iterator = this.getAllPassengers().iterator();
-
-                while (iterator.hasNext()) {
-                    Entity entity = (Entity) iterator.next();
 
+                for (Entity entity : this.getAllPassengers()) {
                     entity.damageEntity(DamageSource.FALL, (float) i);
                 }
             }
diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index 3669fbbb68c4e3b5e09069ee53e4ebe19efb8ee2..61ecc5582f90adbedd85a42100212b1f4b36946d 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -466,8 +466,8 @@ public abstract class EntityHuman extends EntityLiving {
 
             List<Entity> list = this.world.getEntities(this, axisalignedbb);
 
-            for (int i = 0; i < list.size(); ++i) {
-                Entity entity = (Entity) list.get(i);
+            for (Entity value : list) {
+                Entity entity = (Entity) value;
 
                 if (!entity.dead) {
                     this.c(entity);
@@ -1180,15 +1180,12 @@ public abstract class EntityHuman extends EntityLiving {
                         if (flag3) {
                             float f4 = 1.0F + EnchantmentManager.a((EntityLiving) this) * f;
                             List<EntityLiving> list = this.world.a(EntityLiving.class, entity.getBoundingBox().grow(1.0D, 0.25D, 1.0D));
-                            Iterator iterator = list.iterator();
-
-                            while (iterator.hasNext()) {
-                                EntityLiving entityliving = (EntityLiving) iterator.next();
 
+                            for (EntityLiving entityliving : list) {
                                 if (entityliving != this && entityliving != entity && !this.r(entityliving) && (!(entityliving instanceof EntityArmorStand) || !((EntityArmorStand) entityliving).isMarker()) && this.h((Entity) entityliving) < 9.0D) {
                                     // CraftBukkit start - Only apply knockback if the damage hits
                                     if (entityliving.damageEntity(DamageSource.playerAttack(this).sweep(), f4)) {
-                                    entityliving.doKnockback(0.4F, (double) MathHelper.sin(this.yaw * 0.017453292F), (double) (-MathHelper.cos(this.yaw * 0.017453292F)), this); // Paper
+                                        entityliving.doKnockback(0.4F, (double) MathHelper.sin(this.yaw * 0.017453292F), (double) (-MathHelper.cos(this.yaw * 0.017453292F)), this); // Paper
                                     }
                                     // CraftBukkit end
                                 }
diff --git a/src/main/java/net/minecraft/server/EntityIllagerWizard.java b/src/main/java/net/minecraft/server/EntityIllagerWizard.java
index b9dd0e358a7359f12ed1234d76363501651db950..e24d1c1cfd928b76fdab0bb030d68208e4c4ef28 100644
--- a/src/main/java/net/minecraft/server/EntityIllagerWizard.java
+++ b/src/main/java/net/minecraft/server/EntityIllagerWizard.java
@@ -94,9 +94,7 @@ public abstract class EntityIllagerWizard extends EntityIllagerAbstract {
             EntityIllagerWizard.Spell[] aentityillagerwizard_spell = values();
             int j = aentityillagerwizard_spell.length;
 
-            for (int k = 0; k < j; ++k) {
-                EntityIllagerWizard.Spell entityillagerwizard_spell = aentityillagerwizard_spell[k];
-
+            for (Spell entityillagerwizard_spell : aentityillagerwizard_spell) {
                 if (i == entityillagerwizard_spell.g) {
                     return entityillagerwizard_spell;
                 }
diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index 7ad41d363954d7ed7f22bb450254d70bcf43856f..88c1cf325bfd6f7e1dbe29414eb7b0fbdff87b2c 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -584,11 +584,8 @@ public abstract class EntityInsentient extends EntityLiving {
         this.world.getMethodProfiler().enter("looting");
         if (!this.world.isClientSide && this.canPickupLoot() && this.isAlive() && !this.killed && (this.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING) || world.purpurConfig.entitiesPickUpLootBypassMobGriefing)) { // Purpur
             List<EntityItem> list = this.world.a(EntityItem.class, this.getBoundingBox().grow(1.0D, 0.0D, 1.0D));
-            Iterator iterator = list.iterator();
-
-            while (iterator.hasNext()) {
-                EntityItem entityitem = (EntityItem) iterator.next();
 
+            for (EntityItem entityitem : list) {
                 if (!entityitem.dead && !entityitem.getItemStack().isEmpty() && !entityitem.p() && this.i(entityitem.getItemStack())) {
                     // Paper Start
                     if (!entityitem.canMobPickup) {
@@ -957,8 +954,7 @@ public abstract class EntityInsentient extends EntityLiving {
         EnumItemSlot[] aenumitemslot = EnumItemSlot.values();
         int j = aenumitemslot.length;
 
-        for (int k = 0; k < j; ++k) {
-            EnumItemSlot enumitemslot = aenumitemslot[k];
+        for (EnumItemSlot enumitemslot : aenumitemslot) {
             ItemStack itemstack = this.getEquipment(enumitemslot);
             float f = this.e(enumitemslot);
             boolean flag1 = f > 1.0F;
@@ -1014,9 +1010,7 @@ public abstract class EntityInsentient extends EntityLiving {
             EnumItemSlot[] aenumitemslot = EnumItemSlot.values();
             int j = aenumitemslot.length;
 
-            for (int k = 0; k < j; ++k) {
-                EnumItemSlot enumitemslot = aenumitemslot[k];
-
+            for (EnumItemSlot enumitemslot : aenumitemslot) {
                 if (enumitemslot.a() == EnumItemSlot.Function.ARMOR) {
                     ItemStack itemstack = this.getEquipment(enumitemslot);
 
@@ -1115,9 +1109,7 @@ public abstract class EntityInsentient extends EntityLiving {
         EnumItemSlot[] aenumitemslot = EnumItemSlot.values();
         int i = aenumitemslot.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumItemSlot enumitemslot = aenumitemslot[j];
-
+        for (EnumItemSlot enumitemslot : aenumitemslot) {
             if (enumitemslot.a() == EnumItemSlot.Function.ARMOR) {
                 this.a(f, enumitemslot);
             }
@@ -1323,8 +1315,7 @@ public abstract class EntityInsentient extends EntityLiving {
                 EnumItemSlot[] aenumitemslot = EnumItemSlot.values();
                 int i = aenumitemslot.length;
 
-                for (int j = 0; j < i; ++j) {
-                    EnumItemSlot enumitemslot = aenumitemslot[j];
+                for (EnumItemSlot enumitemslot : aenumitemslot) {
                     ItemStack itemstack = this.getEquipment(enumitemslot);
 
                     if (!itemstack.isEmpty()) {
diff --git a/src/main/java/net/minecraft/server/EntityItem.java b/src/main/java/net/minecraft/server/EntityItem.java
index 753bfdd7d99e2d921f47efa71cf1c62f9ab4e0d1..b20151f09594756da0c364d8fc95f4f592af36f1 100644
--- a/src/main/java/net/minecraft/server/EntityItem.java
+++ b/src/main/java/net/minecraft/server/EntityItem.java
@@ -216,11 +216,8 @@ public class EntityItem extends Entity implements HopperPusher {
                 // Spigot end
                 return entityitem != this && entityitem.z();
             });
-            Iterator iterator = list.iterator();
-
-            while (iterator.hasNext()) {
-                EntityItem entityitem = (EntityItem) iterator.next();
 
+            for (EntityItem entityitem : list) {
                 if (entityitem.z()) {
                     this.a(entityitem);
                     if (this.dead) {
diff --git a/src/main/java/net/minecraft/server/EntityLightning.java b/src/main/java/net/minecraft/server/EntityLightning.java
index 239f504430b6c59923fd677d1be0121be5022604..847eba0ee788f41b351f0a10c705c982deaf8b21 100644
--- a/src/main/java/net/minecraft/server/EntityLightning.java
+++ b/src/main/java/net/minecraft/server/EntityLightning.java
@@ -109,11 +109,8 @@ public class EntityLightning extends Entity {
             } else if (!this.isEffect) {
                 double d0 = 3.0D;
                 List<Entity> list = this.world.getEntities(this, new AxisAlignedBB(this.locX() - 3.0D, this.locY() - 3.0D, this.locZ() - 3.0D, this.locX() + 3.0D, this.locY() + 6.0D + 3.0D, this.locZ() + 3.0D), Entity::isAlive);
-                Iterator iterator = list.iterator();
-
-                while (iterator.hasNext()) {
-                    Entity entity = (Entity) iterator.next();
 
+                for (Entity entity : list) {
                     entity.onLightningStrike((WorldServer) this.world, this);
                 }
 
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 5fea5e9fabfb600a61f969c74d402f98e130073e..fa74a0d663a7ee5beb2794db753b0c5716c2df47 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -613,11 +613,8 @@ public abstract class EntityLiving extends Entity {
         nbttagcompound.set("Attributes", this.getAttributeMap().c());
         if (!this.effects.isEmpty()) {
             NBTTagList nbttaglist = new NBTTagList();
-            Iterator iterator = this.effects.values().iterator();
-
-            while (iterator.hasNext()) {
-                MobEffect mobeffect = (MobEffect) iterator.next();
 
+            for (MobEffect mobeffect : this.effects.values()) {
                 nbttaglist.add(mobeffect.a(new NBTTagCompound()));
             }
 
@@ -1346,8 +1343,7 @@ public abstract class EntityLiving extends Entity {
 
             // CraftBukkit start
             ItemStack itemstack1 = ItemStack.b;
-            for (int j = 0; j < i; ++j) {
-                EnumHand enumhand = aenumhand[j];
+            for (EnumHand enumhand : aenumhand) {
                 itemstack1 = this.b(enumhand);
 
                 if (itemstack1.getItem() == Items.TOTEM_OF_UNDYING) {
@@ -2691,8 +2687,7 @@ public abstract class EntityLiving extends Entity {
         //EnumItemSlot[] aenumitemslot = EnumItemSlot.values(); // Yatopia
         int i = aenumitemslot.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumItemSlot enumitemslot = aenumitemslot[j];
+        for (EnumItemSlot enumitemslot : aenumitemslot) {
             ItemStack itemstack;
 
             switch (enumitemslot.a()) {
@@ -3013,8 +3008,8 @@ public abstract class EntityLiving extends Entity {
             if (i > 0 && list.size() > i - 1 && this.random.nextInt(4) == 0) {
                 j = 0;
 
-                for (int k = 0; k < list.size(); ++k) {
-                    if (!((Entity) list.get(k)).isPassenger()) {
+                for (Entity entity : list) {
+                    if (!((Entity) entity).isPassenger()) {
                         ++j;
                     }
                 }
@@ -3044,8 +3039,8 @@ public abstract class EntityLiving extends Entity {
         List<Entity> list = this.world.getEntities(this, axisalignedbb2);
 
         if (!list.isEmpty()) {
-            for (int i = 0; i < list.size(); ++i) {
-                Entity entity = (Entity) list.get(i);
+            for (Entity value : list) {
+                Entity entity = (Entity) value;
 
                 if (entity instanceof EntityLiving) {
                     this.g((EntityLiving) entity);
@@ -3677,10 +3672,9 @@ public abstract class EntityLiving extends Entity {
 
         if (item.isFood()) {
             List<Pair<MobEffect, Float>> list = item.getFoodInfo().f();
-            Iterator iterator = list.iterator();
 
-            while (iterator.hasNext()) {
-                Pair<MobEffect, Float> pair = (Pair) iterator.next();
+            for (Pair<MobEffect, Float> mobEffectFloatPair : list) {
+                Pair<MobEffect, Float> pair = (Pair) mobEffectFloatPair;
 
                 if (!world.isClientSide && pair.getFirst() != null && world.random.nextFloat() < (Float) pair.getSecond()) {
                     entityliving.addEffect(new MobEffect((MobEffect) pair.getFirst()), EntityPotionEffectEvent.Cause.FOOD); // CraftBukkit
diff --git a/src/main/java/net/minecraft/server/EntityLlama.java b/src/main/java/net/minecraft/server/EntityLlama.java
index f46a7cfe832c8cca83738b71882ff0a9819a7f41..4c70e21dbcd308aeb59f7bab39c82cf08917933d 100644
--- a/src/main/java/net/minecraft/server/EntityLlama.java
+++ b/src/main/java/net/minecraft/server/EntityLlama.java
@@ -440,11 +440,8 @@ public class EntityLlama extends EntityHorseChestedAbstract implements IRangedEn
             if (f >= 6.0F) {
                 this.damageEntity(DamageSource.FALL, (float) i);
                 if (this.isVehicle()) {
-                    Iterator iterator = this.getAllPassengers().iterator();
-
-                    while (iterator.hasNext()) {
-                        Entity entity = (Entity) iterator.next();
 
+                    for (Entity entity : this.getAllPassengers()) {
                         entity.damageEntity(DamageSource.FALL, (float) i);
                     }
                 }
diff --git a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
index 4de2877f30a9b231a5c8bbd1739416991e9d7633..a0e74c654378710e56281ca2cb394071698add35 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
@@ -381,8 +381,8 @@ public abstract class EntityMinecartAbstract extends Entity {
                 List<Entity> list = this.world.getEntities(this, this.getBoundingBox().grow(0.20000000298023224D, 0.0D, 0.20000000298023224D), IEntitySelector.a(this));
 
                 if (!list.isEmpty()) {
-                    for (int l = 0; l < list.size(); ++l) {
-                        Entity entity = (Entity) list.get(l);
+                    for (Entity value : list) {
+                        Entity entity = (Entity) value;
 
                         if (!(entity instanceof EntityHuman) && !(entity instanceof EntityIronGolem) && !(entity instanceof EntityMinecartAbstract) && !this.isVehicle() && !entity.isPassenger()) {
                             // CraftBukkit start
diff --git a/src/main/java/net/minecraft/server/EntityMushroomCow.java b/src/main/java/net/minecraft/server/EntityMushroomCow.java
index c97dac30010c7d574aa7087f3a84581bfc386473..fcc35cca3a6c318ecff98f477f9e9554885cff61 100644
--- a/src/main/java/net/minecraft/server/EntityMushroomCow.java
+++ b/src/main/java/net/minecraft/server/EntityMushroomCow.java
@@ -283,9 +283,7 @@ public class EntityMushroomCow extends EntityCow implements IShearable {
             EntityMushroomCow.Type[] aentitymushroomcow_type = values();
             int i = aentitymushroomcow_type.length;
 
-            for (int j = 0; j < i; ++j) {
-                EntityMushroomCow.Type entitymushroomcow_type = aentitymushroomcow_type[j];
-
+            for (Type entitymushroomcow_type : aentitymushroomcow_type) {
                 if (entitymushroomcow_type.c.equals(s)) {
                     return entitymushroomcow_type;
                 }
diff --git a/src/main/java/net/minecraft/server/EntityPanda.java b/src/main/java/net/minecraft/server/EntityPanda.java
index d202624853a1a0a0562b62ad5f3792db0916ae03..d9627b289b34b148cc0070a90e7f1c6e6f325b8a 100644
--- a/src/main/java/net/minecraft/server/EntityPanda.java
+++ b/src/main/java/net/minecraft/server/EntityPanda.java
@@ -466,15 +466,14 @@ public class EntityPanda extends EntityAnimal {
         this.world.addParticle(Particles.SNEEZE, this.locX() - (double) (this.getWidth() + 1.0F) * 0.5D * (double) MathHelper.sin(this.aA * 0.017453292F), this.getHeadY() - 0.10000000149011612D, this.locZ() + (double) (this.getWidth() + 1.0F) * 0.5D * (double) MathHelper.cos(this.aA * 0.017453292F), vec3d.x, 0.0D, vec3d.z);
         this.playSound(SoundEffects.ENTITY_PANDA_SNEEZE, 1.0F, 1.0F);
         List<EntityPanda> list = this.world.a(EntityPanda.class, this.getBoundingBox().g(10.0D));
-        Iterator iterator = list.iterator();
-
-        while (iterator.hasNext()) {
-            EntityPanda entitypanda = (EntityPanda) iterator.next();
 
+        for (EntityPanda entitypanda : list) {
             if (!entitypanda.isBaby() && entitypanda.onGround && !entitypanda.isInWater() && entitypanda.fh()) {
                 if (new com.destroystokyo.paper.event.entity.EntityJumpEvent(getBukkitLivingEntity()).callEvent()) { // Paper
-                entitypanda.jump();
-                } else { this.setJumping(false); } // Paper - setJumping(false) stops a potential loop
+                    entitypanda.jump();
+                } else {
+                    this.setJumping(false);
+                } // Paper - setJumping(false) stops a potential loop
             }
         }
 
@@ -1079,9 +1078,7 @@ public class EntityPanda extends EntityAnimal {
             EntityPanda.Gene[] aentitypanda_gene = values();
             int i = aentitypanda_gene.length;
 
-            for (int j = 0; j < i; ++j) {
-                EntityPanda.Gene entitypanda_gene = aentitypanda_gene[j];
-
+            for (Gene entitypanda_gene : aentitypanda_gene) {
                 if (entitypanda_gene.j.equals(s)) {
                     return entitypanda_gene;
                 }
diff --git a/src/main/java/net/minecraft/server/EntityPhantom.java b/src/main/java/net/minecraft/server/EntityPhantom.java
index 52a3ae1eda874b41e5d71c16b8ab24d3c9f17470..e400c26a49e99a4b721aae13ac0056430f7a676a 100644
--- a/src/main/java/net/minecraft/server/EntityPhantom.java
+++ b/src/main/java/net/minecraft/server/EntityPhantom.java
@@ -439,14 +439,11 @@ public class EntityPhantom extends EntityFlying implements IMonster {
                 if (world.purpurConfig.phantomIgnorePlayersWithTorch) list.removeIf(human -> TORCH.test(human.getItemInHand(EnumHand.MAIN_HAND)) || TORCH.test(human.getItemInHand(EnumHand.OFF_HAND)));// Purpur
                 if (!list.isEmpty()) {
                     list.sort(Comparator.comparing(Entity::locY).reversed());
-                    Iterator iterator = list.iterator();
-
-                    while (iterator.hasNext()) {
-                        EntityHuman entityhuman = (EntityHuman) iterator.next();
 
+                    for (EntityHuman entityhuman : list) {
                         if (EntityPhantom.this.a((EntityLiving) entityhuman, PathfinderTargetCondition.a)) {
                             if (!world.paperConfig.phantomOnlyAttackInsomniacs || IEntitySelector.isInsomniac.test(entityhuman)) // Paper
-                            EntityPhantom.this.setGoalTarget(entityhuman, org.bukkit.event.entity.EntityTargetEvent.TargetReason.CLOSEST_PLAYER, true); // CraftBukkit - reason
+                                EntityPhantom.this.setGoalTarget(entityhuman, org.bukkit.event.entity.EntityTargetEvent.TargetReason.CLOSEST_PLAYER, true); // CraftBukkit - reason
                             return true;
                         }
                     }
@@ -548,11 +545,8 @@ public class EntityPhantom extends EntityFlying implements IMonster {
                     List<EntityCat> list = EntityPhantom.this.world.a(EntityCat.class, EntityPhantom.this.getBoundingBox().g(16.0D), IEntitySelector.a);
 
                     if (!list.isEmpty()) {
-                        Iterator iterator = list.iterator();
-
-                        while (iterator.hasNext()) {
-                            EntityCat entitycat = (EntityCat) iterator.next();
 
+                        for (EntityCat entitycat : list) {
                             entitycat.eZ();
                         }
 
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index d11bb46b8dbf170ff8a9c6f63d2fd05728f7f415..8e2711371e188f787ce6f7a4a85940f67fe864a3 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -1179,11 +1179,8 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
                 this.playerConnection.sendPacket(new PacketPlayOutAbilities(this.abilities));
                 playerlist.a(this, worldserver);
                 playerlist.updateClient(this);
-                Iterator iterator = this.getEffects().iterator();
-
-                while (iterator.hasNext()) {
-                    MobEffect mobeffect = (MobEffect) iterator.next();
 
+                for (MobEffect mobeffect : this.getEffects()) {
                     this.playerConnection.sendPacket(new PacketPlayOutEntityEffect(this.getId(), mobeffect));
                 }
 
diff --git a/src/main/java/net/minecraft/server/EntityPolarBear.java b/src/main/java/net/minecraft/server/EntityPolarBear.java
index f72a72e6f76c3896a80a75aae255081e2f8bb507..84d0a1453e38662228356ad9b9094a5b1de832d8 100644
--- a/src/main/java/net/minecraft/server/EntityPolarBear.java
+++ b/src/main/java/net/minecraft/server/EntityPolarBear.java
@@ -342,11 +342,8 @@ public class EntityPolarBear extends EntityAnimal implements IEntityAngerable {
             } else {
                 if (super.a()) {
                     List<EntityPolarBear> list = EntityPolarBear.this.world.a(EntityPolarBear.class, EntityPolarBear.this.getBoundingBox().grow(8.0D, 4.0D, 8.0D));
-                    Iterator iterator = list.iterator();
-
-                    while (iterator.hasNext()) {
-                        EntityPolarBear entitypolarbear = (EntityPolarBear) iterator.next();
 
+                    for (EntityPolarBear entitypolarbear : list) {
                         if (entitypolarbear.isBaby()) {
                             return true;
                         }
diff --git a/src/main/java/net/minecraft/server/EntityPotion.java b/src/main/java/net/minecraft/server/EntityPotion.java
index dfc0538cc8cb8015fe79978ee360c86127118330..b586e05a25b33180331c112f2d1e09ecee3be09f 100644
--- a/src/main/java/net/minecraft/server/EntityPotion.java
+++ b/src/main/java/net/minecraft/server/EntityPotion.java
@@ -54,11 +54,8 @@ public class EntityPotion extends EntityProjectileThrowable {
             if (flag) {
                 this.a(blockposition1, enumdirection);
                 this.a(blockposition1.shift(enumdirection.opposite()), enumdirection);
-                Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
-
-                while (iterator.hasNext()) {
-                    EnumDirection enumdirection1 = (EnumDirection) iterator.next();
 
+                for (EnumDirection enumdirection1 : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
                     this.a(blockposition1.shift(enumdirection1), enumdirection1);
                 }
             }
@@ -97,10 +94,8 @@ public class EntityPotion extends EntityProjectileThrowable {
         List<EntityLiving> list = this.world.a(EntityLiving.class, axisalignedbb, EntityPotion.b);
 
         if (!list.isEmpty()) {
-            Iterator iterator = list.iterator();
 
-            while (iterator.hasNext()) {
-                EntityLiving entityliving = (EntityLiving) iterator.next();
+            for (EntityLiving entityliving : list) {
                 double d0 = this.h(entityliving);
 
                 if (d0 < 16.0D && entityliving.dO()) {
@@ -117,11 +112,8 @@ public class EntityPotion extends EntityProjectileThrowable {
         Map<LivingEntity, Double> affected = new HashMap<LivingEntity, Double>(); // CraftBukkit
 
         if (!list1.isEmpty()) {
-            Iterator iterator = list1.iterator();
-
-            while (iterator.hasNext()) {
-                EntityLiving entityliving = (EntityLiving) iterator.next();
 
+            for (EntityLiving entityliving : list1) {
                 if (entityliving.eh()) {
                     double d0 = this.h(entityliving);
 
@@ -150,10 +142,7 @@ public class EntityPotion extends EntityProjectileThrowable {
                 double d1 = event.getIntensity(victim);
                 // CraftBukkit end
 
-                Iterator iterator1 = list.iterator();
-
-                while (iterator1.hasNext()) {
-                    MobEffect mobeffect = (MobEffect) iterator1.next();
+                for (MobEffect mobeffect : list) {
                     MobEffectList mobeffectlist = mobeffect.getMobEffect();
                     // CraftBukkit start - Abide by PVP settings - for players only!
                     if (!this.world.pvpMode && this.getShooter() instanceof EntityPlayer && entityliving instanceof EntityPlayer && entityliving != this.getShooter()) {
@@ -193,11 +182,8 @@ public class EntityPotion extends EntityProjectileThrowable {
         entityareaeffectcloud.setWaitTime(10);
         entityareaeffectcloud.setRadiusPerTick(-entityareaeffectcloud.getRadius() / (float) entityareaeffectcloud.getDuration());
         entityareaeffectcloud.a(potionregistry);
-        Iterator iterator = PotionUtil.b(itemstack).iterator();
-
-        while (iterator.hasNext()) {
-            MobEffect mobeffect = (MobEffect) iterator.next();
 
+        for (MobEffect mobeffect : PotionUtil.b(itemstack)) {
             entityareaeffectcloud.addEffect(new MobEffect(mobeffect));
         }
 
diff --git a/src/main/java/net/minecraft/server/EntityPufferFish.java b/src/main/java/net/minecraft/server/EntityPufferFish.java
index 815ba3062e0cbc4400f4dae9f80ce8f6745816f5..0a1172d6d4ad15c2a0a844768aa5e74f071ba1d0 100644
--- a/src/main/java/net/minecraft/server/EntityPufferFish.java
+++ b/src/main/java/net/minecraft/server/EntityPufferFish.java
@@ -114,11 +114,8 @@ public class EntityPufferFish extends EntityFish {
         super.movementTick();
         if (this.isAlive() && this.getPuffState() > 0) {
             List<EntityInsentient> list = this.world.a(EntityInsentient.class, this.getBoundingBox().g(0.3D), EntityPufferFish.bo);
-            Iterator iterator = list.iterator();
-
-            while (iterator.hasNext()) {
-                EntityInsentient entityinsentient = (EntityInsentient) iterator.next();
 
+            for (EntityInsentient entityinsentient : list) {
                 if (entityinsentient.isAlive()) {
                     this.a(entityinsentient);
                 }
diff --git a/src/main/java/net/minecraft/server/EntityRaider.java b/src/main/java/net/minecraft/server/EntityRaider.java
index c5141188e500c9a359994ea91ecc323f9f9851c3..e0f6f0eafad36085cee42ed2695af2d70308b0c0 100644
--- a/src/main/java/net/minecraft/server/EntityRaider.java
+++ b/src/main/java/net/minecraft/server/EntityRaider.java
@@ -394,11 +394,8 @@ public abstract class EntityRaider extends EntityMonsterPatrolling {
             super.c();
             this.c.getNavigation().o();
             List<EntityRaider> list = this.c.world.a(EntityRaider.class, this.a, this.c, this.c.getBoundingBox().grow(8.0D, 8.0D, 8.0D));
-            Iterator iterator = list.iterator();
-
-            while (iterator.hasNext()) {
-                EntityRaider entityraider = (EntityRaider) iterator.next();
 
+            for (EntityRaider entityraider : list) {
                 entityraider.setGoalTarget(this.c.getGoalTarget(), org.bukkit.event.entity.EntityTargetEvent.TargetReason.FOLLOW_LEADER, true); // CraftBukkit
             }
 
@@ -411,11 +408,8 @@ public abstract class EntityRaider extends EntityMonsterPatrolling {
 
             if (entityliving != null) {
                 List<EntityRaider> list = this.c.world.a(EntityRaider.class, this.a, this.c, this.c.getBoundingBox().grow(8.0D, 8.0D, 8.0D));
-                Iterator iterator = list.iterator();
-
-                while (iterator.hasNext()) {
-                    EntityRaider entityraider = (EntityRaider) iterator.next();
 
+                for (EntityRaider entityraider : list) {
                     entityraider.setGoalTarget(this.c.getGoalTarget(), org.bukkit.event.entity.EntityTargetEvent.TargetReason.FOLLOW_LEADER, true); // CraftBukkit
                     entityraider.setAggressive(true);
                 }
diff --git a/src/main/java/net/minecraft/server/EntityRavager.java b/src/main/java/net/minecraft/server/EntityRavager.java
index 3606440e41ab3193fadebb455c0967dbc0ccbb63..16acb5e9ecf6a137ea731004eb251732ff411b4b 100644
--- a/src/main/java/net/minecraft/server/EntityRavager.java
+++ b/src/main/java/net/minecraft/server/EntityRavager.java
@@ -140,10 +140,8 @@ public class EntityRavager extends EntityRaider {
             if (this.positionChanged && (this.world.purpurConfig.ravagerBypassMobGriefing || this.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING))) { // Purpur
                 boolean flag = false;
                 AxisAlignedBB axisalignedbb = this.getBoundingBox().g(0.2D);
-                Iterator iterator = BlockPosition.b(MathHelper.floor(axisalignedbb.minX), MathHelper.floor(axisalignedbb.minY), MathHelper.floor(axisalignedbb.minZ), MathHelper.floor(axisalignedbb.maxX), MathHelper.floor(axisalignedbb.maxY), MathHelper.floor(axisalignedbb.maxZ)).iterator();
 
-                while (iterator.hasNext()) {
-                    BlockPosition blockposition = (BlockPosition) iterator.next();
+                for (BlockPosition blockposition : BlockPosition.b(MathHelper.floor(axisalignedbb.minX), MathHelper.floor(axisalignedbb.minY), MathHelper.floor(axisalignedbb.minZ), MathHelper.floor(axisalignedbb.maxX), MathHelper.floor(axisalignedbb.maxY), MathHelper.floor(axisalignedbb.maxZ))) {
                     IBlockData iblockdata = this.world.getType(blockposition);
                     Block block = iblockdata.getBlock();
 
diff --git a/src/main/java/net/minecraft/server/EntitySelector.java b/src/main/java/net/minecraft/server/EntitySelector.java
index 93ef227d06aa66845e960998f28f920b6163146e..bf86bd549945074af0006ae73aac8ac6ca529cf7 100644
--- a/src/main/java/net/minecraft/server/EntitySelector.java
+++ b/src/main/java/net/minecraft/server/EntitySelector.java
@@ -118,11 +118,8 @@ public class EntitySelector {
                 if (this.d()) {
                     this.a(list, commandlistenerwrapper.getWorld(), vec3d, predicate);
                 } else {
-                    Iterator iterator1 = commandlistenerwrapper.getServer().getWorlds().iterator();
-
-                    while (iterator1.hasNext()) {
-                        WorldServer worldserver1 = (WorldServer) iterator1.next();
 
+                    for (WorldServer worldserver1 : commandlistenerwrapper.getServer().getWorlds()) {
                         this.a(list, worldserver1, vec3d, predicate);
                     }
                 }
@@ -186,11 +183,8 @@ public class EntitySelector {
                     object = worldserver.a(predicate::test);
                 } else {
                     object = Lists.newArrayList();
-                    Iterator iterator = commandlistenerwrapper.getServer().getPlayerList().getPlayers().iterator();
-
-                    while (iterator.hasNext()) {
-                        EntityPlayer entityplayer2 = (EntityPlayer) iterator.next();
 
+                    for (EntityPlayer entityplayer2 : commandlistenerwrapper.getServer().getPlayerList().getPlayers()) {
                         if (predicate.test(entityplayer2)) {
                             ((List) object).add(entityplayer2);
                         }
diff --git a/src/main/java/net/minecraft/server/EntityShulker.java b/src/main/java/net/minecraft/server/EntityShulker.java
index 3f1cb739709cc16a9f7073ec8fafb448b734a948..0b7bc140e7b2720604a188a163d0164836e4df6a 100644
--- a/src/main/java/net/minecraft/server/EntityShulker.java
+++ b/src/main/java/net/minecraft/server/EntityShulker.java
@@ -231,11 +231,8 @@ public class EntityShulker extends EntityGolem implements IMonster {
                 List<Entity> list = this.world.getEntities(this, this.getBoundingBox());
 
                 if (!list.isEmpty()) {
-                    Iterator iterator = list.iterator();
-
-                    while (iterator.hasNext()) {
-                        Entity entity = (Entity) iterator.next();
 
+                    for (Entity entity : list) {
                         if (!(entity instanceof EntityShulker) && !entity.noclip) {
                             entity.move(EnumMoveType.SHULKER, new Vec3D(d2 * (double) enumdirection2.getAdjacentX(), d2 * (double) enumdirection2.getAdjacentY(), d2 * (double) enumdirection2.getAdjacentZ()));
                         }
@@ -277,9 +274,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
         EnumDirection[] aenumdirection = EnumDirection.values();
         int i = aenumdirection.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumDirection enumdirection = aenumdirection[j];
-
+        for (EnumDirection enumdirection : aenumdirection) {
             if (this.a(blockposition, enumdirection)) {
                 return enumdirection;
             }
diff --git a/src/main/java/net/minecraft/server/EntityStrider.java b/src/main/java/net/minecraft/server/EntityStrider.java
index 7c5472a5138011a3376b7b6ec2467bdfc1739033..4f8edc7314bcc11f93db56cb7c552db489086d67 100644
--- a/src/main/java/net/minecraft/server/EntityStrider.java
+++ b/src/main/java/net/minecraft/server/EntityStrider.java
@@ -190,11 +190,7 @@ public class EntityStrider extends EntityAnimal implements ISteerable, ISaddleab
             }
         }
 
-        Iterator iterator = set.iterator();
-
-        while (iterator.hasNext()) {
-            BlockPosition blockposition = (BlockPosition) iterator.next();
-
+        for (BlockPosition blockposition : set) {
             if (!this.world.getFluid(blockposition).a((Tag) TagsFluid.LAVA)) {
                 double d3 = this.world.h(blockposition);
 
diff --git a/src/main/java/net/minecraft/server/EntityTippedArrow.java b/src/main/java/net/minecraft/server/EntityTippedArrow.java
index 18567cb2906b86cb2b2be4a48d1bca73829d5881..2715cfdd60b2b80cf5e245da124c4fcb6138df5b 100644
--- a/src/main/java/net/minecraft/server/EntityTippedArrow.java
+++ b/src/main/java/net/minecraft/server/EntityTippedArrow.java
@@ -36,11 +36,8 @@ public class EntityTippedArrow extends EntityArrow {
             Collection<MobEffect> collection = PotionUtil.b(itemstack);
 
             if (!collection.isEmpty()) {
-                Iterator iterator = collection.iterator();
-
-                while (iterator.hasNext()) {
-                    MobEffect mobeffect = (MobEffect) iterator.next();
 
+                for (MobEffect mobeffect : collection) {
                     this.effects.add(new MobEffect(mobeffect));
                 }
             }
@@ -163,11 +160,8 @@ public class EntityTippedArrow extends EntityArrow {
 
         if (!this.effects.isEmpty()) {
             NBTTagList nbttaglist = new NBTTagList();
-            Iterator iterator = this.effects.iterator();
-
-            while (iterator.hasNext()) {
-                MobEffect mobeffect = (MobEffect) iterator.next();
 
+            for (MobEffect mobeffect : this.effects) {
                 nbttaglist.add(mobeffect.a(new NBTTagCompound()));
             }
 
@@ -183,11 +177,7 @@ public class EntityTippedArrow extends EntityArrow {
             this.potionRegistry = PotionUtil.c(nbttagcompound);
         }
 
-        Iterator iterator = PotionUtil.b(nbttagcompound).iterator();
-
-        while (iterator.hasNext()) {
-            MobEffect mobeffect = (MobEffect) iterator.next();
-
+        for (MobEffect mobeffect : PotionUtil.b(nbttagcompound)) {
             this.addEffect(mobeffect);
         }
 
diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index 63bcd1b61d0485b064d619ddfa0e201034087772..f13f26dead82854479ee206a1a801c4e699ce194 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -95,18 +95,16 @@ public class EntityTrackerEntry {
                 // Airplane start - process maps on main
                 this.b.chunkProvider.playerChunkMap.trackerEnsureMain(() -> {
                 WorldMap worldmap = ItemWorldMap.getSavedMap(itemstack, this.b);
-                Iterator iterator = this.trackedPlayers.iterator(); // CraftBukkit
+                    // CraftBukkit
 
-                while (iterator.hasNext()) {
-                    EntityPlayer entityplayer = (EntityPlayer) iterator.next();
+                    for (EntityPlayer entityplayer : this.trackedPlayers) {
+                        worldmap.a((EntityHuman) entityplayer, itemstack);
+                        Packet<?> packet = ((ItemWorldMap) itemstack.getItem()).a(itemstack, (World) this.b, (EntityHuman) entityplayer);
 
-                    worldmap.a((EntityHuman) entityplayer, itemstack);
-                    Packet<?> packet = ((ItemWorldMap) itemstack.getItem()).a(itemstack, (World) this.b, (EntityHuman) entityplayer);
-
-                    if (packet != null) {
-                        entityplayer.playerConnection.sendPacket(packet);
+                        if (packet != null) {
+                            entityplayer.playerConnection.sendPacket(packet);
+                        }
                     }
-                }
                 });
                 // Airplane end
             }
@@ -359,8 +357,7 @@ public class EntityTrackerEntry {
             EnumItemSlot[] aenumitemslot = EnumItemSlot.values();
             int i = aenumitemslot.length;
 
-            for (int j = 0; j < i; ++j) {
-                EnumItemSlot enumitemslot = aenumitemslot[j];
+            for (EnumItemSlot enumitemslot : aenumitemslot) {
                 ItemStack itemstack = ((EntityLiving) this.tracker).getEquipment(enumitemslot);
 
                 if (!itemstack.isEmpty()) {
@@ -383,11 +380,8 @@ public class EntityTrackerEntry {
 
         if (this.tracker instanceof EntityLiving) {
             EntityLiving entityliving = (EntityLiving) this.tracker;
-            Iterator iterator = entityliving.getEffects().iterator();
-
-            while (iterator.hasNext()) {
-                MobEffect mobeffect = (MobEffect) iterator.next();
 
+            for (MobEffect mobeffect : entityliving.getEffects()) {
                 consumer.accept(new PacketPlayOutEntityEffect(this.tracker.getId(), mobeffect));
             }
         }
diff --git a/src/main/java/net/minecraft/server/EntityVillagerAbstract.java b/src/main/java/net/minecraft/server/EntityVillagerAbstract.java
index baf74566ec8569677e6f03aef96645c13ec94d89..31dabb645ea8a2fd905aedd53c3a05d27bf7aed3 100644
--- a/src/main/java/net/minecraft/server/EntityVillagerAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityVillagerAbstract.java
@@ -247,10 +247,7 @@ public abstract class EntityVillagerAbstract extends EntityAgeable implements NP
             }
         }
 
-        Iterator iterator = set.iterator();
-
-        while (iterator.hasNext()) {
-            Integer integer = (Integer) iterator.next();
+        for (Integer integer : set) {
             VillagerTrades.IMerchantRecipeOption villagertrades_imerchantrecipeoption = avillagertrades_imerchantrecipeoption[integer];
             MerchantRecipe merchantrecipe = villagertrades_imerchantrecipeoption.a(this, this.random);
 
diff --git a/src/main/java/net/minecraft/server/EntityWitch.java b/src/main/java/net/minecraft/server/EntityWitch.java
index dc846e7bda587a47b1cce9054e587a734179e7fe..883216ffd6ac9e384c22ea49948539dbb5642129 100644
--- a/src/main/java/net/minecraft/server/EntityWitch.java
+++ b/src/main/java/net/minecraft/server/EntityWitch.java
@@ -119,11 +119,8 @@ public class EntityWitch extends EntityRaider implements IRangedEntity {
                         // Paper end
 
                         if (list != null) {
-                            Iterator iterator = list.iterator();
-
-                            while (iterator.hasNext()) {
-                                MobEffect mobeffect = (MobEffect) iterator.next();
 
+                            for (MobEffect mobeffect : list) {
                                 this.addEffect(new MobEffect(mobeffect), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.ATTACK); // CraftBukkit
                             }
                         }
diff --git a/src/main/java/net/minecraft/server/EntityZombieVillager.java b/src/main/java/net/minecraft/server/EntityZombieVillager.java
index 48e501130dea326ffc6503bc2e9306dffd8797f9..bcd4339eda7395974a11d5fa828178eb00debb15 100644
--- a/src/main/java/net/minecraft/server/EntityZombieVillager.java
+++ b/src/main/java/net/minecraft/server/EntityZombieVillager.java
@@ -205,8 +205,7 @@ public class EntityZombieVillager extends EntityZombie implements VillagerDataHo
         EnumItemSlot[] aenumitemslot = EnumItemSlot.values();
         int i = aenumitemslot.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumItemSlot enumitemslot = aenumitemslot[j];
+        for (EnumItemSlot enumitemslot : aenumitemslot) {
             ItemStack itemstack = this.getEquipment(enumitemslot);
 
             if (!itemstack.isEmpty()) {
diff --git a/src/main/java/net/minecraft/server/EnumBannerPatternType.java b/src/main/java/net/minecraft/server/EnumBannerPatternType.java
index 775e74effbf8a900951f63ab3ee8d5d055902e35..56d46e919cca7b38a8d28f81a80024186d3d0cd2 100644
--- a/src/main/java/net/minecraft/server/EnumBannerPatternType.java
+++ b/src/main/java/net/minecraft/server/EnumBannerPatternType.java
@@ -48,10 +48,9 @@ public enum EnumBannerPatternType {
 
         public NBTTagList a() {
             NBTTagList nbttaglist = new NBTTagList();
-            Iterator iterator = this.a.iterator();
 
-            while (iterator.hasNext()) {
-                Pair<EnumBannerPatternType, EnumColor> pair = (Pair) iterator.next();
+            for (Pair<EnumBannerPatternType, EnumColor> enumBannerPatternTypeEnumColorPair : this.a) {
+                Pair<EnumBannerPatternType, EnumColor> pair = (Pair) enumBannerPatternTypeEnumColorPair;
                 NBTTagCompound nbttagcompound = new NBTTagCompound();
 
                 nbttagcompound.setString("Pattern", ((EnumBannerPatternType) pair.getLeft()).V);
diff --git a/src/main/java/net/minecraft/server/EnumChatFormat.java b/src/main/java/net/minecraft/server/EnumChatFormat.java
index c186af518ef43e9efaf086233e1da8a1cf293c66..e4f25bb40b618e6361eec628abc435b4f73d7b12 100644
--- a/src/main/java/net/minecraft/server/EnumChatFormat.java
+++ b/src/main/java/net/minecraft/server/EnumChatFormat.java
@@ -105,9 +105,7 @@ public enum EnumChatFormat {
             EnumChatFormat[] aenumchatformat = values();
             int j = aenumchatformat.length;
 
-            for (int k = 0; k < j; ++k) {
-                EnumChatFormat enumchatformat = aenumchatformat[k];
-
+            for (EnumChatFormat enumchatformat : aenumchatformat) {
                 if (enumchatformat.b() == i) {
                     return enumchatformat;
                 }
@@ -122,9 +120,7 @@ public enum EnumChatFormat {
         EnumChatFormat[] aenumchatformat = values();
         int i = aenumchatformat.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumChatFormat enumchatformat = aenumchatformat[j];
-
+        for (EnumChatFormat enumchatformat : aenumchatformat) {
             if ((!enumchatformat.d() || flag) && (!enumchatformat.isFormat() || flag1)) {
                 list.add(enumchatformat.f());
             }
diff --git a/src/main/java/net/minecraft/server/EnumDifficulty.java b/src/main/java/net/minecraft/server/EnumDifficulty.java
index 386eae71a146e06ca60f8bf11429fe2131232a21..f374ccb7c6454238b529832cda7394c212b2ed17 100644
--- a/src/main/java/net/minecraft/server/EnumDifficulty.java
+++ b/src/main/java/net/minecraft/server/EnumDifficulty.java
@@ -37,9 +37,7 @@ public enum EnumDifficulty {
         EnumDifficulty[] aenumdifficulty = values();
         int i = aenumdifficulty.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumDifficulty enumdifficulty = aenumdifficulty[j];
-
+        for (EnumDifficulty enumdifficulty : aenumdifficulty) {
             if (enumdifficulty.g.equals(s)) {
                 return enumdifficulty;
             }
diff --git a/src/main/java/net/minecraft/server/EnumDirection.java b/src/main/java/net/minecraft/server/EnumDirection.java
index 042f100a276263f86a17d820b51e0acc444bddd5..517eaf7f23a6e9465d039da5304a4624b7f03ace 100644
--- a/src/main/java/net/minecraft/server/EnumDirection.java
+++ b/src/main/java/net/minecraft/server/EnumDirection.java
@@ -233,8 +233,7 @@ public enum EnumDirection implements INamable {
         EnumDirection[] aenumdirection = EnumDirection.n;
         int i = aenumdirection.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumDirection enumdirection1 = aenumdirection[j];
+        for (EnumDirection enumdirection1 : aenumdirection) {
             float f4 = f * (float) enumdirection1.m.getX() + f1 * (float) enumdirection1.m.getY() + f2 * (float) enumdirection1.m.getZ();
 
             if (f4 > f3) {
@@ -259,9 +258,7 @@ public enum EnumDirection implements INamable {
         EnumDirection[] aenumdirection = EnumDirection.n;
         int i = aenumdirection.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumDirection enumdirection = aenumdirection[j];
-
+        for (EnumDirection enumdirection : aenumdirection) {
             if (enumdirection.e() == enumdirection_enumaxisdirection && enumdirection.n() == enumdirection_enumaxis) {
                 return enumdirection;
             }
diff --git a/src/main/java/net/minecraft/server/EnumItemSlot.java b/src/main/java/net/minecraft/server/EnumItemSlot.java
index 3ad9b3e69ef0ed8ad8eebcb323024670ce7599d1..890e632a45b51324105674b882ad6b2dd7d18b79 100644
--- a/src/main/java/net/minecraft/server/EnumItemSlot.java
+++ b/src/main/java/net/minecraft/server/EnumItemSlot.java
@@ -37,9 +37,7 @@ public enum EnumItemSlot {
         EnumItemSlot[] aenumitemslot = values();
         int i = aenumitemslot.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumItemSlot enumitemslot = aenumitemslot[j];
-
+        for (EnumItemSlot enumitemslot : aenumitemslot) {
             if (enumitemslot.getSlotName().equals(s)) {
                 return enumitemslot;
             }
@@ -52,9 +50,7 @@ public enum EnumItemSlot {
         EnumItemSlot[] aenumitemslot = values();
         int j = aenumitemslot.length;
 
-        for (int k = 0; k < j; ++k) {
-            EnumItemSlot enumitemslot = aenumitemslot[k];
-
+        for (EnumItemSlot enumitemslot : aenumitemslot) {
             if (enumitemslot.a() == enumitemslot_function && enumitemslot.b() == i) {
                 return enumitemslot;
             }
diff --git a/src/main/java/net/minecraft/server/EnumProtocol.java b/src/main/java/net/minecraft/server/EnumProtocol.java
index 64df649e8d209246cc836793160eb0a1506826f8..bae1becf3535fd67a40fd35fd2d8e756a0033142 100644
--- a/src/main/java/net/minecraft/server/EnumProtocol.java
+++ b/src/main/java/net/minecraft/server/EnumProtocol.java
@@ -57,8 +57,7 @@ public enum EnumProtocol {
         EnumProtocol[] aenumprotocol = values();
         int i = aenumprotocol.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumProtocol enumprotocol = aenumprotocol[j];
+        for (EnumProtocol enumprotocol : aenumprotocol) {
             int k = enumprotocol.a();
 
             if (k < -1 || k > 2) {
diff --git a/src/main/java/net/minecraft/server/Explosion.java b/src/main/java/net/minecraft/server/Explosion.java
index bef7db87779a41dfa42794df1e51bba649ea8c72..d7aa7ddd0f7b50d8cc05115185a9c2fd8d29758c 100644
--- a/src/main/java/net/minecraft/server/Explosion.java
+++ b/src/main/java/net/minecraft/server/Explosion.java
@@ -167,8 +167,8 @@ public class Explosion {
         List<Entity> list = this.world.getEntities(this.source, new AxisAlignedBB((double) i, (double) l, (double) j1, (double) j, (double) i1, (double) k1), (com.google.common.base.Predicate<Entity>) entity -> entity.isAlive() && !entity.isSpectator()); // Paper - Fix lag from explosions processing dead entities
         Vec3D vec3d = new Vec3D(this.posX, this.posY, this.posZ);
 
-        for (int l1 = 0; l1 < list.size(); ++l1) {
-            Entity entity = (Entity) list.get(l1);
+        for (Entity value : list) {
+            Entity entity = (Entity) value;
 
             if (!entity.ci()) {
                 double d7 = (double) (MathHelper.sqrt(entity.e(vec3d)) / f2);
@@ -321,14 +321,11 @@ public class Explosion {
         }
 
         if (this.b) {
-            Iterator iterator1 = this.blocks.iterator();
-
-            while (iterator1.hasNext()) {
-                BlockPosition blockposition2 = (BlockPosition) iterator1.next();
 
+            for (BlockPosition blockposition2 : this.blocks) {
                 if (this.d.nextInt(3) == 0 && this.world.getType(blockposition2).isAir() && this.world.getType(blockposition2.down()).i(this.world, blockposition2.down())) {
                     // CraftBukkit start - Ignition by explosion
-                    if (!org.bukkit.craftbukkit.event.CraftEventFactory.callBlockIgniteEvent(this.world, blockposition2.getX(), blockposition2.getY(), blockposition2.getZ(), this).isCancelled()) {
+                    if (!CraftEventFactory.callBlockIgniteEvent(this.world, blockposition2.getX(), blockposition2.getY(), blockposition2.getZ(), this).isCancelled()) {
                         this.world.setTypeUpdate(blockposition2, BlockFireAbstract.a((IBlockAccess) this.world, blockposition2));
                     }
                     // CraftBukkit end
diff --git a/src/main/java/net/minecraft/server/FluidTypeFlowing.java b/src/main/java/net/minecraft/server/FluidTypeFlowing.java
index 46bdeca19a0da06a1fcbd7043a26689b64459d67..78dc9c4b2654e3ce6b6bdd3f9e0e1706d7a73377 100644
--- a/src/main/java/net/minecraft/server/FluidTypeFlowing.java
+++ b/src/main/java/net/minecraft/server/FluidTypeFlowing.java
@@ -46,11 +46,8 @@ public abstract class FluidTypeFlowing extends FluidType {
         double d0 = 0.0D;
         double d1 = 0.0D;
         BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition();
-        Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
-
-        while (iterator.hasNext()) {
-            EnumDirection enumdirection = (EnumDirection) iterator.next();
 
+        for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
             blockposition_mutableblockposition.a((BaseBlockPosition) blockposition, enumdirection);
             Fluid fluid1 = iblockaccess.getFluid(blockposition_mutableblockposition);
 
@@ -84,11 +81,8 @@ public abstract class FluidTypeFlowing extends FluidType {
         Vec3D vec3d = new Vec3D(d0, 0.0D, d1);
 
         if ((Boolean) fluid.get(FluidTypeFlowing.FALLING)) {
-            Iterator iterator1 = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
-
-            while (iterator1.hasNext()) {
-                EnumDirection enumdirection1 = (EnumDirection) iterator1.next();
 
+            for (EnumDirection enumdirection1 : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
                 blockposition_mutableblockposition.a((BaseBlockPosition) blockposition, enumdirection1);
                 if (this.a(iblockaccess, (BlockPosition) blockposition_mutableblockposition, enumdirection1) || this.a(iblockaccess, blockposition_mutableblockposition.up(), enumdirection1)) {
                     vec3d = vec3d.d().add(0.0D, -6.0D, 0.0D);
@@ -148,10 +142,9 @@ public abstract class FluidTypeFlowing extends FluidType {
 
         if (i > 0) {
             Map<EnumDirection, Fluid> map = this.b((IWorldReader) generatoraccess, blockposition, iblockdata);
-            Iterator iterator = map.entrySet().iterator();
 
-            while (iterator.hasNext()) {
-                Entry<EnumDirection, Fluid> entry = (Entry) iterator.next();
+            for (Entry<EnumDirection, Fluid> enumDirectionFluidEntry : map.entrySet()) {
+                Entry<EnumDirection, Fluid> entry = (Entry) enumDirectionFluidEntry;
                 EnumDirection enumdirection = (EnumDirection) entry.getKey();
                 Fluid fluid1 = (Fluid) entry.getValue();
                 BlockPosition blockposition1 = blockposition.shift(enumdirection);
@@ -161,7 +154,7 @@ public abstract class FluidTypeFlowing extends FluidType {
                 if (this.a(generatoraccess, blockposition, iblockdata, enumdirection, blockposition1, iblockdata1, generatoraccess.getFluid(blockposition1), fluid1.getType())) {
                     // CraftBukkit start
                     org.bukkit.block.Block source = CraftBlock.at(generatoraccess, blockposition);
-                    BlockFromToEvent event = new BlockFromToEvent(source, org.bukkit.craftbukkit.block.CraftBlock.notchToBlockFace(enumdirection));
+                    BlockFromToEvent event = new BlockFromToEvent(source, CraftBlock.notchToBlockFace(enumdirection));
                     generatoraccess.getMinecraftWorld().getServer().getPluginManager().callEvent(event);
 
                     if (event.isCancelled()) {
@@ -178,10 +171,8 @@ public abstract class FluidTypeFlowing extends FluidType {
     protected Fluid a(IWorldReader iworldreader, BlockPosition blockposition, IBlockData iblockdata) {
         int i = 0;
         int j = 0;
-        Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
-        while (iterator.hasNext()) {
-            EnumDirection enumdirection = (EnumDirection) iterator.next();
+        for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
             BlockPosition blockposition1 = blockposition.shift(enumdirection);
             IBlockData iblockdata1 = iworldreader.getTypeIfLoaded(blockposition1); // Paper
             if (iblockdata1 == null) continue; // Paper
@@ -304,11 +295,8 @@ public abstract class FluidTypeFlowing extends FluidType {
 
     protected int a(IWorldReader iworldreader, BlockPosition blockposition, int i, EnumDirection enumdirection, IBlockData iblockdata, BlockPosition blockposition1, Short2ObjectMap<Pair<IBlockData, Fluid>> short2objectmap, Short2BooleanMap short2booleanmap) {
         int j = 1000;
-        Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
-
-        while (iterator.hasNext()) {
-            EnumDirection enumdirection1 = (EnumDirection) iterator.next();
 
+        for (EnumDirection enumdirection1 : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
             if (enumdirection1 != enumdirection) {
                 BlockPosition blockposition2 = blockposition.shift(enumdirection1);
                 short short0 = a(blockposition1, blockposition2);
@@ -369,10 +357,8 @@ public abstract class FluidTypeFlowing extends FluidType {
 
     private int a(IWorldReader iworldreader, BlockPosition blockposition) {
         int i = 0;
-        Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
-        while (iterator.hasNext()) {
-            EnumDirection enumdirection = (EnumDirection) iterator.next();
+        for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
             BlockPosition blockposition1 = blockposition.shift(enumdirection);
             Fluid fluid = iworldreader.getFluid(blockposition1);
 
@@ -389,10 +375,8 @@ public abstract class FluidTypeFlowing extends FluidType {
         Map<EnumDirection, Fluid> map = Maps.newEnumMap(EnumDirection.class);
         Short2ObjectMap<Pair<IBlockData, Fluid>> short2objectmap = new Short2ObjectOpenHashMap();
         Short2BooleanOpenHashMap short2booleanopenhashmap = new Short2BooleanOpenHashMap();
-        Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
-        while (iterator.hasNext()) {
-            EnumDirection enumdirection = (EnumDirection) iterator.next();
+        for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
             BlockPosition blockposition1 = blockposition.shift(enumdirection);
             short short0 = a(blockposition, blockposition1);
             // Paper start
diff --git a/src/main/java/net/minecraft/server/FluidTypeLava.java b/src/main/java/net/minecraft/server/FluidTypeLava.java
index d981aa5a5f001333675eabd50497bbfa2dcf1df3..81208077e56a0fbf3c70ddd17be8f9c7c086cdd5 100644
--- a/src/main/java/net/minecraft/server/FluidTypeLava.java
+++ b/src/main/java/net/minecraft/server/FluidTypeLava.java
@@ -82,9 +82,7 @@ public abstract class FluidTypeLava extends FluidTypeFlowing {
         EnumDirection[] aenumdirection = EnumDirection.values();
         int i = aenumdirection.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumDirection enumdirection = aenumdirection[j];
-
+        for (EnumDirection enumdirection : aenumdirection) {
             if (this.b(iworldreader, blockposition.shift(enumdirection))) {
                 return true;
             }
diff --git a/src/main/java/net/minecraft/server/GameProfileSerializer.java b/src/main/java/net/minecraft/server/GameProfileSerializer.java
index 1fe44d4a1a1895f5715c720f9d7d7acb10e50f61..08b0c45b364a13e28b51e4586a78c53bb81a5bd1 100644
--- a/src/main/java/net/minecraft/server/GameProfileSerializer.java
+++ b/src/main/java/net/minecraft/server/GameProfileSerializer.java
@@ -42,10 +42,8 @@ public final class GameProfileSerializer {
 
             if (nbttagcompound.hasKeyOfType("Properties", 10)) {
                 NBTTagCompound nbttagcompound1 = nbttagcompound.getCompound("Properties");
-                Iterator iterator = nbttagcompound1.getKeys().iterator();
 
-                while (iterator.hasNext()) {
-                    String s1 = (String) iterator.next();
+                for (String s1 : nbttagcompound1.getKeys()) {
                     NBTTagList nbttaglist = nbttagcompound1.getList(s1, 10);
                     if (nbttaglist.size() == 0) continue; // Paper - remove duplicate properties
                     for (int i = nbttaglist.size() - 1; i < nbttaglist.size(); ++i) { // Paper - remove duplicate properties
@@ -214,10 +212,8 @@ public final class GameProfileSerializer {
             if (nbttagcompound.hasKeyOfType("Properties", 10)) {
                 NBTTagCompound nbttagcompound1 = nbttagcompound.getCompound("Properties");
                 BlockStateList<Block, IBlockData> blockstatelist = block.getStates();
-                Iterator iterator = nbttagcompound1.getKeys().iterator();
 
-                while (iterator.hasNext()) {
-                    String s = (String) iterator.next();
+                for (String s : nbttagcompound1.getKeys()) {
                     IBlockState<?> iblockstate = blockstatelist.a(s);
 
                     if (iblockstate != null) {
diff --git a/src/main/java/net/minecraft/server/GameRules.java b/src/main/java/net/minecraft/server/GameRules.java
index 53b40f8947c9380ef57ecc7edca203c5bc894013..22a9bf4887278a07969aaccbb2dcb749f0c8a797 100644
--- a/src/main/java/net/minecraft/server/GameRules.java
+++ b/src/main/java/net/minecraft/server/GameRules.java
@@ -42,11 +42,8 @@ public class GameRules {
     public static final GameRules.GameRuleKey<GameRules.GameRuleBoolean> SEND_COMMAND_FEEDBACK = a("sendCommandFeedback", GameRules.GameRuleCategory.CHAT, GameRules.GameRuleBoolean.b(true));
     public static final GameRules.GameRuleKey<GameRules.GameRuleBoolean> REDUCED_DEBUG_INFO = a("reducedDebugInfo", GameRules.GameRuleCategory.MISC, GameRules.GameRuleBoolean.b(false, (minecraftserver, gamerules_gameruleboolean) -> {
         int i = gamerules_gameruleboolean.a() ? 22 : 23;
-        Iterator iterator = minecraftserver.getPlayerList().getPlayers().iterator();
-
-        while (iterator.hasNext()) {
-            EntityPlayer entityplayer = (EntityPlayer) iterator.next();
 
+        for (EntityPlayer entityplayer : minecraftserver.getPlayerList().getPlayers()) {
             entityplayer.playerConnection.sendPacket(new PacketPlayOutEntityStatus(entityplayer, (byte) i));
         }
 
@@ -62,11 +59,8 @@ public class GameRules {
     public static final GameRules.GameRuleKey<GameRules.GameRuleBoolean> DISABLE_RAIDS = a("disableRaids", GameRules.GameRuleCategory.MOBS, GameRules.GameRuleBoolean.b(false));
     public static final GameRules.GameRuleKey<GameRules.GameRuleBoolean> DO_INSOMNIA = a("doInsomnia", GameRules.GameRuleCategory.SPAWNING, GameRules.GameRuleBoolean.b(true));
     public static final GameRules.GameRuleKey<GameRules.GameRuleBoolean> DO_IMMEDIATE_RESPAWN = a("doImmediateRespawn", GameRules.GameRuleCategory.PLAYER, GameRules.GameRuleBoolean.b(false, (minecraftserver, gamerules_gameruleboolean) -> {
-        Iterator iterator = minecraftserver.getPlayerList().getPlayers().iterator();
-
-        while (iterator.hasNext()) {
-            EntityPlayer entityplayer = (EntityPlayer) iterator.next();
 
+        for (EntityPlayer entityplayer : minecraftserver.getPlayerList().getPlayers()) {
             entityplayer.playerConnection.sendPacket(new PacketPlayOutGameStateChange(PacketPlayOutGameStateChange.l, gamerules_gameruleboolean.a() ? 1.0F : 0.0F));
         }
 
diff --git a/src/main/java/net/minecraft/server/HeightMap.java b/src/main/java/net/minecraft/server/HeightMap.java
index 476da43b9f0ef35b4985f88e4784b1f8c5222af3..3709506fc677e30f59c643c87bdda974d40ea5cd 100644
--- a/src/main/java/net/minecraft/server/HeightMap.java
+++ b/src/main/java/net/minecraft/server/HeightMap.java
@@ -37,11 +37,8 @@ public class HeightMap {
 
         for (int k = 0; k < 16; ++k) {
             for (int l = 0; l < 16; ++l) {
-                Iterator iterator = set.iterator();
-
-                while (iterator.hasNext()) {
-                    HeightMap.Type heightmap_type = (HeightMap.Type) iterator.next();
 
+                for (Type heightmap_type : set) {
                     objectlist.add(ichunkaccess.a(heightmap_type));
                 }
 
@@ -142,9 +139,7 @@ public class HeightMap {
             HeightMap.Type[] aheightmap_type = values();
             int i = aheightmap_type.length;
 
-            for (int j = 0; j < i; ++j) {
-                HeightMap.Type heightmap_type = aheightmap_type[j];
-
+            for (Type heightmap_type : aheightmap_type) {
                 hashmap.put(heightmap_type.h, heightmap_type);
             }
 
diff --git a/src/main/java/net/minecraft/server/IBlockDataHolder.java b/src/main/java/net/minecraft/server/IBlockDataHolder.java
index b19c694cf01bc868dd7c4ec6432b613d19f2ca40..25b357dec05dcb7f32b249675cc7f136b9ac808d 100644
--- a/src/main/java/net/minecraft/server/IBlockDataHolder.java
+++ b/src/main/java/net/minecraft/server/IBlockDataHolder.java
@@ -132,10 +132,9 @@ public abstract class IBlockDataHolder<O, S> {
             while (unmodifiableiterator.hasNext()) {
                 Entry<IBlockState<?>, Comparable<?>> entry = (Entry) unmodifiableiterator.next();
                 IBlockState<?> iblockstate = (IBlockState) entry.getKey();
-                Iterator iterator = iblockstate.getValues().iterator();
 
-                while (iterator.hasNext()) {
-                    Comparable<?> comparable = (Comparable) iterator.next();
+                for (Comparable<?> value : iblockstate.getValues()) {
+                    Comparable<?> comparable = (Comparable) value;
 
                     if (comparable != entry.getValue()) {
                         table.put(iblockstate, comparable, map.get(this.b(iblockstate, comparable)));
diff --git a/src/main/java/net/minecraft/server/IChatBaseComponent.java b/src/main/java/net/minecraft/server/IChatBaseComponent.java
index 2b8916e3b3ecfd3917b5acf3ea6dfc2793e242c8..af3ab25d1983c69bff53c8dbca3e840ffb20cee9 100644
--- a/src/main/java/net/minecraft/server/IChatBaseComponent.java
+++ b/src/main/java/net/minecraft/server/IChatBaseComponent.java
@@ -269,11 +269,8 @@ public interface IChatBaseComponent extends Message, IChatFormatted, Iterable<IC
 
             if (!ichatbasecomponent.getSiblings().isEmpty()) {
                 JsonArray jsonarray = new JsonArray();
-                Iterator iterator = ichatbasecomponent.getSiblings().iterator();
-
-                while (iterator.hasNext()) {
-                    IChatBaseComponent ichatbasecomponent1 = (IChatBaseComponent) iterator.next();
 
+                for (IChatBaseComponent ichatbasecomponent1 : ichatbasecomponent.getSiblings()) {
                     jsonarray.add(this.serialize(ichatbasecomponent1, ichatbasecomponent1.getClass(), jsonserializationcontext));
                 }
 
@@ -291,9 +288,7 @@ public interface IChatBaseComponent extends Message, IChatFormatted, Iterable<IC
                     Object[] aobject = chatmessage.getArgs();
                     int i = aobject.length;
 
-                    for (int j = 0; j < i; ++j) {
-                        Object object = aobject[j];
-
+                    for (Object object : aobject) {
                         if (object instanceof IChatBaseComponent) {
                             jsonarray1.add(this.serialize((IChatBaseComponent) object, object.getClass(), jsonserializationcontext));
                         } else {
diff --git a/src/main/java/net/minecraft/server/IDispenseBehavior.java b/src/main/java/net/minecraft/server/IDispenseBehavior.java
index 5675544e018ce6d4fa608680989980edb0ea625a..9c5ac75adf5733d62cdfd6074124a911173ea73b 100644
--- a/src/main/java/net/minecraft/server/IDispenseBehavior.java
+++ b/src/main/java/net/minecraft/server/IDispenseBehavior.java
@@ -176,11 +176,8 @@ public interface IDispenseBehavior {
                 return itemstack;
             }
         };
-        Iterator iterator = ItemMonsterEgg.f().iterator();
-
-        while (iterator.hasNext()) {
-            ItemMonsterEgg itemmonsteregg = (ItemMonsterEgg) iterator.next();
 
+        for (ItemMonsterEgg itemmonsteregg : ItemMonsterEgg.f()) {
             BlockDispenser.a((IMaterial) itemmonsteregg, (IDispenseBehavior) dispensebehavioritem);
         }
 
@@ -824,9 +821,7 @@ public interface IDispenseBehavior {
         EnumColor[] aenumcolor = EnumColor.values();
         int i = aenumcolor.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumColor enumcolor = aenumcolor[j];
-
+        for (EnumColor enumcolor : aenumcolor) {
             BlockDispenser.a((IMaterial) BlockShulkerBox.a(enumcolor).getItem(), (IDispenseBehavior) (new DispenseBehaviorShulkerBox()));
         }
 
diff --git a/src/main/java/net/minecraft/server/IEntityAccess.java b/src/main/java/net/minecraft/server/IEntityAccess.java
index 288105ae657ade252032aa0ac9c191a8e8ebf549..f708d81dd0190781e1d4095e8f3b7b61927f4b0a 100644
--- a/src/main/java/net/minecraft/server/IEntityAccess.java
+++ b/src/main/java/net/minecraft/server/IEntityAccess.java
@@ -102,11 +102,8 @@ public interface IEntityAccess {
     @Nullable default EntityHuman a(double d0, double d1, double d2, double d3, @Nullable Predicate<Entity> predicate) { // Paper // Tuinity - diff on change, override in World - this should be "get closest player that matches predicate"
         double d4 = -1.0D;
         EntityHuman entityhuman = null;
-        Iterator iterator = this.getPlayers().iterator();
-
-        while (iterator.hasNext()) {
-            EntityHuman entityhuman1 = (EntityHuman) iterator.next();
 
+        for (EntityHuman entityhuman1 : this.getPlayers()) {
             if (predicate == null || predicate.test(entityhuman1)) {
                 double d5 = entityhuman1.h(d0, d1, d2);
 
@@ -218,11 +215,10 @@ public interface IEntityAccess {
     default <T extends EntityLiving> T a(List<? extends T> list, PathfinderTargetCondition pathfindertargetcondition, @Nullable EntityLiving entityliving, double d0, double d1, double d2) {
         double d3 = -1.0D;
         T t0 = null;
-        Iterator<? extends T> iterator = list.iterator(); // Paper - decompile fix
-
-        while (iterator.hasNext()) {
-            T t1 = iterator.next(); // Paper - decompile fix
+        // Paper - decompile fix
 
+        // Paper - decompile fix
+        for (T t1 : list) {
             if (pathfindertargetcondition.a(entityliving, t1)) {
                 double d4 = t1.h(d0, d1, d2);
 
@@ -238,11 +234,8 @@ public interface IEntityAccess {
 
     default List<EntityHuman> a(PathfinderTargetCondition pathfindertargetcondition, EntityLiving entityliving, AxisAlignedBB axisalignedbb) { // Tuinity - diff on change, override in World - this should be "get players that matches path finder target condition"
         List<EntityHuman> list = Lists.newArrayList();
-        Iterator iterator = this.getPlayers().iterator();
-
-        while (iterator.hasNext()) {
-            EntityHuman entityhuman = (EntityHuman) iterator.next();
 
+        for (EntityHuman entityhuman : this.getPlayers()) {
             if (axisalignedbb.e(entityhuman.locX(), entityhuman.locY(), entityhuman.locZ()) && pathfindertargetcondition.a(entityliving, entityhuman)) {
                 list.add(entityhuman);
             }
@@ -254,11 +247,10 @@ public interface IEntityAccess {
     default <T extends EntityLiving> List<T> a(Class<? extends T> oclass, PathfinderTargetCondition pathfindertargetcondition, EntityLiving entityliving, AxisAlignedBB axisalignedbb) {
         List<T> list = this.a(oclass, axisalignedbb, (Predicate) null);
         List<T> list1 = Lists.newArrayList();
-        Iterator<T> iterator = list.iterator(); // Paper - decompile fix
-
-        while (iterator.hasNext()) {
-            T t0 = iterator.next(); // Paper - decompile fix
+        // Paper - decompile fix
 
+        // Paper - decompile fix
+        for (T t0 : list) {
             if (pathfindertargetcondition.a(entityliving, t0)) {
                 list1.add(t0);
             }
diff --git a/src/main/java/net/minecraft/server/IProjectile.java b/src/main/java/net/minecraft/server/IProjectile.java
index 56adefabdfbf444e87129715f107c6d3aafe4ca7..b1305e2e47766effa35bc0ce8941f753844e7d43 100644
--- a/src/main/java/net/minecraft/server/IProjectile.java
+++ b/src/main/java/net/minecraft/server/IProjectile.java
@@ -99,13 +99,10 @@ public abstract class IProjectile extends Entity {
         Entity entity = this.getShooter();
 
         if (entity != null) {
-            Iterator iterator = this.world.getEntities(this, this.getBoundingBox().b(this.getMot()).g(1.0D), (entity1) -> {
-                return !entity1.isSpectator() && entity1.isInteractable();
-            }).iterator();
-
-            while (iterator.hasNext()) {
-                Entity entity1 = (Entity) iterator.next();
 
+            for (Entity entity1 : this.world.getEntities(this, this.getBoundingBox().b(this.getMot()).g(1.0D), (entity1) -> {
+                return !entity1.isSpectator() && entity1.isInteractable();
+            })) {
                 if (entity1.getRootVehicle() == entity.getRootVehicle()) {
                     return false;
                 }
diff --git a/src/main/java/net/minecraft/server/InventorySubcontainer.java b/src/main/java/net/minecraft/server/InventorySubcontainer.java
index db5def8b1d4179a64b28366339a3634af593cd5e..f45523177f13abb90e71272e756783323e38f48c 100644
--- a/src/main/java/net/minecraft/server/InventorySubcontainer.java
+++ b/src/main/java/net/minecraft/server/InventorySubcontainer.java
@@ -208,11 +208,8 @@ public class InventorySubcontainer implements IInventory, AutoRecipeOutput {
     @Override
     public void update() {
         if (this.c != null) {
-            Iterator iterator = this.c.iterator();
-
-            while (iterator.hasNext()) {
-                IInventoryListener iinventorylistener = (IInventoryListener) iterator.next();
 
+            for (IInventoryListener iinventorylistener : this.c) {
                 iinventorylistener.a(this);
             }
         }
diff --git a/src/main/java/net/minecraft/server/ItemBlock.java b/src/main/java/net/minecraft/server/ItemBlock.java
index e4aea92040b58a5c87258ac6fd735f21709a45a3..0cdc40c2981ef127a6349a94eadd74e0fd4cce2b 100644
--- a/src/main/java/net/minecraft/server/ItemBlock.java
+++ b/src/main/java/net/minecraft/server/ItemBlock.java
@@ -146,10 +146,8 @@ public class ItemBlock extends Item {
         {
             // CraftBukkit end
             BlockStateList<Block, IBlockData> blockstatelist = iblockdata.getBlock().getStates();
-            Iterator iterator = nbttagcompound1.getKeys().iterator();
 
-            while (iterator.hasNext()) {
-                String s = (String) iterator.next();
+            for (String s : nbttagcompound1.getKeys()) {
                 IBlockState<?> iblockstate = blockstatelist.a(s);
 
                 if (iblockstate != null) {
diff --git a/src/main/java/net/minecraft/server/ItemBoat.java b/src/main/java/net/minecraft/server/ItemBoat.java
index 6183da7ad2a458f4ada288ec82fdaf097d771122..f0af711e5a07605d05ece830650d24e8dd178e29 100644
--- a/src/main/java/net/minecraft/server/ItemBoat.java
+++ b/src/main/java/net/minecraft/server/ItemBoat.java
@@ -28,10 +28,8 @@ public class ItemBoat extends Item {
 
             if (!list.isEmpty()) {
                 Vec3D vec3d1 = entityhuman.j(1.0F);
-                Iterator iterator = list.iterator();
 
-                while (iterator.hasNext()) {
-                    Entity entity = (Entity) iterator.next();
+                for (Entity entity : list) {
                     AxisAlignedBB axisalignedbb = entity.getBoundingBox().g((double) entity.bg());
 
                     if (axisalignedbb.d(vec3d1)) {
diff --git a/src/main/java/net/minecraft/server/ItemLeash.java b/src/main/java/net/minecraft/server/ItemLeash.java
index aadceb34a09729b883ff1fcabfafdc02b4448bff..e4f65176487453b3605c3a961e655922e4b84e6d 100644
--- a/src/main/java/net/minecraft/server/ItemLeash.java
+++ b/src/main/java/net/minecraft/server/ItemLeash.java
@@ -38,11 +38,8 @@ public class ItemLeash extends Item {
         int j = blockposition.getY();
         int k = blockposition.getZ();
         List<EntityInsentient> list = world.a(EntityInsentient.class, new AxisAlignedBB((double) i - 7.0D, (double) j - 7.0D, (double) k - 7.0D, (double) i + 7.0D, (double) j + 7.0D, (double) k + 7.0D));
-        Iterator iterator = list.iterator();
-
-        while (iterator.hasNext()) {
-            EntityInsentient entityinsentient = (EntityInsentient) iterator.next();
 
+        for (EntityInsentient entityinsentient : list) {
             if (entityinsentient.getLeashHolder() == entityhuman) {
                 if (entityleash == null) {
                     entityleash = EntityLeash.a(world, blockposition);
diff --git a/src/main/java/net/minecraft/server/ItemPotion.java b/src/main/java/net/minecraft/server/ItemPotion.java
index d4389768963f40cb7b4bca950631d9f50f634543..50db3957445860cac781349bf7cf5e16d7ca54d2 100644
--- a/src/main/java/net/minecraft/server/ItemPotion.java
+++ b/src/main/java/net/minecraft/server/ItemPotion.java
@@ -25,11 +25,8 @@ public class ItemPotion extends Item {
         List<MobEffect> instantLater = new java.util.ArrayList<>(); // Paper - Fix harming potion dupe
         if (!world.isClientSide) {
             List<MobEffect> list = PotionUtil.getEffects(itemstack);
-            Iterator iterator = list.iterator();
-
-            while (iterator.hasNext()) {
-                MobEffect mobeffect = (MobEffect) iterator.next();
 
+            for (MobEffect mobeffect : list) {
                 if (mobeffect.getMobEffect().isInstant()) {
                     instantLater.add(mobeffect); // Paper - Fix harming potion dupe
                 } else {
diff --git a/src/main/java/net/minecraft/server/LightEngineBlock.java b/src/main/java/net/minecraft/server/LightEngineBlock.java
index 636ed196d53971a3d0dc67d3e83032a9114b603b..119475825252e62679a3a2b765b6eacf3feaccbd 100644
--- a/src/main/java/net/minecraft/server/LightEngineBlock.java
+++ b/src/main/java/net/minecraft/server/LightEngineBlock.java
@@ -75,8 +75,7 @@ public final class LightEngineBlock extends LightEngineLayer<LightEngineStorageB
         EnumDirection[] aenumdirection = LightEngineBlock.e;
         int l = aenumdirection.length;
 
-        for (int i1 = 0; i1 < l; ++i1) {
-            EnumDirection enumdirection = aenumdirection[i1];
+        for (EnumDirection enumdirection : aenumdirection) {
             long j1 = BlockPosition.getAdjacent(x, y, z, enumdirection); // Paper
             long k1 = SectionPosition.getAdjacentFromBlockPos(x, y, z, enumdirection); // Paper
 
@@ -113,8 +112,7 @@ public final class LightEngineBlock extends LightEngineLayer<LightEngineStorageB
         EnumDirection[] aenumdirection = LightEngineBlock.e;
         int k1 = aenumdirection.length;
 
-        for (int l1 = 0; l1 < k1; ++l1) {
-            EnumDirection enumdirection = aenumdirection[l1];
+        for (EnumDirection enumdirection : aenumdirection) {
             // Paper start
             int newX = baseX + enumdirection.getAdjacentX();
             int newY = baseY + enumdirection.getAdjacentY();
diff --git a/src/main/java/net/minecraft/server/LightEngineLayer.java b/src/main/java/net/minecraft/server/LightEngineLayer.java
index b5d5dd1075fd6aabbfbbd60f219b76593fc54a76..d9867e15e53c3220606045f3dd1cdaa70a5ff6ae 100644
--- a/src/main/java/net/minecraft/server/LightEngineLayer.java
+++ b/src/main/java/net/minecraft/server/LightEngineLayer.java
@@ -220,9 +220,7 @@ public abstract class LightEngineLayer<M extends LightEngineStorageArray<M>, S e
         EnumDirection[] aenumdirection = LightEngineLayer.e;
         int j = aenumdirection.length;
 
-        for (int k = 0; k < j; ++k) {
-            EnumDirection enumdirection = aenumdirection[k];
-
+        for (EnumDirection enumdirection : aenumdirection) {
             this.f(BlockPosition.a(i, enumdirection));
         }
 
diff --git a/src/main/java/net/minecraft/server/LightEngineSky.java b/src/main/java/net/minecraft/server/LightEngineSky.java
index 32b52ca2462fa206b1184025cb3837d6c326db2d..7f343080a93fac33d9a450a3c1c3d529347645ab 100644
--- a/src/main/java/net/minecraft/server/LightEngineSky.java
+++ b/src/main/java/net/minecraft/server/LightEngineSky.java
@@ -191,8 +191,7 @@ public final class LightEngineSky extends LightEngineLayer<LightEngineStorageSky
         EnumDirection[] aenumdirection = LightEngineSky.e;
         int k1 = aenumdirection.length;
 
-        for (int l1 = 0; l1 < k1; ++l1) {
-            EnumDirection enumdirection = aenumdirection[l1];
+        for (EnumDirection enumdirection : aenumdirection) {
             // Paper start
             int newX = baseX + enumdirection.getAdjacentX();
             int newY = baseY + enumdirection.getAdjacentY();
diff --git a/src/main/java/net/minecraft/server/LightEngineStorage.java b/src/main/java/net/minecraft/server/LightEngineStorage.java
index e0bbfe1422cbad811ecb43d7436380d86b0f8abc..9151912d49f2c3c8293f3a190336a25e77aaae36 100644
--- a/src/main/java/net/minecraft/server/LightEngineStorage.java
+++ b/src/main/java/net/minecraft/server/LightEngineStorage.java
@@ -311,8 +311,7 @@ public abstract class LightEngineStorage<M extends LightEngineStorageArray<M>> e
             EnumDirection[] aenumdirection = LightEngineStorage.k;
             int i1 = aenumdirection.length;
 
-            for (int j1 = 0; j1 < i1; ++j1) {
-                EnumDirection enumdirection = aenumdirection[j1];
+            for (EnumDirection enumdirection : aenumdirection) {
                 long k1 = SectionPosition.getAdjacentFromSectionPos(secX, secY, secZ, enumdirection); // Paper - avoid extra unpacking
 
                 if (!this.i.containsKey(k1) && this.g(k1)) {
diff --git a/src/main/java/net/minecraft/server/LootTable.java b/src/main/java/net/minecraft/server/LootTable.java
index 5f3b3c718126f4b511c6b5cc19abdae7e7a14233..0f29f1dfc16036d887a99acda99fb8793f7e4fd0 100644
--- a/src/main/java/net/minecraft/server/LootTable.java
+++ b/src/main/java/net/minecraft/server/LootTable.java
@@ -68,9 +68,7 @@ public class LootTable {
             LootSelector[] alootselector = this.e;
             int i = alootselector.length;
 
-            for (int j = 0; j < i; ++j) {
-                LootSelector lootselector = alootselector[j];
-
+            for (LootSelector lootselector : alootselector) {
                 lootselector.a(consumer1, loottableinfo);
             }
 
@@ -128,11 +126,8 @@ public class LootTable {
         List<Integer> list1 = this.a(iinventory, random);
 
         this.a(list, list1.size(), random);
-        Iterator iterator = list.iterator();
-
-        while (iterator.hasNext()) {
-            ItemStack itemstack = (ItemStack) iterator.next();
 
+        for (ItemStack itemstack : list) {
             if (list1.isEmpty()) {
                 LootTable.LOGGER.warn("Tried to over-fill a container");
                 return;
diff --git a/src/main/java/net/minecraft/server/LootTableInfo.java b/src/main/java/net/minecraft/server/LootTableInfo.java
index 25b6e240cf135da0643250b3f498a077dae070da..c288940c3898df952de0b567418f2e4a72aad6d6 100644
--- a/src/main/java/net/minecraft/server/LootTableInfo.java
+++ b/src/main/java/net/minecraft/server/LootTableInfo.java
@@ -112,9 +112,7 @@ public class LootTableInfo {
             LootTableInfo.EntityTarget[] aloottableinfo_entitytarget = values();
             int i = aloottableinfo_entitytarget.length;
 
-            for (int j = 0; j < i; ++j) {
-                LootTableInfo.EntityTarget loottableinfo_entitytarget = aloottableinfo_entitytarget[j];
-
+            for (EntityTarget loottableinfo_entitytarget : aloottableinfo_entitytarget) {
                 if (loottableinfo_entitytarget.e.equals(s)) {
                     return loottableinfo_entitytarget;
                 }
diff --git a/src/main/java/net/minecraft/server/MinecartTrackLogic.java b/src/main/java/net/minecraft/server/MinecartTrackLogic.java
index e0be3a425aae51e1aced8eb6d8a5e84fc9315e3a..6bb4283b5d13358b214a3ce4f6df8d0131301493 100644
--- a/src/main/java/net/minecraft/server/MinecartTrackLogic.java
+++ b/src/main/java/net/minecraft/server/MinecartTrackLogic.java
@@ -123,8 +123,8 @@ public class MinecartTrackLogic {
     }
 
     private boolean c(BlockPosition blockposition) {
-        for (int i = 0; i < this.f.size(); ++i) {
-            BlockPosition blockposition1 = (BlockPosition) this.f.get(i);
+        for (BlockPosition blockPosition : this.f) {
+            BlockPosition blockposition1 = (BlockPosition) blockPosition;
 
             if (blockposition1.getX() == blockposition.getX() && blockposition1.getZ() == blockposition.getZ()) {
                 return true;
@@ -136,11 +136,8 @@ public class MinecartTrackLogic {
 
     protected int b() {
         int i = 0;
-        Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
-
-        while (iterator.hasNext()) {
-            EnumDirection enumdirection = (EnumDirection) iterator.next();
 
+        for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
             if (this.a(this.b.shift(enumdirection))) {
                 ++i;
             }
@@ -359,8 +356,8 @@ public class MinecartTrackLogic {
             }
             // Paper end - prevent desync
 
-            for (int i = 0; i < this.f.size(); ++i) {
-                MinecartTrackLogic minecarttracklogic = this.b((BlockPosition) this.f.get(i));
+            for (BlockPosition blockPosition : this.f) {
+                MinecartTrackLogic minecarttracklogic = this.b((BlockPosition) blockPosition);
 
                 if (minecarttracklogic != null && minecarttracklogic.isValid()) { // Paper - prevent desync
                     minecarttracklogic.d();
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 2bf8e6399dd9984cfe31aa47915cc0d16bcfe974..158388b057e5843e7a5dbe2a616757923e16b07e 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1231,11 +1231,8 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
             return true;
         } else {
             if (this.canSleepForTick()) {
-                Iterator iterator = this.getWorlds().iterator();
-
-                while (iterator.hasNext()) {
-                    WorldServer worldserver = (WorldServer) iterator.next();
 
+                for (WorldServer worldserver : this.getWorlds()) {
                     if (worldserver.getChunkProvider().runTasks()) {
                         return true;
                     }
@@ -1501,8 +1498,8 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         this.methodProfiler.exitEnter("server gui refresh");
 
         MinecraftTimings.tickablesTimer.startTiming(); // Spigot // Paper
-        for (int i = 0; i < this.tickables.size(); ++i) {
-            ((Runnable) this.tickables.get(i)).run();
+        for (Runnable tickable : this.tickables) {
+            ((Runnable) tickable).run();
         }
         MinecraftTimings.tickablesTimer.stopTiming(); // Spigot // Paper
 
@@ -1656,11 +1653,8 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
     }
 
     private void updateSpawnFlags() {
-        Iterator iterator = this.getWorlds().iterator();
-
-        while (iterator.hasNext()) {
-            WorldServer worldserver = (WorldServer) iterator.next();
 
+        for (WorldServer worldserver : this.getWorlds()) {
             worldserver.setSpawnFlags(this.getSpawnMonsters(), this.getSpawnAnimals());
         }
 
@@ -1717,11 +1711,8 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         mojangstatisticsgenerator.a("run_time", (SystemUtils.getMonotonicMillis() - mojangstatisticsgenerator.g()) / 60L * 1000L);
         mojangstatisticsgenerator.a("avg_tick_ms", (int) (MathHelper.a(this.h) * 1.0E-6D));
         int i = 0;
-        Iterator iterator = this.getWorlds().iterator();
-
-        while (iterator.hasNext()) {
-            WorldServer worldserver = (WorldServer) iterator.next();
 
+        for (WorldServer worldserver : this.getWorlds()) {
             if (worldserver != null) {
                 mojangstatisticsgenerator.a("world[" + i + "][dimension]", worldserver.getDimensionKey().a());
                 mojangstatisticsgenerator.a("world[" + i + "][mode]", this.saveData.getGameType());
@@ -2017,11 +2008,8 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
             WhiteList whitelist = playerlist.getWhitelist();
             if (!((DedicatedServer)getServer()).getDedicatedServerProperties().whiteList.get()) return; // Paper - white list not enabled
             List<EntityPlayer> list = Lists.newArrayList(playerlist.getPlayers());
-            Iterator iterator = list.iterator();
-
-            while (iterator.hasNext()) {
-                EntityPlayer entityplayer = (EntityPlayer) iterator.next();
 
+            for (EntityPlayer entityplayer : list) {
                 if (!whitelist.isWhitelisted(entityplayer.getProfile())) {
                     entityplayer.playerConnection.disconnect(new ChatMessage("multiplayer.disconnect.not_whitelisted"));
                 }
@@ -2120,10 +2108,9 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
 
     public void a(java.nio.file.Path java_nio_file_path) throws IOException {
         java.nio.file.Path java_nio_file_path1 = java_nio_file_path.resolve("levels");
-        Iterator iterator = this.worldServer.entrySet().iterator();
 
-        while (iterator.hasNext()) {
-            Entry<ResourceKey<World>, WorldServer> entry = (Entry) iterator.next();
+        for (Entry<ResourceKey<World>, WorldServer> resourceKeyWorldServerEntry : this.worldServer.entrySet()) {
+            Entry<ResourceKey<World>, WorldServer> entry = (Entry) resourceKeyWorldServerEntry;
             MinecraftKey minecraftkey = ((ResourceKey) entry.getKey()).a();
             java.nio.file.Path java_nio_file_path2 = java_nio_file_path1.resolve(minecraftkey.getNamespace()).resolve(minecraftkey.getKey());
 
@@ -2210,11 +2197,8 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
                     list.add(String.format("%s=%s\n", gamerules_gamerulekey.a(), gamerules.get(gamerules_gamerulekey).toString()));
                 }
             });
-            Iterator iterator = list.iterator();
-
-            while (iterator.hasNext()) {
-                String s = (String) iterator.next();
 
+            for (String s : list) {
                 bufferedwriter.write(s);
             }
         } catch (Throwable throwable1) {
diff --git a/src/main/java/net/minecraft/server/MobEffectList.java b/src/main/java/net/minecraft/server/MobEffectList.java
index 4d5c7d0c94403522dece924ea363871db87b4dfc..8d687caf16cf1b45b7fa85b9110e923d473296e6 100644
--- a/src/main/java/net/minecraft/server/MobEffectList.java
+++ b/src/main/java/net/minecraft/server/MobEffectList.java
@@ -142,10 +142,9 @@ public class MobEffectList {
     }
 
     public void a(EntityLiving entityliving, AttributeMapBase attributemapbase, int i) {
-        Iterator iterator = this.a.entrySet().iterator();
 
-        while (iterator.hasNext()) {
-            Entry<AttributeBase, AttributeModifier> entry = (Entry) iterator.next();
+        for (Entry<AttributeBase, AttributeModifier> attributeBaseAttributeModifierEntry : this.a.entrySet()) {
+            Entry<AttributeBase, AttributeModifier> entry = (Entry) attributeBaseAttributeModifierEntry;
             AttributeModifiable attributemodifiable = attributemapbase.a((AttributeBase) entry.getKey());
 
             if (attributemodifiable != null) {
@@ -156,10 +155,9 @@ public class MobEffectList {
     }
 
     public void b(EntityLiving entityliving, AttributeMapBase attributemapbase, int i) {
-        Iterator iterator = this.a.entrySet().iterator();
 
-        while (iterator.hasNext()) {
-            Entry<AttributeBase, AttributeModifier> entry = (Entry) iterator.next();
+        for (Entry<AttributeBase, AttributeModifier> attributeBaseAttributeModifierEntry : this.a.entrySet()) {
+            Entry<AttributeBase, AttributeModifier> entry = (Entry) attributeBaseAttributeModifierEntry;
             AttributeModifiable attributemodifiable = attributemapbase.a((AttributeBase) entry.getKey());
 
             if (attributemodifiable != null) {
diff --git a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
index 3b4cc9871c123cfd134783745145c407bbccea0f..794f1a7fbc1ed4380ae22245e4c2b021466cdb6b 100644
--- a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
+++ b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
@@ -301,11 +301,8 @@ public abstract class MobSpawnerAbstract {
             if (this.mobs.isEmpty()) {
                 nbttaglist.add(this.spawnData.a());
             } else {
-                Iterator iterator = this.mobs.iterator();
-
-                while (iterator.hasNext()) {
-                    MobSpawnerData mobspawnerdata = (MobSpawnerData) iterator.next();
 
+                for (MobSpawnerData mobspawnerdata : this.mobs) {
                     nbttaglist.add(mobspawnerdata.a());
                 }
             }
diff --git a/src/main/java/net/minecraft/server/NBTTagCompound.java b/src/main/java/net/minecraft/server/NBTTagCompound.java
index 06d5acab794e3ee139a11f9b068e8a359c46db2c..eda06b07106bda798f496aacb8733303a45a7935 100644
--- a/src/main/java/net/minecraft/server/NBTTagCompound.java
+++ b/src/main/java/net/minecraft/server/NBTTagCompound.java
@@ -83,10 +83,8 @@ public class NBTTagCompound implements NBTBase {
 
     @Override
     public void write(DataOutput dataoutput) throws IOException {
-        Iterator iterator = this.map.keySet().iterator();
 
-        while (iterator.hasNext()) {
-            String s = (String) iterator.next();
+        for (String s : this.map.keySet()) {
             NBTBase nbtbase = (NBTBase) this.map.get(s);
 
             a(s, nbtbase, dataoutput);
@@ -477,10 +475,8 @@ public class NBTTagCompound implements NBTBase {
     }
 
     public NBTTagCompound a(NBTTagCompound nbttagcompound) {
-        Iterator iterator = nbttagcompound.map.keySet().iterator();
 
-        while (iterator.hasNext()) {
-            String s = (String) iterator.next();
+        for (String s : nbttagcompound.map.keySet()) {
             NBTBase nbtbase = (NBTBase) nbttagcompound.map.get(s);
 
             if (nbtbase.getTypeId() == 10) {
diff --git a/src/main/java/net/minecraft/server/NBTTagIntArray.java b/src/main/java/net/minecraft/server/NBTTagIntArray.java
index eb3fc6db692b3be8cf6adea5eacc405b3c317f04..b470feaf3d3f06b60966cfceb9c46b3feb6f7776 100644
--- a/src/main/java/net/minecraft/server/NBTTagIntArray.java
+++ b/src/main/java/net/minecraft/server/NBTTagIntArray.java
@@ -64,9 +64,7 @@ public class NBTTagIntArray extends NBTList<NBTTagInt> {
         int[] aint = this.data;
         int i = aint.length;
 
-        for (int j = 0; j < i; ++j) {
-            int k = aint[j];
-
+        for (int k : aint) {
             dataoutput.writeInt(k);
         }
 
diff --git a/src/main/java/net/minecraft/server/NBTTagList.java b/src/main/java/net/minecraft/server/NBTTagList.java
index ad4807e0bdd6409bd798f995da8f43cec1d0b385..6625f5fad9396b696188710c6b35a23f1a99862f 100644
--- a/src/main/java/net/minecraft/server/NBTTagList.java
+++ b/src/main/java/net/minecraft/server/NBTTagList.java
@@ -74,11 +74,8 @@ public class NBTTagList extends NBTList<NBTBase> {
 
         dataoutput.writeByte(this.type);
         dataoutput.writeInt(this.list.size());
-        Iterator iterator = this.list.iterator();
-
-        while (iterator.hasNext()) {
-            NBTBase nbtbase = (NBTBase) iterator.next();
 
+        for (NBTBase nbtbase : this.list) {
             nbtbase.write(dataoutput);
         }
 
diff --git a/src/main/java/net/minecraft/server/NameReferencingFileConverter.java b/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
index c5957c2d6c54b076ebe7f9a432e30551d2b6febc..b7d16805f7ada2aabe449133e9692bfad1c29d55 100644
--- a/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
+++ b/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
@@ -33,11 +33,8 @@ public class NameReferencingFileConverter {
 
     static List<String> a(File file, Map<String, String[]> map) throws IOException {
         List<String> list = Files.readLines(file, StandardCharsets.UTF_8);
-        Iterator iterator = list.iterator();
-
-        while (iterator.hasNext()) {
-            String s = (String) iterator.next();
 
+        for (String s : list) {
             s = s.trim();
             if (!s.startsWith("#") && s.length() >= 1) {
                 String[] astring = s.split("\\|");
@@ -148,10 +145,8 @@ public class NameReferencingFileConverter {
                 Map<String, String[]> map = Maps.newHashMap();
 
                 a(NameReferencingFileConverter.a, (Map) map);
-                Iterator iterator = map.keySet().iterator();
 
-                while (iterator.hasNext()) {
-                    String s = (String) iterator.next();
+                for (String s : map.keySet()) {
                     String[] astring = (String[]) map.get(s);
                     Date date = astring.length > 1 ? b(astring[1], (Date) null) : null;
                     String s1 = astring.length > 2 ? astring[2] : null;
@@ -385,9 +380,7 @@ public class NameReferencingFileConverter {
                         String[] astring1 = astring;
                         int k = astring1.length;
 
-                        for (int l = 0; l < k; ++l) {
-                            String s3 = astring1[l];
-
+                        for (String s3 : astring1) {
                             if (s3 != null && s3.equalsIgnoreCase(gameprofile.getName())) {
                                 s2 = s3;
                                 break;
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
index d5a8036b764699a70a69b7dc3d45ea6d10835c44..84cce963cce812a5f79a684d83fe27428eee0921 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
@@ -184,11 +184,8 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
         packetdataserializer.d(this.f.length);
         packetdataserializer.writeBytes(this.f);
         packetdataserializer.d(this.g.size());
-        Iterator iterator = this.g.iterator();
-
-        while (iterator.hasNext()) {
-            NBTTagCompound nbttagcompound = (NBTTagCompound) iterator.next();
 
+        for (NBTTagCompound nbttagcompound : this.g) {
             packetdataserializer.a(nbttagcompound);
         }
 
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutScoreboardTeam.java b/src/main/java/net/minecraft/server/PacketPlayOutScoreboardTeam.java
index 99dc43159f240135957aee35f6129f19419c6c25..b99a6f8212ba672670137f169563d581e5a13831 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutScoreboardTeam.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutScoreboardTeam.java
@@ -113,11 +113,8 @@ public class PacketPlayOutScoreboardTeam implements Packet<PacketListenerPlayOut
 
         if (this.i == 0 || this.i == 3 || this.i == 4) {
             packetdataserializer.d(this.h.size());
-            Iterator iterator = this.h.iterator();
-
-            while (iterator.hasNext()) {
-                String s = (String) iterator.next();
 
+            for (String s : this.h) {
                 packetdataserializer.a(s);
             }
         }
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutWindowItems.java b/src/main/java/net/minecraft/server/PacketPlayOutWindowItems.java
index 6fb3168fd6de0074b1b378e992e4706c50ae15ab..2df83f27a967d464bab00f5a3f2789c9fa1fecdc 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutWindowItems.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutWindowItems.java
@@ -47,11 +47,8 @@ public class PacketPlayOutWindowItems implements Packet<PacketListenerPlayOut> {
     public void b(PacketDataSerializer packetdataserializer) throws IOException {
         packetdataserializer.writeByte(this.a);
         packetdataserializer.writeShort(this.b.size());
-        Iterator iterator = this.b.iterator();
-
-        while (iterator.hasNext()) {
-            ItemStack itemstack = (ItemStack) iterator.next();
 
+        for (ItemStack itemstack : this.b) {
             packetdataserializer.a(itemstack);
         }
 
diff --git a/src/main/java/net/minecraft/server/Pathfinder.java b/src/main/java/net/minecraft/server/Pathfinder.java
index 731710e4a16ff857ba1fe67f1c84361b9658f6d1..ba9909452f11a78e1267af1fa90c1db14cf8c5d2 100644
--- a/src/main/java/net/minecraft/server/Pathfinder.java
+++ b/src/main/java/net/minecraft/server/Pathfinder.java
@@ -69,8 +69,7 @@ public class Pathfinder {
 
             pathpoint1.i = true;
             // Paper start - optimize collection
-            for (int i1 = 0; i1 < list.size(); i1++) {
-                Map.Entry<PathDestination, BlockPosition> entry = list.get(i1);
+            for (Map.Entry<PathDestination, BlockPosition> entry : list) {
                 PathDestination pathdestination = entry.getKey();
 
                 if (pathpoint1.c((PathPoint) pathdestination) <= (float) i) {
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalDefendVillage.java b/src/main/java/net/minecraft/server/PathfinderGoalDefendVillage.java
index 38a73e167f1a0dd0f5855be018848704ebb2affb..88ec497df8bbd87d82e05d0bb8f3b2384e952fa0 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalDefendVillage.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalDefendVillage.java
@@ -21,15 +21,11 @@ public class PathfinderGoalDefendVillage extends PathfinderGoalTarget {
         AxisAlignedBB axisalignedbb = this.a.getBoundingBox().grow(10.0D, 8.0D, 10.0D);
         List<EntityLiving> list = this.a.world.a(EntityVillager.class, this.c, this.a, axisalignedbb);
         List<EntityHuman> list1 = this.a.world.a(this.c, (EntityLiving) this.a, axisalignedbb);
-        Iterator iterator = list.iterator();
 
-        while (iterator.hasNext()) {
-            EntityLiving entityliving = (EntityLiving) iterator.next();
+        for (EntityLiving entityliving : list) {
             EntityVillager entityvillager = (EntityVillager) entityliving;
-            Iterator iterator1 = list1.iterator();
 
-            while (iterator1.hasNext()) {
-                EntityHuman entityhuman = (EntityHuman) iterator1.next();
+            for (EntityHuman entityhuman : list1) {
                 int i = entityvillager.g(entityhuman);
 
                 if (i <= -100) {
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalHurtByTarget.java b/src/main/java/net/minecraft/server/PathfinderGoalHurtByTarget.java
index 3eb9d2fcbbba3ddbfddd1916abc5523dcad0fd75..fc517fc322f189cf2cc299cc87a89fe4e8fce4be 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalHurtByTarget.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalHurtByTarget.java
@@ -30,9 +30,7 @@ public class PathfinderGoalHurtByTarget extends PathfinderGoalTarget {
                 Class[] aclass = this.d;
                 int j = aclass.length;
 
-                for (int k = 0; k < j; ++k) {
-                    Class<?> oclass = aclass[k];
-
+                for (Class<?> oclass : aclass) {
                     if (oclass.isAssignableFrom(entityliving.getClass())) {
                         return false;
                     }
@@ -68,20 +66,15 @@ public class PathfinderGoalHurtByTarget extends PathfinderGoalTarget {
         double d0 = this.k();
         AxisAlignedBB axisalignedbb = AxisAlignedBB.a(this.e.getPositionVector()).grow(d0, 10.0D, d0);
         List<EntityInsentient> list = this.e.world.b(this.e.getClass(), axisalignedbb);
-        Iterator iterator = list.iterator();
-
-        while (iterator.hasNext()) {
-            EntityInsentient entityinsentient = (EntityInsentient) iterator.next();
 
+        for (EntityInsentient entityinsentient : list) {
             if (this.e != entityinsentient && entityinsentient.getGoalTarget() == null && (!(this.e instanceof EntityTameableAnimal) || ((EntityTameableAnimal) this.e).getOwner() == ((EntityTameableAnimal) entityinsentient).getOwner()) && !entityinsentient.r(this.e.getLastDamager())) {
                 if (this.i != null) {
                     boolean flag = false;
                     Class[] aclass = this.i;
                     int i = aclass.length;
 
-                    for (int j = 0; j < i; ++j) {
-                        Class<?> oclass = aclass[j];
-
+                    for (Class<?> oclass : aclass) {
                         if (entityinsentient.getClass() == oclass) {
                             flag = true;
                             break;
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalSelector.java b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
index b63f274ec0afec96b4879f9ebaed72c416d1f9d2..566a20c831e0daaf4301c959ed3833e8cbf2ac7f 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
@@ -80,8 +80,7 @@ public class PathfinderGoalSelector {
 
         gameprofilerfiller.enter("goalCleanup");
         // Paper start - remove streams from pathfindergoalselector
-        for (Iterator<PathfinderGoalWrapped> iterator = this.d.iterator(); iterator.hasNext();) {
-            PathfinderGoalWrapped wrappedGoal = iterator.next();
+        for (PathfinderGoalWrapped wrappedGoal : this.d) {
             if (!wrappedGoal.g()) {
                 continue;
             }
@@ -100,8 +99,8 @@ public class PathfinderGoalSelector {
         gameprofilerfiller.exit();
         gameprofilerfiller.enter("goalUpdate");
         // Paper start - remove streams from pathfindergoalselector
-        goal_update_loop: for (Iterator<PathfinderGoalWrapped> iterator = this.d.iterator(); iterator.hasNext();) {
-            PathfinderGoalWrapped wrappedGoal = iterator.next();
+        goal_update_loop:
+        for (PathfinderGoalWrapped wrappedGoal : this.d) {
             if (wrappedGoal.g()) {
                 continue;
             }
@@ -144,8 +143,7 @@ public class PathfinderGoalSelector {
         gameprofilerfiller.exit();
         gameprofilerfiller.enter("goalTick");
         // Paper start - remove streams from pathfindergoalselector
-        for (Iterator<PathfinderGoalWrapped> iterator = this.d.iterator(); iterator.hasNext();) {
-            PathfinderGoalWrapped wrappedGoal = iterator.next();
+        for (PathfinderGoalWrapped wrappedGoal : this.d) {
             if (wrappedGoal.g()) {
                 wrappedGoal.e();
             }
diff --git a/src/main/java/net/minecraft/server/PathfinderNormal.java b/src/main/java/net/minecraft/server/PathfinderNormal.java
index 853cd45d4a076383437b4ccc7daea66401ec9aba..dc9f5ef873ebec04ba0c2093a5c6593bb21d563c 100644
--- a/src/main/java/net/minecraft/server/PathfinderNormal.java
+++ b/src/main/java/net/minecraft/server/PathfinderNormal.java
@@ -337,11 +337,8 @@ public class PathfinderNormal extends PathfinderAbstract {
             return PathType.UNPASSABLE_RAIL;
         } else {
             PathType pathtype1 = PathType.BLOCKED;
-            Iterator iterator = enumset.iterator();
-
-            while (iterator.hasNext()) {
-                PathType pathtype2 = (PathType) iterator.next();
 
+            for (PathType pathtype2 : enumset) {
                 if (entityinsentient.a(pathtype2) < 0.0F) {
                     return pathtype2;
                 }
diff --git a/src/main/java/net/minecraft/server/PathfinderTurtle.java b/src/main/java/net/minecraft/server/PathfinderTurtle.java
index e385e98638155447d4e7789c49962a916d4d1256..328b5a2ad6574d53b04a1fee23a1869065786706 100644
--- a/src/main/java/net/minecraft/server/PathfinderTurtle.java
+++ b/src/main/java/net/minecraft/server/PathfinderTurtle.java
@@ -228,8 +228,7 @@ public class PathfinderTurtle extends PathfinderNormal {
             EnumDirection[] aenumdirection = EnumDirection.values();
             int l = aenumdirection.length;
 
-            for (int i1 = 0; i1 < l; ++i1) {
-                EnumDirection enumdirection = aenumdirection[i1];
+            for (EnumDirection enumdirection : aenumdirection) {
                 PathType pathtype1 = b(iblockaccess, blockposition_mutableblockposition.d(i, j, k).c(enumdirection));
 
                 if (pathtype1 == PathType.BLOCKED) {
diff --git a/src/main/java/net/minecraft/server/PathfinderWater.java b/src/main/java/net/minecraft/server/PathfinderWater.java
index e4408178fc4d6e8dbed3b7597528392bceb952cc..c32eb6d20814d66b5ed954abfe027b8e6dac57f2 100644
--- a/src/main/java/net/minecraft/server/PathfinderWater.java
+++ b/src/main/java/net/minecraft/server/PathfinderWater.java
@@ -26,8 +26,7 @@ public class PathfinderWater extends PathfinderAbstract {
         EnumDirection[] aenumdirection = EnumDirection.values();
         int j = aenumdirection.length;
 
-        for (int k = 0; k < j; ++k) {
-            EnumDirection enumdirection = aenumdirection[k];
+        for (EnumDirection enumdirection : aenumdirection) {
             PathPoint pathpoint1 = this.b(pathpoint.a + enumdirection.getAdjacentX(), pathpoint.b + enumdirection.getAdjacentY(), pathpoint.c + enumdirection.getAdjacentZ());
 
             if (pathpoint1 != null && !pathpoint1.i) {
diff --git a/src/main/java/net/minecraft/server/PersistentRaid.java b/src/main/java/net/minecraft/server/PersistentRaid.java
index f003f95aca2c9a41b548c8ca2de1194818268c80..cf813943a735bc63952e151fadaa9b1d9c4ce834 100644
--- a/src/main/java/net/minecraft/server/PersistentRaid.java
+++ b/src/main/java/net/minecraft/server/PersistentRaid.java
@@ -176,10 +176,8 @@ public class PersistentRaid extends PersistentBase {
         nbttagcompound.setInt("NextAvailableID", this.c);
         nbttagcompound.setInt("Tick", this.d);
         NBTTagList nbttaglist = new NBTTagList();
-        Iterator iterator = this.raids.values().iterator();
 
-        while (iterator.hasNext()) {
-            Raid raid = (Raid) iterator.next();
+        for (Raid raid : this.raids.values()) {
             NBTTagCompound nbttagcompound1 = new NBTTagCompound();
 
             raid.a(nbttagcompound1);
@@ -202,10 +200,8 @@ public class PersistentRaid extends PersistentBase {
     public Raid getNearbyRaid(BlockPosition blockposition, int i) {
         Raid raid = null;
         double d0 = (double) i;
-        Iterator iterator = this.raids.values().iterator();
 
-        while (iterator.hasNext()) {
-            Raid raid1 = (Raid) iterator.next();
+        for (Raid raid1 : this.raids.values()) {
             double d1 = raid1.getCenter().j(blockposition);
 
             if (raid1.v() && d1 < d0) {
diff --git a/src/main/java/net/minecraft/server/PersistentScoreboard.java b/src/main/java/net/minecraft/server/PersistentScoreboard.java
index a08c54da92d87fcd24ef8e2556901d3b1977c5ea..ee2de1a2f8279e031ad9fdd1ce59fee8f4269d13 100644
--- a/src/main/java/net/minecraft/server/PersistentScoreboard.java
+++ b/src/main/java/net/minecraft/server/PersistentScoreboard.java
@@ -170,11 +170,10 @@ public class PersistentScoreboard extends PersistentBase {
     protected NBTTagList a() {
         NBTTagList nbttaglist = new NBTTagList();
         Collection<ScoreboardTeam> collection = this.b.getTeams();
-        Iterator iterator = collection.iterator();
 
-        while (iterator.hasNext()) {
-            ScoreboardTeam scoreboardteam = (ScoreboardTeam) iterator.next();
-            if (!com.destroystokyo.paper.PaperConfig.saveEmptyScoreboardTeams && scoreboardteam.getPlayerNameSet().isEmpty()) continue; // Paper
+        for (ScoreboardTeam scoreboardteam : collection) {
+            if (!com.destroystokyo.paper.PaperConfig.saveEmptyScoreboardTeams && scoreboardteam.getPlayerNameSet().isEmpty())
+                continue; // Paper
             NBTTagCompound nbttagcompound = new NBTTagCompound();
 
             nbttagcompound.setString("Name", scoreboardteam.getName());
@@ -228,11 +227,8 @@ public class PersistentScoreboard extends PersistentBase {
     protected NBTTagList e() {
         NBTTagList nbttaglist = new NBTTagList();
         Collection<ScoreboardObjective> collection = this.b.getObjectives();
-        Iterator iterator = collection.iterator();
-
-        while (iterator.hasNext()) {
-            ScoreboardObjective scoreboardobjective = (ScoreboardObjective) iterator.next();
 
+        for (ScoreboardObjective scoreboardobjective : collection) {
             if (scoreboardobjective.getCriteria() != null) {
                 NBTTagCompound nbttagcompound = new NBTTagCompound();
 
diff --git a/src/main/java/net/minecraft/server/PersistentStructureLegacy.java b/src/main/java/net/minecraft/server/PersistentStructureLegacy.java
index 75f2da314b348ccf807975d9a7faeb71934a6e3b..bc1d1e65ebf2ac8794dc592733c480cbf77d8191 100644
--- a/src/main/java/net/minecraft/server/PersistentStructureLegacy.java
+++ b/src/main/java/net/minecraft/server/PersistentStructureLegacy.java
@@ -55,10 +55,8 @@ public class PersistentStructureLegacy {
     }
 
     public void a(long i) {
-        Iterator iterator = this.f.iterator();
 
-        while (iterator.hasNext()) {
-            String s = (String) iterator.next();
+        for (String s : this.f) {
             PersistentIndexed persistentindexed = (PersistentIndexed) this.e.get(s);
 
             if (persistentindexed != null && persistentindexed.c(i)) {
@@ -79,10 +77,8 @@ public class PersistentStructureLegacy {
 
         NBTTagCompound nbttagcompound2 = nbttagcompound1.getCompound("Structures");
         NBTTagCompound nbttagcompound3 = nbttagcompound2.getCompound("References");
-        Iterator iterator = this.g.iterator();
 
-        while (iterator.hasNext()) {
-            String s = (String) iterator.next();
+        for (String s : this.g) {
             StructureGenerator<?> structuregenerator = (StructureGenerator) StructureGenerator.a.get(s.toLowerCase(Locale.ROOT));
 
             if (!nbttagcompound3.hasKeyOfType(s, 12) && structuregenerator != null) {
@@ -135,10 +131,8 @@ public class PersistentStructureLegacy {
         NBTTagCompound nbttagcompound1 = nbttagcompound.getCompound("Level");
         NBTTagCompound nbttagcompound2 = nbttagcompound1.getCompound("Structures");
         NBTTagCompound nbttagcompound3 = nbttagcompound2.getCompound("Starts");
-        Iterator iterator = this.g.iterator();
 
-        while (iterator.hasNext()) {
-            String s = (String) iterator.next();
+        for (String s : this.g) {
             Long2ObjectMap<NBTTagCompound> long2objectmap = (Long2ObjectMap) this.d.get(s);
 
             if (long2objectmap != null) {
@@ -162,10 +156,8 @@ public class PersistentStructureLegacy {
 
     private void a(@Nullable WorldPersistentData worldpersistentdata) {
         if (worldpersistentdata != null) {
-            Iterator iterator = this.f.iterator();
 
-            while (iterator.hasNext()) {
-                String s = (String) iterator.next();
+            for (String s : this.f) {
                 NBTTagCompound nbttagcompound = new NBTTagCompound();
 
                 try {
@@ -177,10 +169,7 @@ public class PersistentStructureLegacy {
                     ;
                 }
 
-                Iterator iterator1 = nbttagcompound.getKeys().iterator();
-
-                while (iterator1.hasNext()) {
-                    String s1 = (String) iterator1.next();
+                for (String s1 : nbttagcompound.getKeys()) {
                     NBTTagCompound nbttagcompound1 = nbttagcompound.getCompound(s1);
                     long i = ChunkCoordIntPair.pair(nbttagcompound1.getInt("ChunkX"), nbttagcompound1.getInt("ChunkZ"));
                     NBTTagList nbttaglist = nbttagcompound1.getList("Children", 10);
@@ -212,10 +201,8 @@ public class PersistentStructureLegacy {
                     PersistentIndexed persistentindexed1 = new PersistentIndexed(s4);
 
                     this.e.put(s, persistentindexed1);
-                    Iterator iterator2 = nbttagcompound.getKeys().iterator();
 
-                    while (iterator2.hasNext()) {
-                        String s5 = (String) iterator2.next();
+                    for (String s5 : nbttagcompound.getKeys()) {
                         NBTTagCompound nbttagcompound2 = nbttagcompound.getCompound(s5);
 
                         persistentindexed1.a(ChunkCoordIntPair.pair(nbttagcompound2.getInt("ChunkX"), nbttagcompound2.getInt("ChunkZ")));
diff --git a/src/main/java/net/minecraft/server/PiglinAI.java b/src/main/java/net/minecraft/server/PiglinAI.java
index df5aafec9a5844a1ae3e948d8a787051a8903bce..0fa81573f1384b10a4eb321ca0113b6717821bbc 100644
--- a/src/main/java/net/minecraft/server/PiglinAI.java
+++ b/src/main/java/net/minecraft/server/PiglinAI.java
@@ -254,11 +254,8 @@ public class PiglinAI {
     private static void a(EntityPiglin entitypiglin, List<ItemStack> list, Vec3D vec3d) {
         if (!list.isEmpty()) {
             entitypiglin.swingHand(EnumHand.OFF_HAND);
-            Iterator iterator = list.iterator();
-
-            while (iterator.hasNext()) {
-                ItemStack itemstack = (ItemStack) iterator.next();
 
+            for (ItemStack itemstack : list) {
                 BehaviorUtil.a((EntityLiving) entitypiglin, itemstack, vec3d.add(0.0D, 1.0D, 0.0D));
             }
         }
diff --git a/src/main/java/net/minecraft/server/PistonExtendsChecker.java b/src/main/java/net/minecraft/server/PistonExtendsChecker.java
index b684f2b297eda2014962bed36087d08bfcddb119..a38017a95bf539b4bf71a1c37da4850dc38ce99d 100644
--- a/src/main/java/net/minecraft/server/PistonExtendsChecker.java
+++ b/src/main/java/net/minecraft/server/PistonExtendsChecker.java
@@ -44,8 +44,8 @@ public class PistonExtendsChecker {
         } else if (!this.a(this.d, this.e)) {
             return false;
         } else {
-            for (int i = 0; i < this.f.size(); ++i) {
-                BlockPosition blockposition = (BlockPosition) this.f.get(i);
+            for (BlockPosition blockPosition : this.f) {
+                BlockPosition blockposition = (BlockPosition) blockPosition;
 
                 if (a(this.a.getType(blockposition).getBlock()) && !this.a(blockposition)) {
                     return false;
@@ -173,9 +173,7 @@ public class PistonExtendsChecker {
         //EnumDirection[] aenumdirection = EnumDirection.values(); // Yatopia
         int i = aenumdirection.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumDirection enumdirection = aenumdirection[j];
-
+        for (EnumDirection enumdirection : aenumdirection) {
             if (enumdirection.n() != this.e.n()) {
                 BlockPosition blockposition1 = blockposition.shift(enumdirection);
                 IBlockData iblockdata1 = this.a.getType(blockposition1);
diff --git a/src/main/java/net/minecraft/server/PlayerChunk.java b/src/main/java/net/minecraft/server/PlayerChunk.java
index e357e6d2d4c59474eaed135251f25153890fe0de..31973f446886f102c1ffe4e33b92ab5816339d9e 100644
--- a/src/main/java/net/minecraft/server/PlayerChunk.java
+++ b/src/main/java/net/minecraft/server/PlayerChunk.java
@@ -483,13 +483,13 @@ public class PlayerChunk {
 
         if (flag) { // flag -> border only
             Object[] backingSet = players.getBackingSet();
-            for (int i = 0, len = backingSet.length; i < len; ++i) {
-                Object temp = backingSet[i];
+            for (Object temp : backingSet) {
                 if (!(temp instanceof EntityPlayer)) {
                     continue;
                 }
-                EntityPlayer player = (EntityPlayer)temp;
-                if (!this.chunkMap.playerChunkManager.isChunkSent(player, this.location.x, this.location.z)) continue; // Tuinity - replace player chunk management
+                EntityPlayer player = (EntityPlayer) temp;
+                if (!this.chunkMap.playerChunkManager.isChunkSent(player, this.location.x, this.location.z))
+                    continue; // Tuinity - replace player chunk management
 
                 int viewDistance = viewDistanceMap.getLastViewDistance(player);
                 long lastPosition = viewDistanceMap.getLastCoordinate(player);
@@ -503,13 +503,13 @@ public class PlayerChunk {
             }
         } else {
             Object[] backingSet = players.getBackingSet();
-            for (int i = 0, len = backingSet.length; i < len; ++i) {
-                Object temp = backingSet[i];
+            for (Object temp : backingSet) {
                 if (!(temp instanceof EntityPlayer)) {
                     continue;
                 }
-                EntityPlayer player = (EntityPlayer)temp;
-                if (!this.chunkMap.playerChunkManager.isChunkSent(player, this.location.x, this.location.z)) continue; // Tuinity - replace player chunk management
+                EntityPlayer player = (EntityPlayer) temp;
+                if (!this.chunkMap.playerChunkManager.isChunkSent(player, this.location.x, this.location.z))
+                    continue; // Tuinity - replace player chunk management
                 player.playerConnection.sendPacket(packet);
             }
         }
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index 1fdca622dcc9ba8c9c296ec6ca14da989ba38ed8..c9bfabc07aee418e7a2e4ba4b9ba75fd726f1885 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -867,8 +867,8 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                 } else {
                     playerchunk = new PlayerChunk(new ChunkCoordIntPair(i), j, this.lightEngine, this.p, this);
                     // Tuinity start
-                    for (int index = 0, len = this.regionManagers.size(); index < len; ++index) {
-                        this.regionManagers.get(index).addChunk(playerchunk.location.x, playerchunk.location.z);
+                    for (com.tuinity.tuinity.chunk.SingleThreadChunkRegionManager regionManager : this.regionManagers) {
+                        regionManager.addChunk(playerchunk.location.x, playerchunk.location.z);
                     }
                     // Tuinity end
                 }
@@ -945,8 +945,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
             }
         }
 
-        for (int i = 0, len = reschedule.size(); i < len; ++i) {
-            PlayerChunk playerchunk = reschedule.get(i);
+        for (PlayerChunk playerchunk : reschedule) {
             playerchunk.lastAutoSaveTime = this.world.getTime();
             this.autoSaveQueue.add(playerchunk);
         }
@@ -1126,8 +1125,8 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                 boolean removed;
                 if ((removed = this.pendingUnload.remove(i, playerchunk)) && ichunkaccess != null) { // Tuinity end
                     // Tuinity start
-                    for (int index = 0, len = this.regionManagers.size(); index < len; ++index) {
-                        this.regionManagers.get(index).removeChunk(playerchunk.location.x, playerchunk.location.z);
+                    for (com.tuinity.tuinity.chunk.SingleThreadChunkRegionManager regionManager : this.regionManagers) {
+                        regionManager.removeChunk(playerchunk.location.x, playerchunk.location.z);
                     }
                     // Tuinity end
                     this.getVillagePlace().queueUnload(playerchunk.location.pair(), MinecraftServer.currentTickLong + 1); // Tuinity - unload POI data
@@ -1155,8 +1154,8 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                     this.worldLoadListener.a(ichunkaccess.getPos(), (ChunkStatus) null);
                 } else if (removed) { // Tuinity start
                     // Tuinity start
-                    for (int index = 0, len = this.regionManagers.size(); index < len; ++index) {
-                        this.regionManagers.get(index).removeChunk(playerchunk.location.x, playerchunk.location.z);
+                    for (com.tuinity.tuinity.chunk.SingleThreadChunkRegionManager regionManager : this.regionManagers) {
+                        regionManager.removeChunk(playerchunk.location.x, playerchunk.location.z);
                     }
                     // Tuinity end
                     this.getVillagePlace().queueUnload(playerchunk.location.pair(), MinecraftServer.currentTickLong + 1); // Tuinity - unload POI data
@@ -1424,12 +1423,10 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                     List<Entity>[] aentityslice = chunk.getEntitySlices(); // Spigot
                     int i = aentityslice.length;
 
-                    for (int j = 0; j < i; ++j) {
-                        List<Entity> entityslice = aentityslice[j]; // Spigot
-                        Iterator iterator = entityslice.iterator();
+                    // Spigot
+                    for (List<Entity> entityslice : aentityslice) {
 
-                        while (iterator.hasNext()) {
-                            Entity entity = (Entity) iterator.next();
+                        for (Entity entity : entityslice) {
                             // CraftBukkit start - these are spawned serialized (DefinedStructure) and we don't call an add event below at the moment due to ordering complexities
                             boolean needsRemoval = false;
                             if (chunk.needsDecoration && !this.world.getServer().getServer().getSpawnNPCs() && entity instanceof NPC) {
@@ -1881,8 +1878,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         Object[] backingSet = playersInRange.getBackingSet();
 
         if (reducedRange) {
-            for (int i = 0, len = backingSet.length; i < len; ++i) {
-                Object raw = backingSet[i];
+            for (Object raw : backingSet) {
                 if (!(raw instanceof EntityPlayer)) {
                     continue;
                 }
@@ -1895,8 +1891,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         } else {
             final double range = (ChunkMapDistance.MOB_SPAWN_RANGE * 16) * (ChunkMapDistance.MOB_SPAWN_RANGE * 16);
             // before spigot, mob spawn range was actually mob spawn range + tick range, but it was split
-            for (int i = 0, len = backingSet.length; i < len; ++i) {
-                Object raw = backingSet[i];
+            for (Object raw : backingSet) {
                 if (!(raw instanceof EntityPlayer)) {
                     continue;
                 }
@@ -2053,13 +2048,13 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         Object[] backingSet = inRange.getBackingSet();
 
         if (flag) { // flag -> border only
-            for (int i = 0, len = backingSet.length; i < len; ++i) {
-                Object temp = backingSet[i];
+            for (Object temp : backingSet) {
                 if (!(temp instanceof EntityPlayer)) {
                     continue;
                 }
-                EntityPlayer player = (EntityPlayer)temp;
-                if (!this.playerChunkManager.isChunkSent(player, chunkcoordintpair.x, chunkcoordintpair.z)) continue; // Tuinity - replace player chunk management
+                EntityPlayer player = (EntityPlayer) temp;
+                if (!this.playerChunkManager.isChunkSent(player, chunkcoordintpair.x, chunkcoordintpair.z))
+                    continue; // Tuinity - replace player chunk management
                 int viewDistance = this.playerChunkManager.broadcastMap.getLastViewDistance(player); // Tuinity - replace player chunk loader system
                 long lastPosition = this.playerChunkManager.broadcastMap.getLastCoordinate(player); // Tuinity - replace player chunk loader system
 
@@ -2070,13 +2065,13 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                 }
             }
         } else {
-            for (int i = 0, len = backingSet.length; i < len; ++i) {
-                Object temp = backingSet[i];
+            for (Object temp : backingSet) {
                 if (!(temp instanceof EntityPlayer)) {
                     continue;
                 }
-                EntityPlayer player = (EntityPlayer)temp;
-                if (!this.playerChunkManager.isChunkSent(player, chunkcoordintpair.x, chunkcoordintpair.z)) continue; // Tuinity - replace player chunk management
+                EntityPlayer player = (EntityPlayer) temp;
+                if (!this.playerChunkManager.isChunkSent(player, chunkcoordintpair.x, chunkcoordintpair.z))
+                    continue; // Tuinity - replace player chunk management
                 players.add(player);
             }
         }
@@ -2467,12 +2462,11 @@ Sections go from 0..16. Now whenever a section is not empty, it can potentially
 
             if (newTrackerCandidates != null) {
                 Object[] rawData = newTrackerCandidates.getBackingSet();
-                for (int i = 0, len = rawData.length; i < len; ++i) {
-                    Object raw = rawData[i];
+                for (Object raw : rawData) {
                     if (!(raw instanceof EntityPlayer)) {
                         continue;
                     }
-                    EntityPlayer player = (EntityPlayer)raw;
+                    EntityPlayer player = (EntityPlayer) raw;
                     this.updatePlayer(player);
                 }
             }
@@ -2509,11 +2503,8 @@ Sections go from 0..16. Now whenever a section is not empty, it can potentially
                 return;
             }
             // Airplane end
-            Iterator iterator = this.trackedPlayers.iterator();
-
-            while (iterator.hasNext()) {
-                EntityPlayer entityplayer = (EntityPlayer) iterator.next();
 
+            for (EntityPlayer entityplayer : this.trackedPlayers) {
                 entityplayer.playerConnection.sendPacket(packet);
             }
 
@@ -2534,11 +2525,8 @@ Sections go from 0..16. Now whenever a section is not empty, it can potentially
         }
 
         public void a() {
-            Iterator iterator = this.trackedPlayers.iterator();
-
-            while (iterator.hasNext()) {
-                EntityPlayer entityplayer = (EntityPlayer) iterator.next();
 
+            for (EntityPlayer entityplayer : this.trackedPlayers) {
                 this.trackerEntry.a(entityplayer);
             }
 
@@ -2604,10 +2592,8 @@ Sections go from 0..16. Now whenever a section is not empty, it can potentially
         private int b() {
             Collection<Entity> collection = this.tracker.getAllPassengers();
             int i = this.trackingDistance;
-            Iterator iterator = collection.iterator();
 
-            while (iterator.hasNext()) {
-                Entity entity = (Entity) iterator.next();
+            for (Entity entity : collection) {
                 int j = entity.getEntityType().getChunkRange() * 16;
                 j = org.spigotmc.TrackingRange.getEntityTrackingRange(entity, j); // Paper
 
@@ -2620,11 +2606,8 @@ Sections go from 0..16. Now whenever a section is not empty, it can potentially
         }
 
         public void track(List<EntityPlayer> list) {
-            Iterator iterator = list.iterator();
-
-            while (iterator.hasNext()) {
-                EntityPlayer entityplayer = (EntityPlayer) iterator.next();
 
+            for (EntityPlayer entityplayer : list) {
                 this.updatePlayer(entityplayer);
             }
 
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index ad7ff7fd55da19709a6d5abbf55a70f7b3ce7508..ade56433d7d75fc704f66aec8405ec9cbf49b68c 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -1085,10 +1085,9 @@ public class PlayerConnection implements PacketListenerPlayIn {
             itemstack1.a("author", (NBTBase) NBTTagString.a(this.player.getDisplayName().getString()));
             itemstack1.a("title", (NBTBase) NBTTagString.a(color(s, hasPerm))); // Purpur - sign book
             NBTTagList nbttaglist = new NBTTagList();
-            Iterator iterator = list.iterator();
 
-            while (iterator.hasNext()) {
-                String s1 = color((String) iterator.next(), hasPerm);// Purpur - sign book
+            for (String value : list) {
+                String s1 = color(value, hasPerm);// Purpur - sign book
                 ChatComponentText chatcomponenttext = new ChatComponentText(s1);
                 String s2 = IChatBaseComponent.ChatSerializer.a((IChatBaseComponent) chatcomponenttext);
 
@@ -1413,8 +1412,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
         try {
             world.getCollisions(entity, newBox, collisions, true);
 
-            for (int i = 0, len = collisions.size(); i < len; ++i) {
-                final AxisAlignedBB box = collisions.get(i);
+            for (final AxisAlignedBB box : collisions) {
                 if (!box.voxelShapeIntersect(oldBox)) {
                     return true;
                 }
@@ -1754,10 +1752,8 @@ public class PlayerConnection implements PacketListenerPlayIn {
     public void a(PacketPlayInSpectate packetplayinspectate) {
         PlayerConnectionUtils.ensureMainThread(packetplayinspectate, this, this.player.getWorldServer());
         if (this.player.isSpectator()) {
-            Iterator iterator = this.minecraftServer.getWorlds().iterator();
 
-            while (iterator.hasNext()) {
-                WorldServer worldserver = (WorldServer) iterator.next();
+            for (WorldServer worldserver : this.minecraftServer.getWorlds()) {
                 Entity entity = packetplayinspectate.a(worldserver);
 
                 if (entity != null) {
diff --git a/src/main/java/net/minecraft/server/PlayerInventory.java b/src/main/java/net/minecraft/server/PlayerInventory.java
index 478f33dbbd0b5a9b81ee420f77c97fa8c40e27d6..aac9e14f23b59102228d2ff148a2cb63b44aaa11 100644
--- a/src/main/java/net/minecraft/server/PlayerInventory.java
+++ b/src/main/java/net/minecraft/server/PlayerInventory.java
@@ -248,10 +248,9 @@ public class PlayerInventory implements IInventory, INamableTileEntity {
     }
 
     public void j() {
-        Iterator iterator = this.f.iterator();
 
-        while (iterator.hasNext()) {
-            NonNullList<ItemStack> nonnulllist = (NonNullList) iterator.next();
+        for (NonNullList<ItemStack> itemStackNonNullList : this.f) {
+            NonNullList<ItemStack> nonnulllist = (NonNullList) itemStackNonNullList;
 
             for (int i = 0; i < nonnulllist.size(); ++i) {
                 if (!((ItemStack) nonnulllist.get(i)).isEmpty()) {
@@ -362,10 +361,9 @@ public class PlayerInventory implements IInventory, INamableTileEntity {
     }
 
     public void f(ItemStack itemstack) {
-        Iterator iterator = this.f.iterator();
 
-        while (iterator.hasNext()) {
-            NonNullList<ItemStack> nonnulllist = (NonNullList) iterator.next();
+        for (NonNullList<ItemStack> itemStackNonNullList : this.f) {
+            NonNullList<ItemStack> nonnulllist = (NonNullList) itemStackNonNullList;
 
             for (int i = 0; i < nonnulllist.size(); ++i) {
                 if (nonnulllist.get(i) == itemstack) {
@@ -568,10 +566,9 @@ public class PlayerInventory implements IInventory, INamableTileEntity {
     }
 
     public void dropContents() {
-        Iterator iterator = this.f.iterator();
 
-        while (iterator.hasNext()) {
-            List<ItemStack> list = (List) iterator.next();
+        for (NonNullList<ItemStack> itemStackNonNullList : this.f) {
+            List<ItemStack> list = (List) itemStackNonNullList;
 
             for (int i = 0; i < list.size(); ++i) {
                 ItemStack itemstack = (ItemStack) list.get(i);
@@ -627,12 +624,8 @@ public class PlayerInventory implements IInventory, INamableTileEntity {
         }
          */
         List<NonNullList<ItemStack>> components = this.getComponents();
-        for (int i = 0; i < components.size(); i++) {
-            List<ItemStack> list = components.get(i);
-
-            for (int j = 0; j < list.size(); j++) {
-                ItemStack itemstack1 = list.get(j);
-
+        for (List<ItemStack> list : components) {
+            for (ItemStack itemstack1 : list) {
                 if (!itemstack1.isEmpty() && itemstack1.doMaterialsMatch(itemstack)) {
                     return true;
                 }
@@ -653,10 +646,9 @@ public class PlayerInventory implements IInventory, INamableTileEntity {
 
     @Override
     public void clear() {
-        Iterator iterator = this.f.iterator();
 
-        while (iterator.hasNext()) {
-            List<ItemStack> list = (List) iterator.next();
+        for (NonNullList<ItemStack> itemStackNonNullList : this.f) {
+            List<ItemStack> list = (List) itemStackNonNullList;
 
             list.clear();
         }
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 9f0481959cde6c2461b073bd0b67d4079d2d66c2..030ccb1e8e7bfccd40048ac998be7d28412030d0 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -288,8 +288,8 @@ public abstract class PlayerList {
         // CraftBukkit start - sendAll above replaced with this loop
         PacketPlayOutPlayerInfo packet = new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, entityplayer);
 
-        for (int i = 0; i < this.players.size(); ++i) {
-            EntityPlayer entityplayer1 = (EntityPlayer) this.players.get(i);
+        for (EntityPlayer player : this.players) {
+            EntityPlayer entityplayer1 = (EntityPlayer) player;
 
             if (entityplayer1.getBukkitEntity().canSee(entityplayer.getBukkitEntity())) {
                 entityplayer1.playerConnection.sendPacket(packet);
@@ -299,7 +299,7 @@ public abstract class PlayerList {
                 continue;
             }
 
-            entityplayer.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, new EntityPlayer[] { entityplayer1}));
+            entityplayer.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, new EntityPlayer[]{entityplayer1}));
         }
         entityplayer.sentListPacket = true;
         entityplayer.supressTrackerForLogin = false; // Paper
@@ -321,11 +321,7 @@ public abstract class PlayerList {
             entityplayer.setResourcePack(this.server.getResourcePack(), this.server.getResourcePackHash());
         }
 
-        Iterator iterator = entityplayer.getEffects().iterator();
-
-        while (iterator.hasNext()) {
-            MobEffect mobeffect = (MobEffect) iterator.next();
-
+        for (MobEffect mobeffect : entityplayer.getEffects()) {
             playerconnection.sendPacket(new PacketPlayOutEntityEffect(entityplayer.getId(), mobeffect));
         }
 
@@ -420,10 +416,9 @@ public abstract class PlayerList {
 
             if (scoreboardobjective != null && !set.contains(scoreboardobjective)) {
                 List<Packet<?>> list = scoreboardserver.getScoreboardScorePacketsForObjective(scoreboardobjective);
-                Iterator iterator1 = list.iterator();
 
-                while (iterator1.hasNext()) {
-                    Packet<?> packet = (Packet) iterator1.next();
+                for (Packet<?> value : list) {
+                    Packet<?> packet = (Packet) value;
 
                     entityplayer.playerConnection.sendPacket(packet);
                 }
@@ -592,8 +587,8 @@ public abstract class PlayerList {
         // CraftBukkit start
         // this.sendAll(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.REMOVE_PLAYER, new EntityPlayer[]{entityplayer}));
         PacketPlayOutPlayerInfo packet = new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.REMOVE_PLAYER, entityplayer);
-        for (int i = 0; i < players.size(); i++) {
-            EntityPlayer entityplayer2 = (EntityPlayer) this.players.get(i);
+        for (EntityPlayer player : players) {
+            EntityPlayer entityplayer2 = (EntityPlayer) player;
 
             if (entityplayer2.getBukkitEntity().canSee(entityplayer.getBukkitEntity())) {
                 entityplayer2.playerConnection.sendPacket(packet);
@@ -618,8 +613,8 @@ public abstract class PlayerList {
 
         EntityPlayer entityplayer;
 
-        for (int i = 0; i < this.players.size(); ++i) {
-            entityplayer = (EntityPlayer) this.players.get(i);
+        for (EntityPlayer entityPlayer : this.players) {
+            entityplayer = (EntityPlayer) entityPlayer;
             if (entityplayer.getUniqueID().equals(uuid)) {
                 list.add(entityplayer);
             }
@@ -632,10 +627,8 @@ public abstract class PlayerList {
         }
         // Paper end
 
-        Iterator iterator = list.iterator();
-
-        while (iterator.hasNext()) {
-            entityplayer = (EntityPlayer) iterator.next();
+        for (EntityPlayer entityPlayer : list) {
+            entityplayer = entityPlayer;
             savePlayerFile(entityplayer); // CraftBukkit - Force the player's inventory to be saved
             entityplayer.playerConnection.disconnect(new ChatMessage("multiplayer.disconnect.duplicate_login", new Object[0]));
         }
@@ -780,11 +773,8 @@ public abstract class PlayerList {
         entityplayer1.copyFrom(entityplayer, flag);
         entityplayer1.e(entityplayer.getId());
         entityplayer1.a(entityplayer.getMainHand());
-        Iterator iterator = entityplayer.getScoreboardTags().iterator();
-
-        while (iterator.hasNext()) {
-            String s = (String) iterator.next();
 
+        for (String s : entityplayer.getScoreboardTags()) {
             entityplayer1.addScoreboardTag(s);
         }
 
@@ -962,20 +952,19 @@ public abstract class PlayerList {
     }
 
     public void sendAll(Packet<?> packet) {
-        for (int i = 0; i < this.players.size(); ++i) {
-            ((EntityPlayer) this.players.get(i)).playerConnection.sendPacket(packet);
+        for (EntityPlayer player : this.players) {
+            ((EntityPlayer) player).playerConnection.sendPacket(packet);
         }
 
     }
 
     // CraftBukkit start - add a world/entity limited version
     public void sendAll(Packet packet, EntityHuman entityhuman) {
-        for (int i = 0; i < this.players.size(); ++i) {
-            EntityPlayer entityplayer =  this.players.get(i);
+        for (EntityPlayer entityplayer : this.players) {
             if (entityhuman != null && entityhuman instanceof EntityPlayer && !entityplayer.getBukkitEntity().canSee(((EntityPlayer) entityhuman).getBukkitEntity())) {
                 continue;
             }
-            ((EntityPlayer) this.players.get(i)).playerConnection.sendPacket(packet);
+            ((EntityPlayer) entityplayer).playerConnection.sendPacket(packet);
         }
     }
 
@@ -988,8 +977,8 @@ public abstract class PlayerList {
     // CraftBukkit end
 
     public void a(Packet<?> packet, ResourceKey<World> resourcekey) {
-        for (int i = 0; i < this.players.size(); ++i) {
-            EntityPlayer entityplayer = (EntityPlayer) this.players.get(i);
+        for (EntityPlayer player : this.players) {
+            EntityPlayer entityplayer = (EntityPlayer) player;
 
             if (entityplayer.world.getDimensionKey() == resourcekey) {
                 entityplayer.playerConnection.sendPacket(packet);
@@ -1003,10 +992,8 @@ public abstract class PlayerList {
 
         if (scoreboardteambase != null) {
             Collection<String> collection = scoreboardteambase.getPlayerNameSet();
-            Iterator iterator = collection.iterator();
 
-            while (iterator.hasNext()) {
-                String s = (String) iterator.next();
+            for (String s : collection) {
                 EntityPlayer entityplayer = this.getPlayer(s);
 
                 if (entityplayer != null && entityplayer != entityhuman) {
@@ -1023,8 +1010,8 @@ public abstract class PlayerList {
         if (scoreboardteambase == null) {
             this.sendMessage(ichatbasecomponent, ChatMessageType.SYSTEM, entityhuman.getUniqueID());
         } else {
-            for (int i = 0; i < this.players.size(); ++i) {
-                EntityPlayer entityplayer = (EntityPlayer) this.players.get(i);
+            for (EntityPlayer player : this.players) {
+                EntityPlayer entityplayer = (EntityPlayer) player;
 
                 if (entityplayer.getScoreboardTeam() != scoreboardteambase) {
                     entityplayer.sendMessage(ichatbasecomponent, entityhuman.getUniqueID());
@@ -1184,14 +1171,15 @@ public abstract class PlayerList {
         MinecraftTimings.savePlayers.startTiming(); // Paper
         int numSaved = 0;
         long now = MinecraftServer.currentTick;
-        for (int i = 0; i < this.players.size(); ++i) {
-            EntityPlayer entityplayer = this.players.get(i);
-            if (interval == null || now - entityplayer.lastSave >= interval) {
-                this.savePlayerFile(entityplayer);
-                if (interval != null && ++numSaved <= com.destroystokyo.paper.PaperConfig.maxPlayerAutoSavePerTick) { break; }
+            for (EntityPlayer entityplayer : this.players) {
+                if (interval == null || now - entityplayer.lastSave >= interval) {
+                    this.savePlayerFile(entityplayer);
+                    if (interval != null && ++numSaved <= com.destroystokyo.paper.PaperConfig.maxPlayerAutoSavePerTick) {
+                        break;
+                    }
+                }
+                // Paper end
             }
-            // Paper end
-        }
         MinecraftTimings.savePlayers.stopTiming(); // Paper
         return null; }); // Paper - ensure main
     }
@@ -1264,11 +1252,8 @@ public abstract class PlayerList {
 
     public List<EntityPlayer> b(String s) {
         List<EntityPlayer> list = Lists.newArrayList();
-        Iterator iterator = this.players.iterator();
-
-        while (iterator.hasNext()) {
-            EntityPlayer entityplayer = (EntityPlayer) iterator.next();
 
+        for (EntityPlayer entityplayer : this.players) {
             if (entityplayer.v().equals(s)) {
                 list.add(entityplayer);
             }
@@ -1390,11 +1375,8 @@ public abstract class PlayerList {
     public void a(int i) {
         this.viewDistance = i;
         //this.sendAll(new PacketPlayOutViewDistance(i)); // Paper - move into setViewDistance
-        Iterator iterator = this.server.getWorlds().iterator();
-
-        while (iterator.hasNext()) {
-            WorldServer worldserver = (WorldServer) iterator.next();
 
+        for (WorldServer worldserver : this.server.getWorlds()) {
             if (worldserver != null) {
                 worldserver.getChunkProvider().setViewDistance(i);
             }
@@ -1433,11 +1415,8 @@ public abstract class PlayerList {
 
         this.sendAll(new PacketPlayOutTags(this.server.getTagRegistry()));
         PacketPlayOutRecipeUpdate packetplayoutrecipeupdate = new PacketPlayOutRecipeUpdate(this.server.getCraftingManager().b());
-        Iterator iterator1 = this.players.iterator();
-
-        while (iterator1.hasNext()) {
-            EntityPlayer entityplayer = (EntityPlayer) iterator1.next();
 
+        for (EntityPlayer entityplayer : this.players) {
             entityplayer.playerConnection.sendPacket(packetplayoutrecipeupdate);
             entityplayer.getRecipeBook().a(entityplayer);
         }
diff --git a/src/main/java/net/minecraft/server/PotionUtil.java b/src/main/java/net/minecraft/server/PotionUtil.java
index c995ce224e5236ecb33a01375824c55931faa9c0..57ab78260c387b60090d956b512a093160426181 100644
--- a/src/main/java/net/minecraft/server/PotionUtil.java
+++ b/src/main/java/net/minecraft/server/PotionUtil.java
@@ -77,11 +77,8 @@ public class PotionUtil {
             float f1 = 0.0F;
             float f2 = 0.0F;
             int j = 0;
-            Iterator iterator = collection.iterator();
-
-            while (iterator.hasNext()) {
-                MobEffect mobeffect = (MobEffect) iterator.next();
 
+            for (MobEffect mobeffect : collection) {
                 if (mobeffect.isShowParticles()) {
                     int k = mobeffect.getMobEffect().getColor();
                     int l = mobeffect.getAmplifier() + 1;
@@ -131,11 +128,8 @@ public class PotionUtil {
         } else {
             NBTTagCompound nbttagcompound = itemstack.getOrCreateTag();
             NBTTagList nbttaglist = nbttagcompound.getList("CustomPotionEffects", 9);
-            Iterator iterator = collection.iterator();
-
-            while (iterator.hasNext()) {
-                MobEffect mobeffect = (MobEffect) iterator.next();
 
+            for (MobEffect mobeffect : collection) {
                 nbttaglist.add(mobeffect.a(new NBTTagCompound()));
             }
 
diff --git a/src/main/java/net/minecraft/server/ProjectileHelper.java b/src/main/java/net/minecraft/server/ProjectileHelper.java
index 515ba50aec81497d27297e4b6c642e86b7de53ca..8b3df2ec4199e50c7afe550d91b3bcfe8ad028e0 100644
--- a/src/main/java/net/minecraft/server/ProjectileHelper.java
+++ b/src/main/java/net/minecraft/server/ProjectileHelper.java
@@ -32,10 +32,8 @@ public final class ProjectileHelper {
     public static MovingObjectPositionEntity a(World world, Entity entity, Vec3D vec3d, Vec3D vec3d1, AxisAlignedBB axisalignedbb, Predicate<Entity> predicate) {
         double d0 = Double.MAX_VALUE;
         Entity entity1 = null;
-        Iterator iterator = world.getEntities(entity, axisalignedbb, predicate).iterator();
 
-        while (iterator.hasNext()) {
-            Entity entity2 = (Entity) iterator.next();
+        for (Entity entity2 : world.getEntities(entity, axisalignedbb, predicate)) {
             AxisAlignedBB axisalignedbb1 = entity2.getBoundingBox().g(0.30000001192092896D);
             Optional<Vec3D> optional = axisalignedbb1.b(vec3d, vec3d1);
 
diff --git a/src/main/java/net/minecraft/server/ProtoChunk.java b/src/main/java/net/minecraft/server/ProtoChunk.java
index d8b759874545293764690b2ba08a4bd7605c76ae..7d3eff1d391d478f5ca43c8f8694bb956435bb33 100644
--- a/src/main/java/net/minecraft/server/ProtoChunk.java
+++ b/src/main/java/net/minecraft/server/ProtoChunk.java
@@ -184,11 +184,8 @@ public class ProtoChunk implements IChunkAccess {
 
     public ShortList[] w() {
         ShortList[] ashortlist = new ShortList[16];
-        Iterator iterator = this.l.iterator();
-
-        while (iterator.hasNext()) {
-            BlockPosition blockposition = (BlockPosition) iterator.next();
 
+        for (BlockPosition blockposition : this.l) {
             IChunkAccess.a(ashortlist, blockposition.getY() >> 4).add(l(blockposition));
         }
 
diff --git a/src/main/java/net/minecraft/server/Raid.java b/src/main/java/net/minecraft/server/Raid.java
index 29253025f3990eb172e776367409081969fb97ac..4865ac0c83c08b38e552f68cf17f55d4a5ed326d 100644
--- a/src/main/java/net/minecraft/server/Raid.java
+++ b/src/main/java/net/minecraft/server/Raid.java
@@ -421,10 +421,8 @@ public class Raid {
 
         while (iterator.hasNext()) {
             Set<EntityRaider> set = (Set) iterator.next();
-            Iterator iterator1 = set.iterator();
 
-            while (iterator1.hasNext()) {
-                EntityRaider entityraider = (EntityRaider) iterator1.next();
+            for (EntityRaider entityraider : set) {
                 BlockPosition blockposition = entityraider.getChunkCoordinates();
 
                 if (!entityraider.dead && entityraider.world.getDimensionKey() == this.world.getDimensionKey() && this.center.j(blockposition) < 12544.0D) {
@@ -447,10 +445,8 @@ public class Raid {
             }
         }
 
-        Iterator iterator2 = hashset.iterator();
-
-        while (iterator2.hasNext()) {
-            EntityRaider entityraider1 = (EntityRaider) iterator2.next();
+        for (Object o : hashset) {
+            EntityRaider entityraider1 = (EntityRaider) o;
 
             this.a(entityraider1, true);
         }
@@ -461,10 +457,8 @@ public class Raid {
         float f = 13.0F;
         boolean flag = true;
         Collection<EntityPlayer> collection = this.bossBattle.getPlayers();
-        Iterator iterator = this.world.getPlayers().iterator();
 
-        while (iterator.hasNext()) {
-            EntityPlayer entityplayer = (EntityPlayer) iterator.next();
+        for (EntityPlayer entityplayer : this.world.getPlayers()) {
             Vec3D vec3d = entityplayer.getPositionVector();
             Vec3D vec3d1 = Vec3D.a((BaseBlockPosition) blockposition);
             float f1 = MathHelper.sqrt((vec3d1.x - vec3d.x) * (vec3d1.x - vec3d.x) + (vec3d1.z - vec3d.z) * (vec3d1.z - vec3d.z));
@@ -492,8 +486,7 @@ public class Raid {
         EntityRaider leader = null;
         List<EntityRaider> raiders = new java.util.ArrayList<>();
         // CraftBukkit end
-        for (int k = 0; k < j; ++k) {
-            Raid.Wave raid_wave = araid_wave[k];
+        for (Wave raid_wave : araid_wave) {
             int l = this.a(raid_wave, i, flag1) + this.a(raid_wave, this.random, i, difficultydamagescaler, flag1);
             int i1 = 0;
 
@@ -565,10 +558,9 @@ public class Raid {
 
     public float sumMobHealth() {
         float f = 0.0F;
-        Iterator iterator = this.raiders.values().iterator();
 
-        while (iterator.hasNext()) {
-            Set<EntityRaider> set = (Set) iterator.next();
+        for (Set<EntityRaider> entityRaiders : this.raiders.values()) {
+            Set<EntityRaider> set = (Set) entityRaiders;
 
             EntityRaider entityraider;
 
@@ -658,11 +650,8 @@ public class Raid {
         });
         Set<EntityRaider> set = (Set) this.raiders.get(i);
         EntityRaider entityraider1 = null;
-        Iterator iterator = set.iterator();
-
-        while (iterator.hasNext()) {
-            EntityRaider entityraider2 = (EntityRaider) iterator.next();
 
+        for (EntityRaider entityraider2 : set) {
             if (entityraider2.getUniqueID().equals(entityraider.getUniqueID())) {
                 entityraider1 = entityraider2;
                 break;
@@ -764,11 +753,8 @@ public class Raid {
         nbttagcompound.setInt("CY", this.center.getY());
         nbttagcompound.setInt("CZ", this.center.getZ());
         NBTTagList nbttaglist = new NBTTagList();
-        Iterator iterator = this.heroes.iterator();
-
-        while (iterator.hasNext()) {
-            UUID uuid = (UUID) iterator.next();
 
+        for (UUID uuid : this.heroes) {
             nbttaglist.add(GameProfileSerializer.a(uuid));
         }
 
@@ -831,9 +817,7 @@ public class Raid {
             Raid.Status[] araid_status = Raid.Status.e;
             int i = araid_status.length;
 
-            for (int j = 0; j < i; ++j) {
-                Raid.Status raid_status = araid_status[j];
-
+            for (Status raid_status : araid_status) {
                 if (s.equalsIgnoreCase(raid_status.name())) {
                     return raid_status;
                 }
diff --git a/src/main/java/net/minecraft/server/RecipeBookServer.java b/src/main/java/net/minecraft/server/RecipeBookServer.java
index 3882f0697a97c50d11ab8709a6108d2d43a3c9c5..32c0de517314237417e94bccc49f1bd706bd87aa 100644
--- a/src/main/java/net/minecraft/server/RecipeBookServer.java
+++ b/src/main/java/net/minecraft/server/RecipeBookServer.java
@@ -21,10 +21,9 @@ public class RecipeBookServer extends RecipeBook {
     public int a(Collection<IRecipe<?>> collection, EntityPlayer entityplayer) {
         List<MinecraftKey> list = Lists.newArrayList();
         int i = 0;
-        Iterator iterator = collection.iterator();
 
-        while (iterator.hasNext()) {
-            IRecipe<?> irecipe = (IRecipe) iterator.next();
+        for (IRecipe<?> iRecipe : collection) {
+            IRecipe<?> irecipe = (IRecipe) iRecipe;
             MinecraftKey minecraftkey = irecipe.getKey();
 
             if (!this.recipes.contains(minecraftkey) && !irecipe.isComplex() && CraftEventFactory.handlePlayerRecipeListUpdateEvent(entityplayer, minecraftkey)) { // CraftBukkit
@@ -43,10 +42,9 @@ public class RecipeBookServer extends RecipeBook {
     public int b(Collection<IRecipe<?>> collection, EntityPlayer entityplayer) {
         List<MinecraftKey> list = Lists.newArrayList();
         int i = 0;
-        Iterator iterator = collection.iterator();
 
-        while (iterator.hasNext()) {
-            IRecipe<?> irecipe = (IRecipe) iterator.next();
+        for (IRecipe<?> iRecipe : collection) {
+            IRecipe<?> irecipe = (IRecipe) iRecipe;
             MinecraftKey minecraftkey = irecipe.getKey();
 
             if (this.recipes.contains(minecraftkey)) {
diff --git a/src/main/java/net/minecraft/server/RecipeItemStack.java b/src/main/java/net/minecraft/server/RecipeItemStack.java
index f6d92949409b66d5d0c578e010aebd058903c6fa..b5683e9141637a207f7480ec67e4b221e76a4bdc 100644
--- a/src/main/java/net/minecraft/server/RecipeItemStack.java
+++ b/src/main/java/net/minecraft/server/RecipeItemStack.java
@@ -62,9 +62,7 @@ public final class RecipeItemStack implements Predicate<ItemStack> {
                 ItemStack[] aitemstack = this.choices;
                 int i = aitemstack.length;
 
-                for (int j = 0; j < i; ++j) {
-                    ItemStack itemstack1 = aitemstack[j];
-
+                for (ItemStack itemstack1 : aitemstack) {
                     // CraftBukkit start
                     if (exact) {
                         if (itemstack1.getItem() == itemstack.getItem() && ItemStack.equals(itemstack, itemstack1)) {
@@ -91,9 +89,7 @@ public final class RecipeItemStack implements Predicate<ItemStack> {
             ItemStack[] aitemstack = this.choices;
             int i = aitemstack.length;
 
-            for (int j = 0; j < i; ++j) {
-                ItemStack itemstack = aitemstack[j];
-
+            for (ItemStack itemstack : aitemstack) {
                 this.d.add(AutoRecipeStackManager.c(itemstack));
             }
 
@@ -107,8 +103,8 @@ public final class RecipeItemStack implements Predicate<ItemStack> {
         this.buildChoices();
         packetdataserializer.d(this.choices.length);
 
-        for (int i = 0; i < this.choices.length; ++i) {
-            packetdataserializer.a(this.choices[i]);
+        for (ItemStack choice : this.choices) {
+            packetdataserializer.a(choice);
         }
 
     }
@@ -121,9 +117,7 @@ public final class RecipeItemStack implements Predicate<ItemStack> {
             RecipeItemStack.Provider[] arecipeitemstack_provider = this.b;
             int i = arecipeitemstack_provider.length;
 
-            for (int j = 0; j < i; ++j) {
-                RecipeItemStack.Provider recipeitemstack_provider = arecipeitemstack_provider[j];
-
+            for (Provider recipeitemstack_provider : arecipeitemstack_provider) {
                 jsonarray.add(recipeitemstack_provider.b());
             }
 
diff --git a/src/main/java/net/minecraft/server/RemoteControlListener.java b/src/main/java/net/minecraft/server/RemoteControlListener.java
index 8006659f167879863b5e89e527813e6f664e90d6..0a8b66895fda9d578b92ced3547744df9c01368d 100644
--- a/src/main/java/net/minecraft/server/RemoteControlListener.java
+++ b/src/main/java/net/minecraft/server/RemoteControlListener.java
@@ -103,11 +103,8 @@ public class RemoteControlListener extends RemoteConnectionThread {
         this.a = false;
         this.a(this.e);
         super.b();
-        Iterator iterator = this.g.iterator();
-
-        while (iterator.hasNext()) {
-            RemoteControlSession remotecontrolsession = (RemoteControlSession) iterator.next();
 
+        for (RemoteControlSession remotecontrolsession : this.g) {
             if (remotecontrolsession.c()) {
                 remotecontrolsession.b();
             }
diff --git a/src/main/java/net/minecraft/server/ScoreboardServer.java b/src/main/java/net/minecraft/server/ScoreboardServer.java
index 929397a4ca8af8aba24c36bd6fc8ed0071982b64..44acc2c57037f67e7b62915668b2760e5a00aadf 100644
--- a/src/main/java/net/minecraft/server/ScoreboardServer.java
+++ b/src/main/java/net/minecraft/server/ScoreboardServer.java
@@ -143,9 +143,7 @@ public class ScoreboardServer extends Scoreboard {
         Runnable[] arunnable = this.c;
         int i = arunnable.length;
 
-        for (int j = 0; j < i; ++j) {
-            Runnable runnable = arunnable[j];
-
+        for (Runnable runnable : arunnable) {
             runnable.run();
         }
 
@@ -175,15 +173,13 @@ public class ScoreboardServer extends Scoreboard {
 
     public void e(ScoreboardObjective scoreboardobjective) {
         List<Packet<?>> list = this.getScoreboardScorePacketsForObjective(scoreboardobjective);
-        Iterator iterator = this.a.getPlayerList().getPlayers().iterator();
 
-        while (iterator.hasNext()) {
-            EntityPlayer entityplayer = (EntityPlayer) iterator.next();
-            if (entityplayer.getBukkitEntity().getScoreboard().getHandle() != this) continue; // CraftBukkit - Only players on this board
-            Iterator iterator1 = list.iterator();
+        for (EntityPlayer entityplayer : this.a.getPlayerList().getPlayers()) {
+            if (entityplayer.getBukkitEntity().getScoreboard().getHandle() != this)
+                continue; // CraftBukkit - Only players on this board
 
-            while (iterator1.hasNext()) {
-                Packet<?> packet = (Packet) iterator1.next();
+            for (Packet<?> value : list) {
+                Packet<?> packet = (Packet) value;
 
                 entityplayer.playerConnection.sendPacket(packet);
             }
@@ -208,15 +204,13 @@ public class ScoreboardServer extends Scoreboard {
 
     public void g(ScoreboardObjective scoreboardobjective) {
         List<Packet<?>> list = this.f(scoreboardobjective);
-        Iterator iterator = this.a.getPlayerList().getPlayers().iterator();
 
-        while (iterator.hasNext()) {
-            EntityPlayer entityplayer = (EntityPlayer) iterator.next();
-            if (entityplayer.getBukkitEntity().getScoreboard().getHandle() != this) continue; // CraftBukkit - Only players on this board
-            Iterator iterator1 = list.iterator();
+        for (EntityPlayer entityplayer : this.a.getPlayerList().getPlayers()) {
+            if (entityplayer.getBukkitEntity().getScoreboard().getHandle() != this)
+                continue; // CraftBukkit - Only players on this board
 
-            while (iterator1.hasNext()) {
-                Packet<?> packet = (Packet) iterator1.next();
+            for (Packet<?> value : list) {
+                Packet<?> packet = (Packet) value;
 
                 entityplayer.playerConnection.sendPacket(packet);
             }
diff --git a/src/main/java/net/minecraft/server/SensorNearestItems.java b/src/main/java/net/minecraft/server/SensorNearestItems.java
index 1de170b9fe6f2888da6dcf0151aaf1f865691c6a..f80e83f462b141f3facbaf8b6b84ce49d2427ede 100644
--- a/src/main/java/net/minecraft/server/SensorNearestItems.java
+++ b/src/main/java/net/minecraft/server/SensorNearestItems.java
@@ -25,8 +25,7 @@ public class SensorNearestItems extends Sensor<EntityInsentient> {
 
         list.sort(Comparator.comparingDouble(entityinsentient::h)); // better to take the sort perf hit than using line of sight more than we need to.
         EntityItem nearest = null;
-        for (int index = 0, len = list.size(); index < len; ++index) {
-            EntityItem item = list.get(index);
+        for (EntityItem item : list) {
             if (entityinsentient.hasLineOfSight(item)) {
                 nearest = item;
                 break;
diff --git a/src/main/java/net/minecraft/server/SensorNearestLivingEntities.java b/src/main/java/net/minecraft/server/SensorNearestLivingEntities.java
index 83e47ab6eb27847f7260f297d7b04a8e6c82d619..d9ee0845936e5464c34c518b11205b3435bde4a2 100644
--- a/src/main/java/net/minecraft/server/SensorNearestLivingEntities.java
+++ b/src/main/java/net/minecraft/server/SensorNearestLivingEntities.java
@@ -24,8 +24,7 @@ public class SensorNearestLivingEntities extends Sensor<EntityLiving> {
         behaviorcontroller.setMemory(MemoryModuleType.MOBS, list); // Paper - decompile error
         // Tuinity start - remove streams
         List<EntityLiving> visible = new java.util.ArrayList<>(list.size());
-        for (int index = 0, len = list.size(); index < len; ++index) {
-            EntityLiving nearby = list.get(index);
+        for (EntityLiving nearby : list) {
             if (Sensor.a(entityliving, nearby)) { // copied from removed code, make sure to update
                 visible.add(nearby);
             }
diff --git a/src/main/java/net/minecraft/server/SensorNearestPlayers.java b/src/main/java/net/minecraft/server/SensorNearestPlayers.java
index fa2d366ca6695c099c29469bf69a7845350b4f07..4dd4d11dddb1824b5f38444c3a23558345893d2a 100644
--- a/src/main/java/net/minecraft/server/SensorNearestPlayers.java
+++ b/src/main/java/net/minecraft/server/SensorNearestPlayers.java
@@ -28,9 +28,8 @@ public class SensorNearestPlayers extends Sensor<EntityLiving> {
         behaviorcontroller.setMemory(MemoryModuleType.NEAREST_PLAYERS, nearby);
         EntityHuman first = null;
         EntityHuman firstNonSpectator = null;
-        for (int index = 0, len = nearby.size(); index < len; ++index) {
-            EntityHuman entity = nearby.get(index);
-            if (!Sensor.a(entityliving, (EntityLiving)entity)) { // copied from removed code, make sure to update
+        for (EntityHuman entity : nearby) {
+            if (!Sensor.a(entityliving, (EntityLiving) entity)) { // copied from removed code, make sure to update
                 continue;
             }
             if (first == null) {
diff --git a/src/main/java/net/minecraft/server/SensorVillagerBabies.java b/src/main/java/net/minecraft/server/SensorVillagerBabies.java
index 794b33a13b7f11b973caf085b0bded9b2135a4d7..a872e926b5c6c317047818dd1349957c781a0f8f 100644
--- a/src/main/java/net/minecraft/server/SensorVillagerBabies.java
+++ b/src/main/java/net/minecraft/server/SensorVillagerBabies.java
@@ -25,8 +25,7 @@ public class SensorVillagerBabies extends Sensor<EntityLiving> {
         List<EntityLiving> nearby = this.c(entityliving); // copied from removed code, make sure to update
         List<EntityLiving> ret = new java.util.ArrayList<>();
 
-        for (int index = 0, len = nearby.size(); index < len; ++index) {
-            EntityLiving entity = nearby.get(index);
+        for (EntityLiving entity : nearby) {
             if (this.b(entity)) { // copied from removed code, make sure to update
                 ret.add(entity);
             }
diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
index 5312eeadce5cfc973d2370ed920ea3ba9fee3462..d0ba05dc31e9cb8dfbf4e2e3538fc16eebdbf2d9 100644
--- a/src/main/java/net/minecraft/server/ServerConnection.java
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -139,11 +139,8 @@ public class ServerConnection {
 
     public void b() {
         this.c = false;
-        Iterator iterator = this.listeningChannels.iterator();
-
-        while (iterator.hasNext()) {
-            ChannelFuture channelfuture = (ChannelFuture) iterator.next();
 
+        for (ChannelFuture channelfuture : this.listeningChannels) {
             try {
                 channelfuture.channel().close().sync();
             } catch (InterruptedException interruptedexception) {
diff --git a/src/main/java/net/minecraft/server/ServerStatisticManager.java b/src/main/java/net/minecraft/server/ServerStatisticManager.java
index 6ee2f5ba23d573414e31ed2be228adf87e5bf46a..ec4e5ecb813c3f9a751b21140d2749bf49a153df 100644
--- a/src/main/java/net/minecraft/server/ServerStatisticManager.java
+++ b/src/main/java/net/minecraft/server/ServerStatisticManager.java
@@ -96,19 +96,13 @@ public class ServerStatisticManager extends StatisticManager {
                     nbttagcompound = GameProfileSerializer.a(datafixer, DataFixTypes.STATS, nbttagcompound, nbttagcompound.getInt("DataVersion"));
                     if (nbttagcompound.hasKeyOfType("stats", 10)) {
                         NBTTagCompound nbttagcompound1 = nbttagcompound.getCompound("stats");
-                        Iterator iterator = nbttagcompound1.getKeys().iterator();
-
-                        while (iterator.hasNext()) {
-                            String s1 = (String) iterator.next();
 
+                        for (String s1 : nbttagcompound1.getKeys()) {
                             if (nbttagcompound1.hasKeyOfType(s1, 10)) {
                                 SystemUtils.a(IRegistry.STATS.getOptional(new MinecraftKey(s1)), (statisticwrapper) -> {
                                     NBTTagCompound nbttagcompound2 = nbttagcompound1.getCompound(s1);
-                                    Iterator iterator1 = nbttagcompound2.getKeys().iterator();
-
-                                    while (iterator1.hasNext()) {
-                                        String s2 = (String) iterator1.next();
 
+                                    for (String s2 : nbttagcompound2.getKeys()) {
                                         if (nbttagcompound2.hasKeyOfType(s2, 99)) {
                                             SystemUtils.a(this.a(statisticwrapper, s2), (statistic) -> {
                                                 this.a.put(statistic, nbttagcompound2.getInt(s2));
@@ -200,10 +194,9 @@ public class ServerStatisticManager extends StatisticManager {
         }
 
         JsonObject jsonobject = new JsonObject();
-        Iterator iterator = map.entrySet().iterator();
 
-        while (iterator.hasNext()) {
-            Entry<StatisticWrapper<?>, JsonObject> entry = (Entry) iterator.next();
+        for (Entry<StatisticWrapper<?>, JsonObject> statisticWrapperJsonObjectEntry : map.entrySet()) {
+            Entry<StatisticWrapper<?>, JsonObject> entry = (Entry) statisticWrapperJsonObjectEntry;
 
             jsonobject.add(IRegistry.STATS.getKey(entry.getKey()).toString(), (JsonElement) entry.getValue());
         }
@@ -229,10 +222,9 @@ public class ServerStatisticManager extends StatisticManager {
 
         if (i - this.f > 300) {
             this.f = i;
-            Iterator iterator = this.d().iterator();
 
-            while (iterator.hasNext()) {
-                Statistic<?> statistic = (Statistic) iterator.next();
+            for (Statistic<?> value : this.d()) {
+                Statistic<?> statistic = (Statistic) value;
 
                 object2intmap.put(statistic, this.getStatisticValue(statistic));
             }
diff --git a/src/main/java/net/minecraft/server/SharedConstants.java b/src/main/java/net/minecraft/server/SharedConstants.java
index 470690dbe19db1622eca44f6801ece37d7ad7426..779194cc6b1fc9971a0436e7a50e24b3afe7478d 100644
--- a/src/main/java/net/minecraft/server/SharedConstants.java
+++ b/src/main/java/net/minecraft/server/SharedConstants.java
@@ -25,9 +25,7 @@ public class SharedConstants {
         char[] achar = s.toCharArray();
         int i = achar.length;
 
-        for (int j = 0; j < i; ++j) {
-            char c0 = achar[j];
-
+        for (char c0 : achar) {
             if (isAllowedChatCharacter(c0)) {
                 stringbuilder.append(c0);
             }
diff --git a/src/main/java/net/minecraft/server/SpawnerCreature.java b/src/main/java/net/minecraft/server/SpawnerCreature.java
index b5b0f295d63eb245a6221f88110f1bb1694c641c..2fdd5e4424b65896f53b430effba9e6b769dd165 100644
--- a/src/main/java/net/minecraft/server/SpawnerCreature.java
+++ b/src/main/java/net/minecraft/server/SpawnerCreature.java
@@ -36,11 +36,8 @@ public final class SpawnerCreature {
         // Paper end - add countMobs parameter
         SpawnerCreatureProbabilities spawnercreatureprobabilities = new SpawnerCreatureProbabilities();
         Object2IntOpenHashMap<EnumCreatureType> object2intopenhashmap = new Object2IntOpenHashMap();
-        Iterator iterator = iterable.iterator();
-
-        while (iterator.hasNext()) {
-            Entity entity = (Entity) iterator.next();
 
+        for (Entity entity : iterable) {
             if (entity instanceof EntityInsentient) {
                 EntityInsentient entityinsentient = (EntityInsentient) entity;
 
@@ -55,8 +52,8 @@ public final class SpawnerCreature {
             if (enumcreaturetype != EnumCreatureType.MISC) {
                 // Paper start - Only count natural spawns
                 if (!entity.world.paperConfig.countAllMobsForSpawning &&
-                    !(entity.spawnReason == org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.NATURAL ||
-                        entity.spawnReason == org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.CHUNK_GEN)) {
+                        !(entity.spawnReason == org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.NATURAL ||
+                                entity.spawnReason == org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.CHUNK_GEN)) {
                     continue;
                 }
                 // Paper end
@@ -73,18 +70,18 @@ public final class SpawnerCreature {
                     }
                 }
                 // Tuinity end - remove chunk lookup and lambda
-                    BiomeSettingsMobs.b biomesettingsmobs_b = b(blockposition, chunk).b().a(entity.getEntityType());
+                BiomeSettingsMobs.b biomesettingsmobs_b = b(blockposition, chunk).b().a(entity.getEntityType());
 
-                    if (biomesettingsmobs_b != null) {
-                        spawnercreatureprobabilities.a(entity.getChunkCoordinates(), biomesettingsmobs_b.b());
-                    }
+                if (biomesettingsmobs_b != null) {
+                    spawnercreatureprobabilities.a(entity.getChunkCoordinates(), biomesettingsmobs_b.b());
+                }
 
-                    object2intopenhashmap.addTo(enumcreaturetype, 1);
-                    // Paper start
-                    if (countMobs) {
-                        chunkProvider.playerChunkMap.updatePlayerMobTypeMap(entity); // Tuinity - directly use chunk provider
-                    }
-                    // Paper end
+                object2intopenhashmap.addTo(enumcreaturetype, 1);
+                // Paper start
+                if (countMobs) {
+                    chunkProvider.playerChunkMap.updatePlayerMobTypeMap(entity); // Tuinity - directly use chunk provider
+                }
+                // Paper end
                 // Tuinity - remove chunk lookup and lambda
             }
         }
@@ -111,8 +108,7 @@ public final class SpawnerCreature {
         boolean spawnWaterAmbientThisTick = worldserver.ticksPerWaterAmbientSpawns != 0L && worlddata.getTime() % worldserver.ticksPerWaterAmbientSpawns == 0L;
         // CraftBukkit end
 
-        for (int j = 0; j < i; ++j) {
-            EnumCreatureType enumcreaturetype = aenumcreaturetype[j];
+        for (EnumCreatureType enumcreaturetype : aenumcreaturetype) {
             // CraftBukkit start - Use per-world spawn limits
             boolean spawnThisTick = true;
             int limit = enumcreaturetype.c();
@@ -161,11 +157,11 @@ public final class SpawnerCreature {
             if ((flag || !enumcreaturetype.d()) && (flag1 || enumcreaturetype.d()) && (flag2 || !enumcreaturetype.e()) && difference > 0) {
                 // CraftBukkit end
                 int spawnCount = spawnMobs(enumcreaturetype, worldserver, chunk, (entitytypes, blockposition, ichunkaccess) -> {
-                    return spawnercreature_d.a(entitytypes, blockposition, ichunkaccess);
-                }, (entityinsentient, ichunkaccess) -> {
-                    spawnercreature_d.a(entityinsentient, ichunkaccess);
-                },
-                difference, worldserver.paperConfig.perPlayerMobSpawns ? worldserver.getChunkProvider().playerChunkMap::updatePlayerMobTypeMap : null);
+                            return spawnercreature_d.a(entitytypes, blockposition, ichunkaccess);
+                        }, (entityinsentient, ichunkaccess) -> {
+                            spawnercreature_d.a(entityinsentient, ichunkaccess);
+                        },
+                        difference, worldserver.paperConfig.perPlayerMobSpawns ? worldserver.getChunkProvider().playerChunkMap::updatePlayerMobTypeMap : null);
                 spawnercreature_d.getEntityCountsByType().mergeInt(enumcreaturetype, spawnCount, Integer::sum);
                 // Paper end - per player mob spawning
             }
diff --git a/src/main/java/net/minecraft/server/TickListChunk.java b/src/main/java/net/minecraft/server/TickListChunk.java
index 8af1229c3da63a838b0bec1cafde1e41cf5cf551..45f9d8c320ffd253c5d2a38edb43a3a17b43fecd 100644
--- a/src/main/java/net/minecraft/server/TickListChunk.java
+++ b/src/main/java/net/minecraft/server/TickListChunk.java
@@ -39,10 +39,9 @@ public class TickListChunk<T> implements TickList<T> {
 
     public NBTTagList b() {
         NBTTagList nbttaglist = new NBTTagList();
-        Iterator iterator = this.a.iterator();
 
-        while (iterator.hasNext()) {
-            TickListChunk.a<T> ticklistchunk_a = (TickListChunk.a) iterator.next();
+        for (TickListChunk.a<T> ta : this.a) {
+            TickListChunk.a<T> ticklistchunk_a = (TickListChunk.a) ta;
             NBTTagCompound nbttagcompound = new NBTTagCompound();
 
             nbttagcompound.setString("i", ((MinecraftKey) this.b.apply(ticklistchunk_a.d)).toString());
diff --git a/src/main/java/net/minecraft/server/TickListServer.java b/src/main/java/net/minecraft/server/TickListServer.java
index 3e148b7e99554a1abe257dd3c9acafb914e1ebc8..94ca47b2f3bff4ddc8cc57c3a06a5a723cd31bf4 100644
--- a/src/main/java/net/minecraft/server/TickListServer.java
+++ b/src/main/java/net/minecraft/server/TickListServer.java
@@ -188,10 +188,9 @@ public class TickListServer<T> implements TickList<T> {
     public void copy(StructureBoundingBox structureboundingbox, BlockPosition blockposition) {
         // Paper end
         List<NextTickListEntry<T>> list = this.a(structureboundingbox, false, false);
-        Iterator iterator = list.iterator();
 
-        while (iterator.hasNext()) {
-            NextTickListEntry<T> nextticklistentry = (NextTickListEntry) iterator.next();
+        for (NextTickListEntry<T> tNextTickListEntry : list) {
+            NextTickListEntry<T> nextticklistentry = (NextTickListEntry) tNextTickListEntry;
 
             if (structureboundingbox.b((BaseBlockPosition) nextticklistentry.a)) {
                 BlockPosition blockposition1 = nextticklistentry.a.a((BaseBlockPosition) blockposition);
@@ -217,10 +216,9 @@ public class TickListServer<T> implements TickList<T> {
     public static <T> NBTTagList serialize(Function<T, MinecraftKey> function, Iterable<NextTickListEntry<T>> iterable, long i) { return TickListServer.a(function, iterable, i); } // Paper - OBFHELPER
     private static <T> NBTTagList a(Function<T, MinecraftKey> function, Iterable<NextTickListEntry<T>> iterable, long i) {
         NBTTagList nbttaglist = new NBTTagList();
-        Iterator iterator = iterable.iterator();
 
-        while (iterator.hasNext()) {
-            NextTickListEntry<T> nextticklistentry = (NextTickListEntry) iterator.next();
+        for (NextTickListEntry<T> tNextTickListEntry : iterable) {
+            NextTickListEntry<T> nextticklistentry = (NextTickListEntry) tNextTickListEntry;
             NBTTagCompound nbttagcompound = new NBTTagCompound();
 
             nbttagcompound.setString("i", ((MinecraftKey) function.apply(nextticklistentry.b())).toString());
diff --git a/src/main/java/net/minecraft/server/TileEntityBeehive.java b/src/main/java/net/minecraft/server/TileEntityBeehive.java
index 42cd92f4cfa504612417fdd09c9b894077ba9f71..df1e7339c41d0945818a494ef4815a908ae593c8 100644
--- a/src/main/java/net/minecraft/server/TileEntityBeehive.java
+++ b/src/main/java/net/minecraft/server/TileEntityBeehive.java
@@ -74,11 +74,8 @@ public class TileEntityBeehive extends TileEntity implements ITickable {
         List<Entity> list = this.releaseBees(iblockdata, tileentitybeehive_releasestatus);
 
         if (entityhuman != null) {
-            Iterator iterator = list.iterator();
-
-            while (iterator.hasNext()) {
-                Entity entity = (Entity) iterator.next();
 
+            for (Entity entity : list) {
                 if (entity instanceof EntityBee) {
                     EntityBee entitybee = (EntityBee) entity;
 
@@ -365,11 +362,8 @@ public class TileEntityBeehive extends TileEntity implements ITickable {
 
     public NBTTagList m() {
         NBTTagList nbttaglist = new NBTTagList();
-        Iterator iterator = this.bees.iterator();
-
-        while (iterator.hasNext()) {
-            TileEntityBeehive.HiveBee tileentitybeehive_hivebee = (TileEntityBeehive.HiveBee) iterator.next();
 
+        for (HiveBee tileentitybeehive_hivebee : this.bees) {
             tileentitybeehive_hivebee.entityData.remove("UUID");
             NBTTagCompound nbttagcompound = new NBTTagCompound();
 
diff --git a/src/main/java/net/minecraft/server/TileEntityBell.java b/src/main/java/net/minecraft/server/TileEntityBell.java
index 04af18f97921d52252eb89a70f751d2fb604f8a9..77ea2c20291074435b97d0d07b9a0c3c47574869 100644
--- a/src/main/java/net/minecraft/server/TileEntityBell.java
+++ b/src/main/java/net/minecraft/server/TileEntityBell.java
@@ -112,11 +112,8 @@ public class TileEntityBell extends TileEntity implements ITickable {
         }
 
         if (!this.world.isClientSide) {
-            Iterator iterator = this.h.iterator();
-
-            while (iterator.hasNext()) {
-                EntityLiving entityliving = (EntityLiving) iterator.next();
 
+            for (EntityLiving entityliving : this.h) {
                 if (entityliving.isAlive() && !entityliving.dead && blockposition.a((IPosition) entityliving.getPositionVector(), 32.0D)) {
                     entityliving.getBehaviorController().setMemory(MemoryModuleType.HEARD_BELL_TIME, this.world.getTime()); // Paper - decompile fix
                 }
diff --git a/src/main/java/net/minecraft/server/TileEntityChest.java b/src/main/java/net/minecraft/server/TileEntityChest.java
index 6d4f9992dc12ca30ce66d4b61ee6f2425848dd8c..62d2be7c96ea4a655a89c0b2c7bc3fc4af53051e 100644
--- a/src/main/java/net/minecraft/server/TileEntityChest.java
+++ b/src/main/java/net/minecraft/server/TileEntityChest.java
@@ -187,11 +187,8 @@ public class TileEntityChest extends TileEntityLootable { // Paper - Remove ITic
         int l = 0;
         float f = 5.0F;
         List<EntityHuman> list = world.a(EntityHuman.class, new AxisAlignedBB((double) ((float) i - 5.0F), (double) ((float) j - 5.0F), (double) ((float) k - 5.0F), (double) ((float) (i + 1) + 5.0F), (double) ((float) (j + 1) + 5.0F), (double) ((float) (k + 1) + 5.0F)));
-        Iterator iterator = list.iterator();
-
-        while (iterator.hasNext()) {
-            EntityHuman entityhuman = (EntityHuman) iterator.next();
 
+        for (EntityHuman entityhuman : list) {
             if (entityhuman.activeContainer instanceof ContainerChest) {
                 IInventory iinventory = ((ContainerChest) entityhuman.activeContainer).e();
 
diff --git a/src/main/java/net/minecraft/server/TileEntityConduit.java b/src/main/java/net/minecraft/server/TileEntityConduit.java
index c18a86940281917c1491ec541b65974c7ede4c04..604ba28b5c06138828993b32e3820fd907d74bba 100644
--- a/src/main/java/net/minecraft/server/TileEntityConduit.java
+++ b/src/main/java/net/minecraft/server/TileEntityConduit.java
@@ -131,9 +131,7 @@ public class TileEntityConduit extends TileEntity implements ITickable {
                         Block[] ablock = TileEntityConduit.b;
                         int k1 = ablock.length;
 
-                        for (int l1 = 0; l1 < k1; ++l1) {
-                            Block block = ablock[l1];
-
+                        for (Block block : ablock) {
                             if (iblockdata.a(block)) {
                                 this.i.add(blockposition1);
                             }
@@ -157,11 +155,8 @@ public class TileEntityConduit extends TileEntity implements ITickable {
         List<EntityHuman> list = this.world.a(EntityHuman.class, axisalignedbb);
 
         if (!list.isEmpty()) {
-            Iterator iterator = list.iterator();
-
-            while (iterator.hasNext()) {
-                EntityHuman entityhuman = (EntityHuman) iterator.next();
 
+            for (EntityHuman entityhuman : list) {
                 if (this.position.a((BaseBlockPosition) entityhuman.getChunkCoordinates(), (double) j) && entityhuman.isInWaterOrRain()) {
                     entityhuman.addEffect(new MobEffect(MobEffects.CONDUIT_POWER, 260, 0, true, true), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.CONDUIT); // CraftBukkit
                 }
diff --git a/src/main/java/net/minecraft/server/TileEntityEndGateway.java b/src/main/java/net/minecraft/server/TileEntityEndGateway.java
index 4a443827a316415c2c047ca468d965a80fce1fb1..d9ce7372b442dc5367501176c1a720df329fd035 100644
--- a/src/main/java/net/minecraft/server/TileEntityEndGateway.java
+++ b/src/main/java/net/minecraft/server/TileEntityEndGateway.java
@@ -278,10 +278,8 @@ public class TileEntityEndGateway extends TileEntityEnderPortal implements ITick
         BlockPosition blockposition1 = new BlockPosition(chunkcoordintpair.f(), i, chunkcoordintpair.g());
         BlockPosition blockposition2 = null;
         double d0 = 0.0D;
-        Iterator iterator = BlockPosition.a(blockposition, blockposition1).iterator();
 
-        while (iterator.hasNext()) {
-            BlockPosition blockposition3 = (BlockPosition) iterator.next();
+        for (BlockPosition blockposition3 : BlockPosition.a(blockposition, blockposition1)) {
             IBlockData iblockdata = chunk.getType(blockposition3);
             BlockPosition blockposition4 = blockposition3.up();
             BlockPosition blockposition5 = blockposition3.up(2);
diff --git a/src/main/java/net/minecraft/server/TileEntityFurnace.java b/src/main/java/net/minecraft/server/TileEntityFurnace.java
index ccb869f9d41de090d382ef632758bc6b1ca14154..f58f704aef365586450e5cd9ede21bdc01f74383 100644
--- a/src/main/java/net/minecraft/server/TileEntityFurnace.java
+++ b/src/main/java/net/minecraft/server/TileEntityFurnace.java
@@ -254,11 +254,8 @@ public abstract class TileEntityFurnace extends TileEntityContainer implements I
         this.cookTimeTotal = nbttagcompound.getShort("CookTimeTotal");
         this.ticksForCurrentFuel = this.fuelTime((ItemStack) this.items.get(1));
         NBTTagCompound nbttagcompound1 = nbttagcompound.getCompound("RecipesUsed");
-        Iterator iterator = nbttagcompound1.getKeys().iterator();
-
-        while (iterator.hasNext()) {
-            String s = (String) iterator.next();
 
+        for (String s : nbttagcompound1.getKeys()) {
             this.n.put(new MinecraftKey(s), nbttagcompound1.getInt(s));
         }
 
diff --git a/src/main/java/net/minecraft/server/TileEntityPiston.java b/src/main/java/net/minecraft/server/TileEntityPiston.java
index c4915be4bf8232248495e574caaeaa676c951bc4..fa47ebd46eb254661c339a79e6fe5c06d511de81 100644
--- a/src/main/java/net/minecraft/server/TileEntityPiston.java
+++ b/src/main/java/net/minecraft/server/TileEntityPiston.java
@@ -144,11 +144,8 @@ public class TileEntityPiston extends TileEntity implements ITickable {
             if (!list.isEmpty()) {
                 List<AxisAlignedBB> list1 = voxelshape.d();
                 boolean flag = this.a.a(Blocks.SLIME_BLOCK);
-                Iterator iterator = list.iterator();
-
-                while (iterator.hasNext()) {
-                    Entity entity = (Entity) iterator.next();
 
+                for (Entity entity : list) {
                     if (entity.getPushReaction() != EnumPistonReaction.IGNORE) {
                         if (flag) {
                             if (entity instanceof EntityPlayer) {
@@ -175,10 +172,8 @@ public class TileEntityPiston extends TileEntity implements ITickable {
                         }
 
                         double d4 = 0.0D;
-                        Iterator iterator1 = list1.iterator();
 
-                        while (iterator1.hasNext()) {
-                            AxisAlignedBB axisalignedbb1 = (AxisAlignedBB) iterator1.next();
+                        for (AxisAlignedBB axisalignedbb1 : list1) {
                             AxisAlignedBB axisalignedbb2 = PistonUtil.a(this.a(axisalignedbb1), enumdirection, d0);
                             AxisAlignedBB axisalignedbb3 = entity.getBoundingBox();
 
@@ -221,11 +216,8 @@ public class TileEntityPiston extends TileEntity implements ITickable {
                 List<Entity> list = this.world.getEntities((Entity) null, axisalignedbb, (entity) -> {
                     return a(axisalignedbb, entity);
                 });
-                Iterator iterator = list.iterator();
-
-                while (iterator.hasNext()) {
-                    Entity entity = (Entity) iterator.next();
 
+                for (Entity entity : list) {
                     a(enumdirection, entity, d1, enumdirection);
                 }
 
diff --git a/src/main/java/net/minecraft/server/TileEntityShulkerBox.java b/src/main/java/net/minecraft/server/TileEntityShulkerBox.java
index 17b974c6a0aeaf5114889bb7cfb82880f2089901..1c5fafece4c55e49b2172a86d80e99c7eb160b1f 100644
--- a/src/main/java/net/minecraft/server/TileEntityShulkerBox.java
+++ b/src/main/java/net/minecraft/server/TileEntityShulkerBox.java
@@ -140,8 +140,8 @@ public class TileEntityShulkerBox extends TileEntityLootable implements IWorldIn
             List<Entity> list = this.world.getEntities((Entity) null, axisalignedbb);
 
             if (!list.isEmpty()) {
-                for (int i = 0; i < list.size(); ++i) {
-                    Entity entity = (Entity) list.get(i);
+                for (Entity value : list) {
+                    Entity entity = (Entity) value;
 
                     if (entity.getPushReaction() != EnumPistonReaction.IGNORE) {
                         double d0 = 0.0D;
diff --git a/src/main/java/net/minecraft/server/TileEntitySign.java b/src/main/java/net/minecraft/server/TileEntitySign.java
index cbbaf8ca4b6425e2ce58e500b13b3b5269704c3c..f79e6912bc458667518545f6e4cd342b5233cc91 100644
--- a/src/main/java/net/minecraft/server/TileEntitySign.java
+++ b/src/main/java/net/minecraft/server/TileEntitySign.java
@@ -141,8 +141,7 @@ public class TileEntitySign extends TileEntity implements ICommandListener { //
         IChatBaseComponent[] aichatbasecomponent = this.lines;
         int i = aichatbasecomponent.length;
 
-        for (int j = 0; j < i; ++j) {
-            IChatBaseComponent ichatbasecomponent = aichatbasecomponent[j];
+        for (IChatBaseComponent ichatbasecomponent : aichatbasecomponent) {
             ChatModifier chatmodifier = ichatbasecomponent == null ? null : ichatbasecomponent.getChatModifier();
 
             if (chatmodifier != null && chatmodifier.getClickEvent() != null) {
diff --git a/src/main/java/net/minecraft/server/VillageSiege.java b/src/main/java/net/minecraft/server/VillageSiege.java
index d6aadbda5c5a17976659f57ee04cf9b917e09160..a32fd39e28290c48e047a109ae1175e284cea3a1 100644
--- a/src/main/java/net/minecraft/server/VillageSiege.java
+++ b/src/main/java/net/minecraft/server/VillageSiege.java
@@ -65,10 +65,9 @@ public class VillageSiege implements MobSpawner {
     }
 
     private boolean a(WorldServer worldserver) {
-        Iterator iterator = worldserver.getPlayers().iterator();
 
-        while (iterator.hasNext()) {
-            EntityHuman entityhuman = (EntityHuman) iterator.next();
+        for (EntityPlayer entityPlayer : worldserver.getPlayers()) {
+            EntityHuman entityhuman = (EntityHuman) entityPlayer;
 
             if (!entityhuman.isSpectator()) {
                 BlockPosition blockposition = entityhuman.getChunkCoordinates();
diff --git a/src/main/java/net/minecraft/server/VoxelShapes.java b/src/main/java/net/minecraft/server/VoxelShapes.java
index 6bcd1458f94d636baf5b9aebfee11351835db0a2..5fca1f19293082c168faea9b520eb5a2a2b2c857 100644
--- a/src/main/java/net/minecraft/server/VoxelShapes.java
+++ b/src/main/java/net/minecraft/server/VoxelShapes.java
@@ -73,8 +73,7 @@ public final class VoxelShapes {
             boolean ret = false;
 
             java.util.List<AxisAlignedBB> boxes = shape.getBoundingBoxesRepresentation();
-            for (int i = 0, len = boxes.size(); i < len; ++i) {
-                AxisAlignedBB box = boxes.get(i);
+            for (AxisAlignedBB box : boxes) {
                 if (!box.isEmpty() && box.voxelShapeIntersect(aabb)) {
                     list.add(box);
                     ret = true;
@@ -101,8 +100,7 @@ public final class VoxelShapes {
             }
         } else {
             java.util.List<AxisAlignedBB> boxes = shape.getBoundingBoxesRepresentation();
-            for (int i = 0, len = boxes.size(); i < len; ++i) {
-                AxisAlignedBB box = boxes.get(i);
+            for (AxisAlignedBB box : boxes) {
                 if (!box.isEmpty()) {
                     list.add(box);
                 }
@@ -246,9 +244,7 @@ public final class VoxelShapes {
             EnumDirection.EnumAxis[] aenumdirection_enumaxis = EnumAxisCycle.d;
             int i = aenumdirection_enumaxis.length;
 
-            for (int j = 0; j < i; ++j) {
-                EnumDirection.EnumAxis enumdirection_enumaxis = aenumdirection_enumaxis[j];
-
+            for (EnumDirection.EnumAxis enumdirection_enumaxis : aenumdirection_enumaxis) {
                 if (voxelshape.c(enumdirection_enumaxis) < voxelshape1.b(enumdirection_enumaxis) - 1.0E-7D) {
                     return flag || flag1;
                 }
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index ef87629eae2b7cef0cdc611fbe0cd94f90a3b443..57595b5e98061d77e42ba998f460cbf908d62052 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -351,11 +351,9 @@ public abstract class World implements GeneratorAccess, AutoCloseable, NonBlocki
         }
 
         List<Entity> entities = this.getEntities(null, voxelshape.getBoundingBox());
-        for (int i = 0, len = entities.size(); i < len; ++i) {
-            Entity entity = entities.get(i);
-
+        for (Entity entity : entities) {
             if (checkCanSee && source instanceof EntityPlayer && entity instanceof EntityPlayer
-                && !((EntityPlayer) source).getBukkitEntity().canSee(((EntityPlayer) entity).getBukkitEntity())) {
+                    && !((EntityPlayer) source).getBukkitEntity().canSee(((EntityPlayer) entity).getBukkitEntity())) {
                 continue;
             }
 
@@ -990,11 +988,8 @@ public abstract class World implements GeneratorAccess, AutoCloseable, NonBlocki
         if (this.tickingTileEntities) {
             this.tileEntityListPending.addAll(collection);
         } else {
-            Iterator iterator = collection.iterator();
-
-            while (iterator.hasNext()) {
-                TileEntity tileentity = (TileEntity) iterator.next();
 
+            for (TileEntity tileentity : collection) {
                 this.a(tileentity);
             }
         }
@@ -1111,8 +1106,8 @@ public abstract class World implements GeneratorAccess, AutoCloseable, NonBlocki
         this.tickingTileEntities = false;
         gameprofilerfiller.exitEnter("pendingBlockEntities");
         if (!this.tileEntityListPending.isEmpty()) {
-            for (int i = 0; i < this.tileEntityListPending.size(); ++i) {
-                TileEntity tileentity1 = (TileEntity) this.tileEntityListPending.get(i);
+            for (TileEntity tileEntity : this.tileEntityListPending) {
+                TileEntity tileentity1 = (TileEntity) tileEntity;
 
                 if (!tileentity1.isRemoved()) {
                     /* CraftBukkit start - Order matters, moved down
@@ -1121,7 +1116,8 @@ public abstract class World implements GeneratorAccess, AutoCloseable, NonBlocki
                     }
                     // CraftBukkit end */
 
-                    Chunk chunk; if ((chunk = this.getChunkIfLoaded(tileentity1.getPosition())) != null) {  // Paper - inlined contents of this.isLoaded(BlockPosition). Reuse the returned chunk instead of looking it up again
+                    Chunk chunk;
+                    if ((chunk = this.getChunkIfLoaded(tileentity1.getPosition())) != null) {  // Paper - inlined contents of this.isLoaded(BlockPosition). Reuse the returned chunk instead of looking it up again
                         // Chunk chunk = this.getChunkAtWorldCoords(tileentity1.getPosition()); // Paper - already computed above
                         IBlockData iblockdata = chunk.getType(tileentity1.getPosition());
 
@@ -1232,8 +1228,8 @@ public abstract class World implements GeneratorAccess, AutoCloseable, NonBlocki
 
     @Nullable
     private TileEntity E(BlockPosition blockposition) {
-        for (int i = 0; i < this.tileEntityListPending.size(); ++i) {
-            TileEntity tileentity = (TileEntity) this.tileEntityListPending.get(i);
+        for (TileEntity tileEntity : this.tileEntityListPending) {
+            TileEntity tileentity = (TileEntity) tileEntity;
 
             if (!tileentity.isRemoved() && tileentity.getPosition().equals(blockposition)) {
                 return tileentity;
@@ -1636,8 +1632,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable, NonBlocki
         EnumDirection[] aenumdirection = World.a;
         int j = aenumdirection.length;
 
-        for (int k = 0; k < j; ++k) {
-            EnumDirection enumdirection = aenumdirection[k];
+        for (EnumDirection enumdirection : aenumdirection) {
             int l = this.getBlockFacePower(blockposition.shift(enumdirection), enumdirection);
 
             if (l >= 15) {
@@ -1751,10 +1746,8 @@ public abstract class World implements GeneratorAccess, AutoCloseable, NonBlocki
     public abstract Scoreboard getScoreboard();
 
     public void updateAdjacentComparators(BlockPosition blockposition, Block block) {
-        Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
-        while (iterator.hasNext()) {
-            EnumDirection enumdirection = (EnumDirection) iterator.next();
+        for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
             BlockPosition blockposition1 = blockposition.shift(enumdirection);
 
             if (this.isLoaded(blockposition1)) {
diff --git a/src/main/java/net/minecraft/server/WorldBorder.java b/src/main/java/net/minecraft/server/WorldBorder.java
index f49ea31334c861e02252acde1e6075a2b17a7e53..6068e934ec0b548ce353ba48862240ba33b3deda 100644
--- a/src/main/java/net/minecraft/server/WorldBorder.java
+++ b/src/main/java/net/minecraft/server/WorldBorder.java
@@ -160,11 +160,8 @@ public class WorldBorder {
         this.h = event.getNewCenter().getZ();
         // Paper end
         this.j.k();
-        Iterator iterator = this.l().iterator();
-
-        while (iterator.hasNext()) {
-            IWorldBorderListener iworldborderlistener = (IWorldBorderListener) iterator.next();
 
+        for (IWorldBorderListener iworldborderlistener : this.l()) {
             iworldborderlistener.a(this, event.getNewCenter().getX(), event.getNewCenter().getZ()); // Paper
         }
 
@@ -192,11 +189,8 @@ public class WorldBorder {
         }
         this.j = new WorldBorder.d(event.getNewSize());
         // Paper end
-        Iterator iterator = this.l().iterator();
-
-        while (iterator.hasNext()) {
-            IWorldBorderListener iworldborderlistener = (IWorldBorderListener) iterator.next();
 
+        for (IWorldBorderListener iworldborderlistener : this.l()) {
             iworldborderlistener.a(this, event.getNewSize()); // Paper
         }
 
@@ -214,11 +208,8 @@ public class WorldBorder {
         if (!event.callEvent()) return;
         this.j = (WorldBorder.a) (d0 == event.getNewSize() ? new WorldBorder.d(event.getNewSize()) : new WorldBorder.b(d0, event.getNewSize(), event.getDuration()));
         // Paper end
-        Iterator iterator = this.l().iterator();
-
-        while (iterator.hasNext()) {
-            IWorldBorderListener iworldborderlistener = (IWorldBorderListener) iterator.next();
 
+        for (IWorldBorderListener iworldborderlistener : this.l()) {
             iworldborderlistener.a(this, d0, event.getNewSize(), event.getDuration()); // Paper
         }
 
@@ -248,11 +239,8 @@ public class WorldBorder {
 
     public void setDamageBuffer(double d0) {
         this.d = d0;
-        Iterator iterator = this.l().iterator();
-
-        while (iterator.hasNext()) {
-            IWorldBorderListener iworldborderlistener = (IWorldBorderListener) iterator.next();
 
+        for (IWorldBorderListener iworldborderlistener : this.l()) {
             iworldborderlistener.c(this, d0);
         }
 
@@ -264,11 +252,8 @@ public class WorldBorder {
 
     public void setDamageAmount(double d0) {
         this.b = d0;
-        Iterator iterator = this.l().iterator();
-
-        while (iterator.hasNext()) {
-            IWorldBorderListener iworldborderlistener = (IWorldBorderListener) iterator.next();
 
+        for (IWorldBorderListener iworldborderlistener : this.l()) {
             iworldborderlistener.b(this, d0);
         }
 
@@ -280,11 +265,8 @@ public class WorldBorder {
 
     public void setWarningTime(int i) {
         this.e = i;
-        Iterator iterator = this.l().iterator();
-
-        while (iterator.hasNext()) {
-            IWorldBorderListener iworldborderlistener = (IWorldBorderListener) iterator.next();
 
+        for (IWorldBorderListener iworldborderlistener : this.l()) {
             iworldborderlistener.a(this, i);
         }
 
@@ -296,11 +278,8 @@ public class WorldBorder {
 
     public void setWarningDistance(int i) {
         this.f = i;
-        Iterator iterator = this.l().iterator();
-
-        while (iterator.hasNext()) {
-            IWorldBorderListener iworldborderlistener = (IWorldBorderListener) iterator.next();
 
+        for (IWorldBorderListener iworldborderlistener : this.l()) {
             iworldborderlistener.b(this, i);
         }
 
diff --git a/src/main/java/net/minecraft/server/WorldGenDungeons.java b/src/main/java/net/minecraft/server/WorldGenDungeons.java
index 6aa1626f38df0cd8ae8a417dc4fca213b82664c9..c8d1c8abf1b73725b13ae1b572e3b7f3e144b639 100644
--- a/src/main/java/net/minecraft/server/WorldGenDungeons.java
+++ b/src/main/java/net/minecraft/server/WorldGenDungeons.java
@@ -104,11 +104,8 @@ public class WorldGenDungeons extends WorldGenerator<WorldGenFeatureEmptyConfigu
 
                             if (generatoraccessseed.isEmpty(blockposition2)) {
                                 int i3 = 0;
-                                Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
-
-                                while (iterator.hasNext()) {
-                                    EnumDirection enumdirection = (EnumDirection) iterator.next();
 
+                                for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
                                     if (generatoraccessseed.getType(blockposition2.shift(enumdirection)).getMaterial().isBuildable()) {
                                         ++i3;
                                     }
diff --git a/src/main/java/net/minecraft/server/WorldGenEndTrophy.java b/src/main/java/net/minecraft/server/WorldGenEndTrophy.java
index 441f3b6d57f128644ad952ab7f2d090d2140bd0c..4cc83e9d4a5a54224991e9b480d25459a402d167 100644
--- a/src/main/java/net/minecraft/server/WorldGenEndTrophy.java
+++ b/src/main/java/net/minecraft/server/WorldGenEndTrophy.java
@@ -14,10 +14,8 @@ public class WorldGenEndTrophy extends WorldGenerator<WorldGenFeatureEmptyConfig
     }
 
     public boolean generate(GeneratorAccessSeed generatoraccessseed, ChunkGenerator chunkgenerator, Random random, BlockPosition blockposition, WorldGenFeatureEmptyConfiguration worldgenfeatureemptyconfiguration) { // Paper - decompile fix
-        Iterator iterator = BlockPosition.a(new BlockPosition(blockposition.getX() - 4, blockposition.getY() - 1, blockposition.getZ() - 4), new BlockPosition(blockposition.getX() + 4, blockposition.getY() + 32, blockposition.getZ() + 4)).iterator();
 
-        while (iterator.hasNext()) {
-            BlockPosition blockposition1 = (BlockPosition) iterator.next();
+        for (BlockPosition blockposition1 : BlockPosition.a(new BlockPosition(blockposition.getX() - 4, blockposition.getY() - 1, blockposition.getZ() - 4), new BlockPosition(blockposition.getX() + 4, blockposition.getY() + 32, blockposition.getZ() + 4))) {
             boolean flag = blockposition1.a((BaseBlockPosition) blockposition, 2.5D);
 
             if (flag || blockposition1.a((BaseBlockPosition) blockposition, 3.5D)) {
@@ -44,11 +42,8 @@ public class WorldGenEndTrophy extends WorldGenerator<WorldGenFeatureEmptyConfig
         }
 
         BlockPosition blockposition2 = blockposition.up(2);
-        Iterator iterator1 = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
-
-        while (iterator1.hasNext()) {
-            EnumDirection enumdirection = (EnumDirection) iterator1.next();
 
+        for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
             this.a(generatoraccessseed, blockposition2.shift(enumdirection), (IBlockData) Blocks.WALL_TORCH.getBlockData().set(BlockTorchWall.a, enumdirection));
         }
 
diff --git a/src/main/java/net/minecraft/server/WorldGenEnder.java b/src/main/java/net/minecraft/server/WorldGenEnder.java
index 5eb9b3d35e12c2d3dc5f158cbed0b0a0853ee116..6fd7eb2575ccc5c5ea1602caa2e231a6e5e2fca0 100644
--- a/src/main/java/net/minecraft/server/WorldGenEnder.java
+++ b/src/main/java/net/minecraft/server/WorldGenEnder.java
@@ -38,11 +38,7 @@ public class WorldGenEnder extends WorldGenerator<WorldGenFeatureEndSpikeConfigu
             list = a(generatoraccessseed);
         }
 
-        Iterator iterator = list.iterator();
-
-        while (iterator.hasNext()) {
-            WorldGenEnder.Spike worldgenender_spike = (WorldGenEnder.Spike) iterator.next();
-
+        for (Spike worldgenender_spike : list) {
             if (worldgenender_spike.a(blockposition)) {
                 this.a(generatoraccessseed, random, worldgenfeatureendspikeconfiguration, worldgenender_spike);
             }
@@ -53,11 +49,8 @@ public class WorldGenEnder extends WorldGenerator<WorldGenFeatureEndSpikeConfigu
 
     private void a(WorldAccess worldaccess, Random random, WorldGenFeatureEndSpikeConfiguration worldgenfeatureendspikeconfiguration, WorldGenEnder.Spike worldgenender_spike) {
         int i = worldgenender_spike.c();
-        Iterator iterator = BlockPosition.a(new BlockPosition(worldgenender_spike.a() - i, 0, worldgenender_spike.b() - i), new BlockPosition(worldgenender_spike.a() + i, worldgenender_spike.d() + 10, worldgenender_spike.b() + i)).iterator();
-
-        while (iterator.hasNext()) {
-            BlockPosition blockposition = (BlockPosition) iterator.next();
 
+        for (BlockPosition blockposition : BlockPosition.a(new BlockPosition(worldgenender_spike.a() - i, 0, worldgenender_spike.b() - i), new BlockPosition(worldgenender_spike.a() + i, worldgenender_spike.d() + 10, worldgenender_spike.b() + i))) {
             if (blockposition.distanceSquared((double) worldgenender_spike.a(), (double) blockposition.getY(), (double) worldgenender_spike.b(), false) <= (double) (i * i + 1) && blockposition.getY() < worldgenender_spike.d()) {
                 this.a(worldaccess, blockposition, Blocks.OBSIDIAN.getBlockData());
             } else if (blockposition.getY() > 65) {
diff --git a/src/main/java/net/minecraft/server/WorldMap.java b/src/main/java/net/minecraft/server/WorldMap.java
index 21f6ef363f4491d4642d4d514b3e24ca21c66e71..c144c05d37a42882baf156fcaac6fffc67094506 100644
--- a/src/main/java/net/minecraft/server/WorldMap.java
+++ b/src/main/java/net/minecraft/server/WorldMap.java
@@ -186,21 +186,15 @@ public class WorldMap extends PersistentBase {
         nbttagcompound.setBoolean("unlimitedTracking", this.unlimitedTracking);
         nbttagcompound.setBoolean("locked", this.locked);
         NBTTagList nbttaglist = new NBTTagList();
-        Iterator iterator = this.m.values().iterator();
-
-        while (iterator.hasNext()) {
-            MapIconBanner mapiconbanner = (MapIconBanner) iterator.next();
 
+        for (MapIconBanner mapiconbanner : this.m.values()) {
             nbttaglist.add(mapiconbanner.e());
         }
 
         nbttagcompound.set("banners", nbttaglist);
         NBTTagList nbttaglist1 = new NBTTagList();
-        Iterator iterator1 = this.n.values().iterator();
-
-        while (iterator1.hasNext()) {
-            WorldMapFrame worldmapframe = (WorldMapFrame) iterator1.next();
 
+        for (WorldMapFrame worldmapframe : this.n.values()) {
             nbttaglist1.add(worldmapframe.a());
         }
 
@@ -369,11 +363,8 @@ public class WorldMap extends PersistentBase {
 
     public void flagDirty(int i, int j) {
         this.b();
-        Iterator iterator = this.i.iterator();
-
-        while (iterator.hasNext()) {
-            WorldMap.WorldMapHumanTracker worldmap_worldmaphumantracker = (WorldMap.WorldMapHumanTracker) iterator.next();
 
+        for (WorldMapHumanTracker worldmap_worldmaphumantracker : this.i) {
             worldmap_worldmaphumantracker.a(i, j);
         }
 
diff --git a/src/main/java/net/minecraft/server/WorldPersistentData.java b/src/main/java/net/minecraft/server/WorldPersistentData.java
index 138c6d707e33cd352aa4b26dfb279c5b77448de0..577ca63559137778e1c0d61013620422561c8123 100644
--- a/src/main/java/net/minecraft/server/WorldPersistentData.java
+++ b/src/main/java/net/minecraft/server/WorldPersistentData.java
@@ -185,11 +185,8 @@ public class WorldPersistentData {
     }
 
     public void a() {
-        Iterator iterator = this.data.values().iterator();
-
-        while (iterator.hasNext()) {
-            PersistentBase persistentbase = (PersistentBase) iterator.next();
 
+        for (PersistentBase persistentbase : this.data.values()) {
             if (persistentbase != null) {
                 persistentbase.a(this.a(persistentbase.getId()));
             }
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 870159ff7e6183c234c52ad7a6771ba87fc8c660..bb7a166a8d00d22abf375ce4427e740b963dc3a9 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -334,12 +334,11 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
         double closestDistanceSquared = Double.MAX_VALUE;
         EntityPlayer closest = null;
 
-        for (int i = 0, len = backingSet.length; i < len; ++i) {
-            Object _player = backingSet[i];
+        for (Object _player : backingSet) {
             if (!(_player instanceof EntityPlayer)) {
                 continue;
             }
-            EntityPlayer player = (EntityPlayer)_player;
+            EntityPlayer player = (EntityPlayer) _player;
 
             double distanceSquared = player.getDistanceSquared(centerX, centerY, centerZ);
             if (distanceSquared < closestDistanceSquared && condition.test(source, player)) {
@@ -391,12 +390,11 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
 
         Object[] backingSet = nearby.getBackingSet();
 
-        for (int i = 0, len = backingSet.length; i < len; ++i) {
-            Object _player = backingSet[i];
+        for (Object _player : backingSet) {
             if (!(_player instanceof EntityPlayer)) {
                 continue;
             }
-            EntityPlayer player = (EntityPlayer)_player;
+            EntityPlayer player = (EntityPlayer) _player;
 
             if (axisalignedbb.contains(player.locX(), player.locY(), player.locZ()) && condition.test(source, player)) {
                 ret.add(player);
@@ -521,9 +519,7 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
                 this.getHardCollidingEntities(entity, axisalignedbb, predicate, entities);
             }
 
-            for (int i = 0, len = entities.size(); i < len; ++i) {
-                Entity otherEntity = entities.get(i);
-
+            for (Entity otherEntity : entities) {
                 if ((entity == null || otherEntity.collisionBoxIsHard()) || entity.hardCollidesWith(otherEntity)) {
                     return true;
                 }
@@ -695,9 +691,7 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
                 this.getHardCollidingEntities(entity, axisalignedbb, predicate, entities);
             }
 
-            for (int i = 0, len = entities.size(); i < len; ++i) {
-                Entity otherEntity = entities.get(i);
-
+            for (Entity otherEntity : entities) {
                 if ((entity == null || otherEntity.collisionBoxIsHard()) || entity.hardCollidesWith(otherEntity)) {
                     if (!otherEntity.getBoundingBox().isEmpty()) {
                         list.add(otherEntity.getBoundingBox());
@@ -1114,11 +1108,8 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
     }
 
     public void doMobSpawning(boolean flag, boolean flag1) {
-        Iterator iterator = this.mobSpawners.iterator();
-
-        while (iterator.hasNext()) {
-            MobSpawner mobspawner = (MobSpawner) iterator.next();
 
+        for (MobSpawner mobspawner : this.mobSpawners) {
             mobspawner.a(this, flag, flag1);
         }
 
@@ -1285,11 +1276,8 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
         if (!this.players.isEmpty()) {
             int i = 0;
             int j = 0;
-            Iterator iterator = this.players.iterator();
-
-            while (iterator.hasNext()) {
-                EntityPlayer entityplayer = (EntityPlayer) iterator.next();
 
+            for (EntityPlayer entityplayer : this.players) {
                 if (entityplayer.isSpectator() || (entityplayer.fauxSleeping && !entityplayer.isSleeping()) || (purpurConfig.idleTimeoutCountAsSleeping && entityplayer.isAfk())) { // CraftBukkit // Purpur
                     ++i;
                 } else if (entityplayer.isSleeping()) {
@@ -1411,11 +1399,8 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
             this.chunkCheck(entity);
             } finally { timer.stopTiming(); } // Paper - timings
             if (entity.inChunk) {
-                Iterator iterator = entity.getPassengers().iterator();
-
-                while (iterator.hasNext()) {
-                    Entity entity1 = (Entity) iterator.next();
 
+                for (Entity entity1 : entity.getPassengers()) {
                     this.a(entity, entity1);
                 }
             }
@@ -1466,11 +1451,8 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
 
                 this.chunkCheck(entity1);
                 if (entity1.inChunk) {
-                    Iterator iterator = entity1.getPassengers().iterator();
-
-                    while (iterator.hasNext()) {
-                        Entity entity2 = (Entity) iterator.next();
 
+                    for (Entity entity2 : entity1.getPassengers()) {
                         this.a(entity1, entity2);
                     }
                 } } finally { timer.stopTiming(); } // Paper - EAR2 timings
@@ -1669,11 +1651,8 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
 
     public List<EntityPlayer> a(Predicate<? super EntityPlayer> predicate) {
         List<EntityPlayer> list = Lists.newArrayList();
-        Iterator iterator = this.players.iterator();
-
-        while (iterator.hasNext()) {
-            EntityPlayer entityplayer = (EntityPlayer) iterator.next();
 
+        for (EntityPlayer entityplayer : this.players) {
             if (predicate.test(entityplayer)) {
                 list.add(entityplayer);
             }
@@ -1856,11 +1835,8 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
             return entity;
         } else {
             if (this.tickingEntities) {
-                Iterator iterator = this.entitiesToAdd.iterator();
-
-                while (iterator.hasNext()) {
-                    Entity entity1 = (Entity) iterator.next();
 
+                for (Entity entity1 : this.entitiesToAdd) {
                     if (entity1.getUniqueID().equals(uuid)) {
                         return entity1;
                     }
@@ -1905,8 +1881,8 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
         int i = aentityslice.length;
 
         java.util.List<Entity> toMoveChunks = new java.util.ArrayList<>(); // Paper
-        for (int j = 0; j < i; ++j) {
-            List<Entity> entityslice = aentityslice[j]; // Spigot
+        // Spigot
+        for (List<Entity> entityslice : aentityslice) {
             Iterator iterator = entityslice.iterator();
 
             while (iterator.hasNext()) {
@@ -2002,9 +1978,7 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
             EntityComplexPart[] aentitycomplexpart = ((EntityEnderDragon) entity).eJ();
             int i = aentitycomplexpart.length;
 
-            for (int j = 0; j < i; ++j) {
-                EntityComplexPart entitycomplexpart = aentitycomplexpart[j];
-
+            for (EntityComplexPart entitycomplexpart : aentitycomplexpart) {
                 entitycomplexpart.die();
             }
         }
@@ -2113,9 +2087,7 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
                 EntityComplexPart[] aentitycomplexpart = ((EntityEnderDragon) entity).eJ();
                 int i = aentitycomplexpart.length;
 
-                for (int j = 0; j < i; ++j) {
-                    EntityComplexPart entitycomplexpart = aentitycomplexpart[j];
-
+                for (EntityComplexPart entitycomplexpart : aentitycomplexpart) {
                     this.entitiesById.put(entitycomplexpart.getId(), entitycomplexpart);
                     this.entitiesForIteration.add(entitycomplexpart); // Tuinity
                 }
@@ -2342,11 +2314,7 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
             explosion.clearBlocks();
         }
 
-        Iterator iterator = this.players.iterator();
-
-        while (iterator.hasNext()) {
-            EntityPlayer entityplayer = (EntityPlayer) iterator.next();
-
+        for (EntityPlayer entityplayer : this.players) {
             if (entityplayer.h(d0, d1, d2) < 4096.0D) {
                 entityplayer.playerConnection.sendPacket(new PacketPlayOutExplosion(d0, d1, d2, f, explosion.getBlocks(), (Vec3D) explosion.c().get(entityplayer)));
             }
@@ -2872,10 +2840,8 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
 
     private static void a(Writer writer, Iterable<Entity> iterable) throws IOException {
         CSVWriter csvwriter = CSVWriter.a().a("x").a("y").a("z").a("uuid").a("type").a("alive").a("display_name").a("custom_name").a(writer);
-        Iterator iterator = iterable.iterator();
 
-        while (iterator.hasNext()) {
-            Entity entity = (Entity) iterator.next();
+        for (Entity entity : iterable) {
             IChatBaseComponent ichatbasecomponent = entity.getCustomName();
             IChatBaseComponent ichatbasecomponent1 = entity.getScoreboardDisplayName();
 
@@ -2886,10 +2852,9 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
 
     private void a(Writer writer) throws IOException {
         CSVWriter csvwriter = CSVWriter.a().a("x").a("y").a("z").a("type").a(writer);
-        Iterator iterator = this.tileEntityListTick.iterator(); // Paper - remove unused list
+        // Paper - remove unused list
 
-        while (iterator.hasNext()) {
-            TileEntity tileentity = (TileEntity) iterator.next();
+        for (TileEntity tileentity : this.tileEntityListTick) {
             BlockPosition blockposition = tileentity.getPosition();
 
             csvwriter.a(blockposition.getX(), blockposition.getY(), blockposition.getZ(), IRegistry.BLOCK_ENTITY_TYPE.getKey(tileentity.getTileType()));
@@ -2961,10 +2926,9 @@ public class WorldServer extends World implements GeneratorAccessSeed, NonBlocki
     private static <T> String a(Collection<T> collection, Function<T, MinecraftKey> function) {
         try {
             Object2IntOpenHashMap<MinecraftKey> object2intopenhashmap = new Object2IntOpenHashMap();
-            Iterator<T> iterator = collection.iterator(); // CraftBukkit - decompile error
+            // CraftBukkit - decompile error
 
-            while (iterator.hasNext()) {
-                T t0 = iterator.next();
+            for (T t0 : collection) {
                 MinecraftKey minecraftkey = (MinecraftKey) function.apply(t0);
 
                 object2intopenhashmap.addTo(minecraftkey, 1);
